<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[ajax获取不到json数据]]></title>
      <url>http://emloxe.github.io/2019/01/14/ajax%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0json%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>本地开启服务，用ajax获取数据时，url是对的，直接在浏览器上输入url也是可以获取到数据的。可以是<code>xhr.response</code>确是null。</p>
<p>原因是 json的数据结构有问题，在json中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> &quot;a&quot;: 123, </div><div class="line"> &quot;b&quot;: 345,  // 就是此处【,】引起的，在模拟数据的时候要注意这种写法</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 国际化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rollup]]></title>
      <url>http://emloxe.github.io/2019/01/08/rollup/</url>
      <content type="html"><![CDATA[<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h2 id="处理es"><a href="#处理es" class="headerlink" title="处理es"></a>处理es</h2><p>rollup.config.dev.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">  input: &apos;src/index.js&apos;,</div><div class="line">  output: &#123;</div><div class="line">    file: &apos;docs/js/bundle.js&apos;,</div><div class="line">    format: &apos;es&apos;,</div><div class="line">    globals: &#123;</div><div class="line">      $: &apos;$&apos;,</div><div class="line">      echarts: &apos;echarts&apos;,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    include: &apos;src/**&apos;,</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>rollup.config.release.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import babel from &apos;rollup-plugin-babel&apos;;</div><div class="line">import resolve from &apos;rollup-plugin-node-resolve&apos;;</div><div class="line">import commonjs from &apos;rollup-plugin-commonjs&apos;;</div><div class="line">import &#123; uglify &#125; from &apos;rollup-plugin-uglify&apos;;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  input: &apos;src/editor.js&apos;,</div><div class="line">  output: &#123;</div><div class="line">    file: &apos;docs/js/bundle-editor.js&apos;,</div><div class="line">    name: &apos;cis&apos;,</div><div class="line">    format: &apos;iife&apos;,</div><div class="line">    globals: &#123;</div><div class="line">      mono: &apos;mono&apos;,</div><div class="line">      twaver: &apos;twaver&apos;,</div><div class="line">      $: &apos;$&apos;,</div><div class="line">      echarts: &apos;echarts&apos;,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    resolve(),</div><div class="line">    commonjs(),</div><div class="line">    babel(&#123;</div><div class="line">      exclude: &apos;node_modules/**&apos;,</div><div class="line">      presets: [</div><div class="line">        [</div><div class="line">          &apos;@babel/preset-env&apos;,</div><div class="line">          &#123;</div><div class="line">            useBuiltIns: &apos;usage&apos;,</div><div class="line">          &#125;,</div><div class="line">        ],</div><div class="line">      ],</div><div class="line">    &#125;),</div><div class="line">    uglify(),</div><div class="line">  ],</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="结合gulp"><a href="#结合gulp" class="headerlink" title="结合gulp"></a>结合gulp</h2><p>在gulpfile.js中写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">const gulp = require(&apos;gulp&apos;);</div><div class="line"></div><div class="line">const rollup = require( &apos;rollup&apos;);</div><div class="line">const babel = require( &apos;rollup-plugin-babel&apos;);</div><div class="line">const resolve = require( &apos;rollup-plugin-node-resolve&apos;);</div><div class="line">const commonjs = require( &apos;rollup-plugin-commonjs&apos;);</div><div class="line"></div><div class="line">function glupBundle(name) &#123;</div><div class="line">  gulp.task(name, async function () &#123;</div><div class="line">    const bundle = await rollup.rollup(&#123;</div><div class="line">      input: `src/chart/com/$&#123;name&#125;.js`,</div><div class="line">      plugins: [</div><div class="line">        resolve(),</div><div class="line">        commonjs(),</div><div class="line">        babel(&#123;</div><div class="line">          exclude: &apos;node_modules/**&apos;,</div><div class="line">          presets: [</div><div class="line">            [</div><div class="line">              &apos;@babel/preset-env&apos;,</div><div class="line">              &#123;</div><div class="line">                useBuiltIns: &apos;usage&apos;,</div><div class="line">              &#125;,</div><div class="line">            ],</div><div class="line">          ],</div><div class="line">        &#125;),</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    await bundle.write(&#123;</div><div class="line">      file: `docs/editor/chart/$&#123;name&#125;.js`,</div><div class="line">      format: &apos;umd&apos;,</div><div class="line">      name: name,</div><div class="line">      globals: &#123;</div><div class="line">        mono: &apos;mono&apos;,</div><div class="line">        twaver: &apos;twaver&apos;,</div><div class="line">        $: &apos;$&apos;,</div><div class="line">        echarts: &apos;echarts&apos;,</div><div class="line">        CountUp: &apos;CountUp&apos;,</div><div class="line">        Timer: &apos;Timer&apos;,</div><div class="line">      &#125;,</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">let comChartArr = [&apos;AssetRiskChart&apos;, &apos;AttackAreaChart&apos;];</div><div class="line">// 这里写的是循环创建gulp任务（task）</div><div class="line">comChartArr.forEach((v) =&gt; &#123;</div><div class="line">  glupBundle(v);</div><div class="line">&#125;);</div><div class="line">// gulp.task(&apos;default&apos;,gulp.parallel(&apos;taskA&apos;,&apos;taskB&apos;));//并行执行</div><div class="line">// gulp.task(&apos;default&apos;,gulp.series(&apos;taskA&apos;,&apos;taskB&apos;));//按顺序执行</div><div class="line">gulp.task(&quot;default&quot;, gulp.parallel(...comChartArr, async  function () &#123;</div><div class="line">  await console.log(&apos;starting done!&apos;);</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> rollup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 打包 </tag>
            
            <tag> rollup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js代码自适应模块规范]]></title>
      <url>http://emloxe.github.io/2018/12/23/js%E4%BB%A3%E7%A0%81%E8%87%AA%E9%80%82%E5%BA%94%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</div><div class="line">    <span class="comment">// AMD. Register as an anonymous module.</span></div><div class="line">    define([], factory);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</div><div class="line">    <span class="comment">// Node. Does not work with strict CommonJS, but</span></div><div class="line">    <span class="comment">// only CommonJS-like environments that support module.exports,</span></div><div class="line">    <span class="comment">// like Node.</span></div><div class="line">    <span class="built_in">module</span>.exports = factory();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Browser globals (root is window)</span></div><div class="line">    root.anime = factory();</div><div class="line">  &#125;</div><div class="line">&#125;(<span class="keyword">this</span>, () =&gt; &#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">anime</span>() </span>&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> anime;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css自适应屏幕字号]]></title>
      <url>http://emloxe.github.io/2018/12/22/css%E8%87%AA%E9%80%82%E5%BA%94%E5%B1%8F%E5%B9%95%E5%AD%97%E4%BD%93/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">    font-size: 14px;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width: 500px)</div><div class="line">html &#123;</div><div class="line">    font-size: calc( 14px + 8 * ((100vw - 500px) / 1500));</div><div class="line">&#125;</div><div class="line">@media screen and (min-width: 2000px)</div><div class="line">html &#123;</div><div class="line">    font-size: 22px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>body中的子元素设置<code>rem</code>;</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js实现事件总线]]></title>
      <url>http://emloxe.github.io/2018/12/21/js%E5%AE%9E%E7%8E%B0%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBus</span></span>&#123;</div><div class="line">  on()&#123;&#125;</div><div class="line">  emit()&#123;&#125;</div><div class="line">  once()&#123;&#125;</div><div class="line">  off()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js实现i18n]]></title>
      <url>http://emloxe.github.io/2018/12/20/js%E5%AE%9E%E7%8E%B0i18n/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">cis.language = <span class="string">'zh'</span>;</div><div class="line">cis.i18n = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">	<span class="keyword">if</span> (cis.language === <span class="string">'zh'</span>) &#123;</div><div class="line">	  <span class="keyword">return</span> cis.i18n.zh[type];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cis.i18n.en[type];</div><div class="line">&#125;</div><div class="line"></div><div class="line">cis.i18n.zh = &#123;</div><div class="line">  <span class="string">'cis.web.portal.homepage.baseinfo.assetNum'</span>: <span class="string">'资产总数(台)'</span>,</div><div class="line">  <span class="string">'cis.web.portal.homepage.baseinfo.threatNum'</span>: <span class="string">'威胁事件'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">cis.i18n.en = &#123;</div><div class="line">  <span class="string">'cis.web.portal.homepage.baseinfo.assetNum'</span>: <span class="string">'Total Assets'</span>,</div><div class="line">  <span class="string">'cis.web.portal.homepage.baseinfo.threatNum'</span>: <span class="string">' Total Incident'</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上述代码展示<br>设置了 <code>cis.language</code>后</p>
<p>可以在需要国际化的地方调用</p>
<p><code>cis.i18n(&#39;cis.web.portal.homepage.baseinfo.assetNum&#39;)</code>返回的数据就是个数数据了</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 国际化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js实现i18n]]></title>
      <url>http://emloxe.github.io/2018/12/20/sublime%E9%85%8D%E7%BD%AEes6/</url>
      <content type="html"><![CDATA[<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 国际化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原生组件编写注意事项]]></title>
      <url>http://emloxe.github.io/2018/12/03/%E5%8E%9F%E7%94%9F%E7%BB%84%E4%BB%B6%E7%BC%96%E5%86%99%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">init: function()&#123;&#125;,  // 初始化</div><div class="line">destroy: function()&#123;&#125;,  // 销毁</div></pre></td></tr></table></figure>
<p>销毁时需要注意，有些添加了事件的监听，注意移除，有动画的先暂停动画。不可直接把节点remove掉。</p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>封装好的组件如果具备动画效果<br>需要在编写的时候进行拆分</p>
<p>可以编写如下的类型接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">initChart: function()&#123;&#125;,  // 初始功能</div><div class="line">firsRander: function()&#123;&#125;,  // 第一次绘制，此刻开始入场动画</div></pre></td></tr></table></figure>
<p>如果该组件有持续动画，应具备暂停，开始功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">start: function()&#123;&#125;,</div><div class="line">pause: function()&#123;&#125;,</div></pre></td></tr></table></figure></p>
<h2 id="数据对接"><a href="#数据对接" class="headerlink" title="数据对接"></a>数据对接</h2><h3 id="传入数据为多层对象"><a href="#传入数据为多层对象" class="headerlink" title="传入数据为多层对象"></a>传入数据为多层对象</h3><p>传入的数据如果是多层对象，有一定的可能结构层级不一致，这时就会报错，阻止程序的继续运行<br>比如正常格式为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">	a: &#123;</div><div class="line">		b: &apos;123&apos;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果后台数据返回的是<code>var obj = {}</code><br>此时如果采用obj.a.b就会报错。需要避免此类的报错就需要对即将要处理的数据进行过滤</p>
<h3 id="传入数据为数组"><a href="#传入数据为数组" class="headerlink" title="传入数据为数组"></a>传入数据为数组</h3><p>所需数据格式为数组，就需要考虑</p>
<ol>
<li>数组为空</li>
<li>数组长度与所需长度不符</li>
</ol>
<ul>
<li>过长如何处理<br>假如需要显示一个排行的前5位，那么返回数据过长就不能直接采用数据遍历生成dom节点，需要对数据进行裁剪</li>
<li>过短如何处理<br>问题同上，如果数据长度过短，也需要处理</li>
</ul>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[模拟ajax对接数据]]></title>
      <url>http://emloxe.github.io/2018/12/02/%E6%A8%A1%E6%8B%9Fajax%E5%AF%B9%E6%8E%A5%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>平常日常中总是需要与后台数据对接，但如果当前后台接口如法提供，该如何处理呢？<br>以下是参与项目时公司大佬写的处理方法，觉得很好用，就记录下来了<br><a id="more"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 封装好的Ajax</span></div><div class="line">cis.api.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">(resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> url = options.url;</div><div class="line">    <span class="keyword">let</span> method = options.method || <span class="string">'get'</span>;</div><div class="line">    <span class="keyword">let</span> data = options.data;</div><div class="line">    <span class="keyword">if</span> (method === <span class="string">'get'</span>) &#123;</div><div class="line">      <span class="keyword">let</span> query = cis.api.param(data);</div><div class="line">      url = query ? <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;query&#125;</span>`</span> : url;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</div><div class="line">          <span class="keyword">let</span> result = xhr.response;</div><div class="line">          <span class="keyword">if</span> (options.responseType === <span class="string">'json'</span> &amp;&amp; <span class="keyword">typeof</span> result === <span class="string">'string'</span>) &#123;</div><div class="line">            result = <span class="built_in">JSON</span>.parse(result);</div><div class="line">          &#125;</div><div class="line">          resolve(result);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          reject(<span class="keyword">this</span>.statusText);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    xhr.open(method, url);</div><div class="line">    xhr.responseType = options.responseType || <span class="string">'json'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (method === <span class="string">'get'</span>) &#123;</div><div class="line">      xhr.send();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</div><div class="line">      <span class="built_in">Object</span>.keys(data).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</div><div class="line">        formData.append(key, data[key]);</div><div class="line">      &#125;);</div><div class="line">      xhr.send(formData);</div><div class="line">    &#125;</div><div class="line">  &#125;));</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 模拟的ajax</span></div><div class="line">cis.api.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> prefix = options.prefix || cis.datas;</div><div class="line">      <span class="keyword">let</span> result = prefix[options.url];</div><div class="line">      <span class="keyword">if</span> (options.data) &#123;</div><div class="line">        result = <span class="built_in">Object</span>.keys(options.data).reduce(<span class="function">(<span class="params">results, key</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (results == <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> results[options.data[key]];</div><div class="line">        &#125;, result);</div><div class="line">      &#125;</div><div class="line">      resolve(result);</div><div class="line">    &#125;, <span class="built_in">Math</span>.random() * <span class="number">200</span> + <span class="number">100</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>cis.api.ajax</code>写两次，在开发环境的时候，下面的方式直接覆盖了真正ajax的请求,采用模拟的ajax请求。</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vscode使用]]></title>
      <url>http://emloxe.github.io/2018/11/15/vscode%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>windows</p>
<ul>
<li><p>Alt 多行游标</p>
</li>
<li><p>Ctrl+f  查找</p>
</li>
<li><p>Ctrl+h  替换</p>
</li>
<li><p>Ctrl+z  倒退</p>
</li>
<li><p>Ctrl+y  向前</p>
</li>
<li><p>Ctrl+/  注释代码</p>
</li>
<li><p>Ctrl+[  减小缩进</p>
</li>
<li><p>Ctrl+]  增加缩进</p>
</li>
<li><p>鼠标选中文本，按下Alt+F3  一次性选择全部的相同文本进行同时编辑</p>
</li>
</ul>
<a id="more"></a>
<h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h3><p>左侧第5个图标<br>可以在输入框中进行搜索</p>
<h4 id="JS-CSS-HTML-Formatter-代码格式化插件"><a href="#JS-CSS-HTML-Formatter-代码格式化插件" class="headerlink" title="JS-CSS-HTML Formatter 代码格式化插件"></a>JS-CSS-HTML Formatter 代码格式化插件</h4><h4 id="fileheader-注释快速生成插件"><a href="#fileheader-注释快速生成插件" class="headerlink" title="fileheader 注释快速生成插件"></a>fileheader 注释快速生成插件</h4>]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js-color颜色汇总]]></title>
      <url>http://emloxe.github.io/2018/11/11/js-color%E9%A2%9C%E8%89%B2%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 表示一个颜色</div><div class="line"> * @param &#123;Number&#125; [red=0]   范围为[0, 255]，默认值为0</div><div class="line"> * @param &#123;Number&#125; [green=0] 范围为[0, 255]，默认值为0</div><div class="line"> * @param &#123;Number&#125; [blue=0]  范围为[0, 255]，默认值为0</div><div class="line"> * @param &#123;Number&#125; [alpha=0] 范围为[0, 1]，默认值为1</div><div class="line"> * </div><div class="line"> * @constructor</div><div class="line"> * @alias Color</div><div class="line"> */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * [Color description]</div><div class="line"> * @param &#123;[type]&#125; red   [description]</div><div class="line"> * @param &#123;[type]&#125; green [description]</div><div class="line"> * @param &#123;[type]&#125; blue  [description]</div><div class="line"> * @param &#123;[type]&#125; alpha [description]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params">red, green, blue, alpha</span>)</span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * The red component.</div><div class="line">   * @type &#123;Number&#125;</div><div class="line">   * @default 255.0</div><div class="line">   */</div><div class="line">  <span class="keyword">this</span>.red = defaultValue(red, <span class="number">1.0</span>);</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * The green component.</div><div class="line">   * @type &#123;Number&#125;</div><div class="line">   * @default 255.0</div><div class="line">   */</div><div class="line">  <span class="keyword">this</span>.green = defaultValue(green, <span class="number">1.0</span>);</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * The blue component.</div><div class="line">   * @type &#123;Number&#125;</div><div class="line">   * @default 255.0</div><div class="line">   */</div><div class="line">  <span class="keyword">this</span>.blue = defaultValue(blue, <span class="number">1.0</span>);</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * The alpha component.</div><div class="line">   * @type &#123;Number&#125;</div><div class="line">   * @default 1.0</div><div class="line">   */</div><div class="line">  <span class="keyword">this</span>.alpha = defaultValue(alpha, <span class="number">1.0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 随机生成颜色</div><div class="line"> * @return &#123;Color&#125; 返回新的颜色</div><div class="line"> */</div><div class="line">Color.fromRandom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">red</span>: <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">255</span>),</div><div class="line">    <span class="attr">green</span>: <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">255</span>),</div><div class="line">    <span class="attr">blue</span>: <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">255</span>),</div><div class="line">    <span class="attr">alpha</span>: <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">10</span>)/<span class="number">10</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 提亮当前颜色</div><div class="line"> * </div><div class="line"> * @param  &#123;Number&#125; level 提亮指数，应介于 0 与 1 之间，如果小于 0，颜色也会被提亮。</div><div class="line"> * @return &#123;Color&#125;       返回新的颜色</div><div class="line"> */</div><div class="line">Color.prototype.toLift = <span class="function"><span class="keyword">function</span>(<span class="params">level</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> red = lift(<span class="keyword">this</span>.red, level);</div><div class="line">  <span class="keyword">let</span> green = lift(<span class="keyword">this</span>.green, level);</div><div class="line">  <span class="keyword">let</span> blue = lift(<span class="keyword">this</span>.blue, level);</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">red</span>: red,</div><div class="line">    <span class="attr">green</span>: green,</div><div class="line">    <span class="attr">blue</span>: blue,</div><div class="line">    <span class="attr">alpha</span>: <span class="keyword">this</span>.alpha</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js生成随机序列]]></title>
      <url>http://emloxe.github.io/2018/11/10/js%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * js生成随机序列</div><div class="line"> * @param &#123;Number&#125; len 需要产生随机序列的长度</div><div class="line"> * @return &#123;String&#125; 随机序列</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>(<span class="params">len</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> chars = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>.split(<span class="string">''</span>);</div><div class="line">  <span class="keyword">var</span> id = [],</div><div class="line">    i;</div><div class="line">  radix = chars.length;</div><div class="line">  <span class="keyword">if</span> (len) &#123;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) id[i] = chars[<span class="number">0</span> | <span class="built_in">Math</span>.random() * radix];</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> r;</div><div class="line">    id[<span class="number">5</span>] = id[<span class="number">11</span>] = id[<span class="number">17</span>] = id[<span class="number">24</span>] = <span class="string">'-'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (!id[i]) &#123;</div><div class="line">        r = <span class="number">0</span> | <span class="built_in">Math</span>.random() * <span class="number">16</span>;</div><div class="line">        id[i] = chars[(i == <span class="number">19</span>) ? (r &amp; <span class="number">0x3</span>) | <span class="number">0x8</span> : r];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> id.join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何写js注释]]></title>
      <url>http://emloxe.github.io/2018/11/01/%E5%A6%82%E4%BD%95%E5%86%99js%E6%B3%A8%E9%87%8A/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>sublime 推荐插件</p>
<p><a href="https://emloxe.github.io/2017/04/25/sublime%E4%BD%BF%E7%94%A8/#%E5%BF%AB%E9%80%9F%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90-DocBlockr">https://emloxe.github.io/2017/04/25/sublime%E4%BD%BF%E7%94%A8/#%E5%BF%AB%E9%80%9F%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90-DocBlockr</a></p>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>以下为例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * [Color description]</div><div class="line"> * @param &#123;[type]&#125; red   [description]</div><div class="line"> * @param &#123;[type]&#125; green [description]</div><div class="line"> * @param &#123;[type]&#125; blue  [description]</div><div class="line"> * @param &#123;[type]&#125; alpha [description]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params">red, green, blue, alpha</span>)</span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p><code>[Color description]</code>为对这个函数的描述</p>
<p><code>{[type]}</code>为类型，在这里就可以写为Number</p>
<p><code>red</code> 为传入的参数值，当参数值为可选的时候可以用<code>[]</code>包裹在外面，如果有默认值则可以写为<code>[red=0]</code></p>
<p><code>[description]</code>为对这个参数的描述</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp]]></title>
      <url>http://emloxe.github.io/2018/09/07/gulp/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><ol>
<li><p>全局安装 gulp：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --global gulp</div></pre></td></tr></table></figure>
</li>
<li><p>作为项目的开发依赖（devDependencies）安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev gulp</div></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录下创建一个名为 gulpfile.js 的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;default&apos;, function() &#123;</div><div class="line">  // 将你的默认的任务代码放在这</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>运行 gulp：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp</div></pre></td></tr></table></figure>
</li>
</ol>
<p>默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。</p>
<p>想要单独执行特定的任务（task），请输入 gulp <task> <othertask>。</othertask></task></p>
<h2 id="处理es6示例"><a href="#处理es6示例" class="headerlink" title="处理es6示例"></a>处理es6示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var babel = require(&apos;gulp-babel&apos;);</div><div class="line">var concat = require(&apos;gulp-concat&apos;);</div><div class="line">var uglify = require(&apos;gulp-uglify&apos;);</div><div class="line">var rev = require(&apos;gulp-rev&apos;); //- 对文件名加MD5后缀</div><div class="line">var revCollector = require(&apos;gulp-rev-collector&apos;); //- 路径替换</div><div class="line"></div><div class="line">gulp.task(&quot;default&quot;,function()&#123;</div><div class="line">  gulp.src([</div><div class="line">    &quot;./public/js/vi/Vi.js&quot;,</div><div class="line">    &quot;./public/js/a.js&quot;</div><div class="line">  ])</div><div class="line">  .pipe(concat(&apos;main.js&apos;))</div><div class="line">  .pipe(babel(&#123;</div><div class="line">          presets: [&apos;env&apos;]</div><div class="line">      &#125;))</div><div class="line">  .pipe(uglify())</div><div class="line">  .pipe(rev())</div><div class="line">  .pipe(gulp.dest(&apos;./dist/js&apos;))</div><div class="line">  .pipe(rev.manifest()) //- 生成一个rev-manifest.json</div><div class="line">  .pipe(gulp.dest(&apos;./rev&apos;));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="处理css示例"><a href="#处理css示例" class="headerlink" title="处理css示例"></a>处理css示例</h2><p><code>npm i --save-dev gulp gulp-concat gulp-postcss autoprefixer</code> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">const</span> postcss = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</div><div class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</div><div class="line"><span class="comment">// const cssnext = require('postcss-cssnext');</span></div><div class="line"><span class="keyword">const</span> shortcss = <span class="built_in">require</span>(<span class="string">'postcss-short'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 兼容其他浏览器</span></div><div class="line">gulp.task(<span class="string">'autoprefixer_css'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> plugins = [</div><div class="line">    shortcss,</div><div class="line">    <span class="comment">// cssnext,</span></div><div class="line">    autoprefixer(&#123; <span class="attr">browsers</span>: [<span class="string">"Android 4.1"</span>, <span class="string">"iOS 7.1"</span>, <span class="string">"Chrome &gt; 31"</span>, <span class="string">"ff &gt; 15"</span>, <span class="string">"ie &gt;= 9"</span>], <span class="attr">cascade</span>: <span class="literal">false</span> &#125;),</div><div class="line">  ];</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'docs/css/*.css'</span>) <span class="comment">// 引入的路径</span></div><div class="line">  	<span class="comment">// .pipe(concat('editor.css')) // 合并代码</span></div><div class="line">    .pipe(postcss(plugins))  <span class="comment">// 使用插件</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'docs/css-editor'</span>)); <span class="comment">// 输出路径</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并css</span></div><div class="line">gulp.task(<span class="string">'css'</span>, gulp.parallel(<span class="string">'autoprefixer_css'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'docs/css-editor/layout.css'</span>, <span class="string">'docs/css-editor/chart.css'</span>])</div><div class="line">    .pipe(concat(<span class="string">'editor.css'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'docs/css-editor'</span>));</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> gulp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 打包 </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[koa]]></title>
      <url>http://emloxe.github.io/2018/09/07/koa/</url>
      <content type="html"><![CDATA[<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> koa </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js点击dom位置计算]]></title>
      <url>http://emloxe.github.io/2018/09/01/js%E7%82%B9%E5%87%BBdom%E4%BD%8D%E7%BD%AE%E8%AE%A1%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>获取dom中内部点击的位置<br><a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">'www'</span>);</div><div class="line">a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = ev.clientX; <span class="comment">// x coordinate of a mouse pointer</span></div><div class="line">  <span class="keyword">var</span> y = ev.clientY; <span class="comment">// y coordinate of a mouse pointer</span></div><div class="line">  <span class="keyword">var</span> rect = ev.target.getBoundingClientRect() ;</div><div class="line">  <span class="built_in">console</span>.log(x - rect.left, y - rect.top)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>x - rect.left</code>即鼠标在内部点击的横坐标</p>
<p><code>y - rect.top</code>即鼠标在内部点击的纵坐标</p>
<p>坐标系x是右向为正，y是下为正</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rjs]]></title>
      <url>http://emloxe.github.io/2018/09/01/rjs/</url>
      <content type="html"><![CDATA[<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 打包 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 打包 </tag>
            
            <tag> r.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[requireJS]]></title>
      <url>http://emloxe.github.io/2018/08/23/requireJS/</url>
      <content type="html"><![CDATA[<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> requireJS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> requireJS </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql]]></title>
      <url>http://emloxe.github.io/2018/07/22/mysql/</url>
      <content type="html"><![CDATA[<p>mysql总结<br><a id="more"></a></p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; mysql -u root -p</div></pre></td></tr></table></figure>
<p>-u表示用户名，-p表示密码，输入回车后需要输入密码，即可进入数据库</p>
<p>其他参数描述如下图<br><img src="/images/20180722-001.png" alt="images"></p>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; exit;</div><div class="line">或</div><div class="line">&gt; quit;</div><div class="line">或</div><div class="line">&gt; \q;</div></pre></td></tr></table></figure>
<h3 id="修改提示符"><a href="#修改提示符" class="headerlink" title="修改提示符"></a>修改提示符</h3><p>在登录后每次输入都会有前缀</p>
<p>显示如下</p>
<p><img src="/images/20180722-002.png" alt="images"></p>
<p>可以通过命令来修改提示符</p>
<ol>
<li>连接客户端时通过参数指定<br>shell&gt;mysql -u root -p 123456 –prompt 提示符</li>
<li>连接上客户端之后，通过prompt命令修改<br>mysql&gt;prompt 提示符</li>
</ol>
<p>其他参数有<br><img src="/images/20180722-003.png" alt="images"></p>
<p>可以修改为如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;prompt \u@\h \d&gt;</div></pre></td></tr></table></figure></p>
<p><img src="/images/20180722-004.png" alt="images"></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT VERSION();     显示当前服务器版本</div><div class="line">SELECT NOW();           显示当前日期</div><div class="line">SELECT USER();            显示当前 用户</div></pre></td></tr></table></figure>
<p>创建数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE &#123;DATABASE | SCHEMA&#125; [IF MOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset_name</div></pre></td></tr></table></figure></p>
<p>查看当前服务器下的数据表列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW &#123;DATABASES | SCHEMAS&#125; [LIKE &apos;pattern&apos; | WHERW expr]</div></pre></td></tr></table></figure></p>
<p>修改数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER &#123;DATABASE | SCHEMA&#125; [db_name] [DEFAULT] CHARACTER SET [=] charset_name</div></pre></td></tr></table></figure></p>
<p>删除数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name</div></pre></td></tr></table></figure></p>
<h3 id="基本规范"><a href="#基本规范" class="headerlink" title="基本规范"></a>基本规范</h3><p>关键字与函数名称全部大写<br>数据库名称，表名称，字段名称全部小写<br>SQL语句必须以分号结尾</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="/images/20180722-005.png" alt="images"><br><img src="/images/20180722-006.png" alt="images"><br><img src="/images/20180722-007.png" alt="images"></p>
<h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><p>进入数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">USE table_name;</div><div class="line">SELECT DATABASE();  #查看打开当前数据名称</div></pre></td></tr></table></figure></p>
<p>创建数据表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE [IF NOT EXISTS] table_name(</div><div class="line">column_name data_type,...</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>查看数据表列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW TABLES [FROM db_name] [LIKE &apos;pattern&apos; | WHERE expr]</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>学习参考文献，教程如下</p>
<p><a href="https://www.imooc.com/learn/122" target="_blank" rel="external">与MySQL的零距离接触</a></p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js promise]]></title>
      <url>http://emloxe.github.io/2018/06/15/js%20promise/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Promise是异步编程的一种解决方案，它有三种状态，分别是pending-进行中、resolved-已完成、rejected-已失败</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line"></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line"></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;, <span class="number">1000</span>)</div></pre></td></tr></table></figure>
<p>1 2 3依次输出，每次输出间隔约1秒</p>
<p>我们常用的写法不会把代码写在一起，会通过函数的方式进行调用<br>改写如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function a()&#123;</div><div class="line">  setTimeout(function()&#123;</div><div class="line">    console.log(&apos;a&apos;);</div><div class="line"></div><div class="line">    b()</div><div class="line">  &#125;, 1000)</div><div class="line">&#125;</div><div class="line">function b()&#123;</div><div class="line">  setTimeout(function()&#123;</div><div class="line">    console.log(&apos;b&apos;);</div><div class="line"></div><div class="line">    c()</div><div class="line">  &#125;, 1000)</div><div class="line">&#125;</div><div class="line">function c()&#123;</div><div class="line">  setTimeout(function()&#123;</div><div class="line">    console.log(&apos;c&apos;);</div><div class="line">  &#125;, 1000)</div><div class="line">&#125;</div><div class="line">a()</div></pre></td></tr></table></figure></p>
<p>现在用promise方式改写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'a'</span>);</div><div class="line"></div><div class="line">      resolve()</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">var</span> promise2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'b'</span>);</div><div class="line"></div><div class="line">      resolve()</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">promise1().then(promise2).then(c)</div></pre></td></tr></table></figure></p>
<p>用该中方式即可链式调用，每隔1s输出a,b,c</p>
<p>那么如果a,b同时调用，a、b有都完成后再调用c<br>可写成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Promise.all([promise1(), promise2()]).then(c)</div></pre></td></tr></table></figure></p>
<p>约1秒后同时输出a、b,然后再输出c</p>
<p>如果a,b同时调用，a、b有一个完成即可调用c<br>可写成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Promise.race([promise1(), promise2()]).then(c)</div></pre></td></tr></table></figure></p>
<p>用setTimeout模拟基本上都会成功，事实上promise提供了失败的回调，可以用reject来触发失败的回调<br>jquery ajax写法如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'127.0.0.1/usr'</span>,</div><div class="line">      <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;&#125;,</div><div class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;  <span class="comment">// 根据状态码判断是否成功，这里0表示成功</span></div><div class="line">          resolve();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">          reject();</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">error</span>: reject</div><div class="line"></div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[photoshop快捷键]]></title>
      <url>http://emloxe.github.io/2018/06/09/photoshop%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>快捷键记录，基于windows平台<br><a id="more"></a></p>
<h2 id="钢笔工具-p"><a href="#钢笔工具-p" class="headerlink" title="钢笔工具 p"></a>钢笔工具 p</h2><h2 id="形状工具-U"><a href="#形状工具-U" class="headerlink" title="形状工具 U"></a>形状工具 U</h2><p>ctrl+t后<br>点击某一个锚点 ctrl+shift+alt 可以使矩形一边拉大</p>
<p>ctrl+t后<br>右键可以反转图形</p>
<p>shift+alt+control+t 绘制多个图形</p>
<p>选中多个图形，control+j复制形成新的图层</p>
<p>alt 点击移动，复制图形</p>
<h2 id="图层快捷键"><a href="#图层快捷键" class="headerlink" title="图层快捷键"></a>图层快捷键</h2><p>首先需要shift选中多个图层<br>ctrl+E 图层合并  布尔运算加法<br>ctrl+G 图层放置在一个组下</p>
]]></content>
      
        <categories>
            
            <category> photoshop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> photoshop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[判断浏览器是否支持HTML5视频]]></title>
      <url>http://emloxe.github.io/2018/05/29/%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81HTML5%E8%A7%86%E9%A2%91/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkVideo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(!!<span class="built_in">document</span>.createElement(<span class="string">'video'</span>).canPlayType)&#123;</div><div class="line">    <span class="keyword">var</span> vidTest=<span class="built_in">document</span>.createElement(<span class="string">"video"</span>);</div><div class="line">    oggTest=vidTest.canPlayType(<span class="string">'video/ogg; codecs="theora, vorbis"'</span>);</div><div class="line">    <span class="keyword">if</span> (!oggTest)&#123;</div><div class="line">      h264Test=vidTest.canPlayType(<span class="string">'video/mp4; codecs="avc1.42E01E, mp4a.40.2"'</span>);</div><div class="line">      <span class="keyword">if</span> (!h264Test)&#123;</div><div class="line">        alert(<span class="string">"抱歉你的浏览器不支持HTML5 video标签！."</span>)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (h264Test==<span class="string">"probably"</span>)&#123;</div><div class="line">          alert(<span class="string">"非常棒！你的浏览器支持HTML5 video标签！"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">          alert(<span class="string">"Meh. Some support."</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">if</span> (oggTest==<span class="string">"probably"</span>)&#123;</div><div class="line">        alert(<span class="string">"非常棒！你的浏览器支持HTML5 video标签！"</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        alert(<span class="string">"Meh. Some support."</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    alert(<span class="string">"Sorry. No video support."</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js对css颜色转换函数]]></title>
      <url>http://emloxe.github.io/2018/05/23/js%E5%AF%B9css%E9%A2%9C%E8%89%B2%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>工作中发现比较好的颜色转换函数，记录一下</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^#([0-9a-fA-f]&#123;3&#125;|[0-9a-fA-f]&#123;6&#125;)$/</span>;</div><div class="line"><span class="comment">/*RGB颜色转换为16进制*/</span></div><div class="line"><span class="built_in">String</span>.prototype.colorHex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">if</span> (<span class="regexp">/^(rgb|RGB)/</span>.test(that)) &#123;</div><div class="line">    <span class="keyword">var</span> aColor = that.replace(<span class="regexp">/(?:\(|\)|rgb|RGB)*/g</span>, <span class="string">""</span>).split(<span class="string">","</span>);</div><div class="line">    <span class="keyword">var</span> strHex = <span class="string">"#"</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aColor.length; i++) &#123;</div><div class="line">      <span class="keyword">var</span> hex = <span class="built_in">Number</span>(aColor[i]).toString(<span class="number">16</span>);</div><div class="line">      <span class="keyword">if</span> (hex === <span class="string">"0"</span>) &#123;</div><div class="line">        hex += hex;</div><div class="line">      &#125;</div><div class="line">      strHex += hex;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (strHex.length !== <span class="number">7</span>) &#123;</div><div class="line">      strHex = that;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> strHex;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (reg.test(that)) &#123;</div><div class="line">    <span class="keyword">var</span> aNum = that.replace(<span class="regexp">/#/</span>, <span class="string">""</span>).split(<span class="string">""</span>);</div><div class="line">    <span class="keyword">if</span> (aNum.length === <span class="number">6</span>) &#123;</div><div class="line">      <span class="keyword">return</span> that;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aNum.length === <span class="number">3</span>) &#123;</div><div class="line">      <span class="keyword">var</span> numHex = <span class="string">"#"</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aNum.length; i += <span class="number">1</span>) &#123;</div><div class="line">        numHex += (aNum[i] + aNum[i]);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> numHex;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> that;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/*16进制颜色转为RGB格式*/</span></div><div class="line"><span class="built_in">String</span>.prototype.colorRgb = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sColor = <span class="keyword">this</span>.toLowerCase();</div><div class="line">  <span class="keyword">if</span> (sColor &amp;&amp; reg.test(sColor)) &#123;</div><div class="line">    <span class="keyword">if</span> (sColor.length === <span class="number">4</span>) &#123;</div><div class="line">      <span class="keyword">var</span> sColorNew = <span class="string">"#"</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i += <span class="number">1</span>) &#123;</div><div class="line">        sColorNew += sColor.slice(i, i + <span class="number">1</span>).concat(sColor.slice(i, i + <span class="number">1</span>));</div><div class="line">      &#125;</div><div class="line">      sColor = sColorNew;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//处理六位的颜色值</span></div><div class="line">    <span class="keyword">var</span> sColorChange = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i += <span class="number">2</span>) &#123;</div><div class="line">      sColorChange.push(<span class="built_in">parseInt</span>(<span class="string">"0x"</span> + sColor.slice(i, i + <span class="number">2</span>)));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"RGB("</span> + sColorChange.join(<span class="string">","</span>) + <span class="string">")"</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> sColor;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">String</span>.prototype.colorRgba = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sColor = <span class="keyword">this</span>.toLowerCase();</div><div class="line">  <span class="keyword">if</span> (sColor &amp;&amp; reg.test(sColor)) &#123;</div><div class="line">    <span class="keyword">var</span> rgb = <span class="keyword">this</span>.colorRgb().toLowerCase();</div><div class="line">    <span class="keyword">return</span> rgb.replace(<span class="string">'rgb'</span>, <span class="string">'rgba'</span>).replace(<span class="string">')'</span>, <span class="string">','</span> + a + <span class="string">')'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sColor.indexOf(<span class="string">'rgb'</span>) === <span class="number">0</span> &amp;&amp; sColor.indexOf(<span class="string">'rgba'</span>) === <span class="number">-1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> sColor.replace(<span class="string">'rgb'</span>, <span class="string">'rgba'</span>).replace(<span class="string">')'</span>, <span class="string">','</span> + a + <span class="string">')'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sColor.indexOf(<span class="string">'rgba'</span>) === <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> sColor.slice(<span class="number">0</span>, sColor.lastIndexOf(<span class="string">','</span>) + <span class="number">1</span>) + a + <span class="string">')'</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> sColor;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos;rgb(0, 0, 0)&apos;.colorHex();  // &quot;#000000&quot;</div><div class="line">&apos;#000&apos;.colorRgb();  // &quot;RGB(0,0,0)&quot;</div><div class="line">&apos;#000&apos;.colorRgba(.5);  // &quot;rgba(0,0,0,0.5)&quot;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git基本操作]]></title>
      <url>http://emloxe.github.io/2018/04/27/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="使用git初始化"><a href="#使用git初始化" class="headerlink" title="使用git初始化"></a>使用git初始化</h2><h3 id="本地创建一个-git项目推送到远程空仓库"><a href="#本地创建一个-git项目推送到远程空仓库" class="headerlink" title="本地创建一个 git项目推送到远程空仓库"></a>本地创建一个 git项目推送到远程空仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">＃初始化本地仓库</div><div class="line">git init</div><div class="line">＃将本地内容添加至git索引中</div><div class="line">git add .</div><div class="line">＃将索引添加至本地仓库中</div><div class="line">git commit -m &quot;first commit&quot;</div><div class="line">#添加远程仓库路径</div><div class="line">git remote add origin https://github.com/emloxe/eee.git</div><div class="line">＃将本地内容push至远程仓库中</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<h3 id="本地项目代码已写好，远程分支不为空"><a href="#本地项目代码已写好，远程分支不为空" class="headerlink" title="本地项目代码已写好，远程分支不为空"></a>本地项目代码已写好，远程分支不为空</h3><p>需要将本地代码覆盖远程分支代码</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="合并代码到远程分支"><a href="#合并代码到远程分支" class="headerlink" title="合并代码到远程分支"></a>合并代码到远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &apos;update&apos;</div><div class="line">git push</div><div class="line">// 如果是其他分支(dev)可以用 git push origin dev</div></pre></td></tr></table></figure>
<h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p><code>error: You have not concluded your merge (MERGE_HEAD exists)</code><br>导致报错的原因可能是在以前pull下来的代码自动合并失败</p>
<p>手动修改冲突文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &lt;备注本次合并的内容&gt;</div><div class="line">$ git push</div></pre></td></tr></table></figure></p>
<p>强制覆盖有两种方式</p>
<p>解决办法一:保留本地的更改,中止合并-&gt;重新合并-&gt;重新拉取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$:git merge --abort</div><div class="line">$:git reset --merge</div><div class="line">$:git pull</div></pre></td></tr></table></figure></p>
<p>解决办法二:舍弃本地代码,远端版本覆盖本地版本(慎重)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$:git fetch --all</div><div class="line">$:git reset --hard origin/master</div><div class="line">$:git fetch</div></pre></td></tr></table></figure></p>
<p>参考<br><a href="https://blog.csdn.net/feng2qing/article/details/56496441" target="_blank" rel="external">https://blog.csdn.net/feng2qing/article/details/56496441</a></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在lunix搭载node服务]]></title>
      <url>http://emloxe.github.io/2018/04/03/%E5%9C%A8lunix%E6%90%AD%E8%BD%BDnode%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="ssh登录lunix"><a href="#ssh登录lunix" class="headerlink" title="ssh登录lunix"></a>ssh登录lunix</h2><p>输入以下，name为用户名，url为地址，地址可以是域名或IPv4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh name@url</div></pre></td></tr></table></figure></p>
<p>windows的CMD无法通过ssh连接，可以用git bash连接</p>
<h2 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a>WinSCP</h2><p>如果你使用的是windows电脑，文件传输其实可以通过桌面应用进行文件快速的管理</p>
<p>下载地址<br>链接: <a href="https://pan.baidu.com/s/1ry3W7YPJn69gG5_Gp2j6sQ" target="_blank" rel="external">https://pan.baidu.com/s/1ry3W7YPJn69gG5_Gp2j6sQ</a> 密码: px5r</p>
<h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><ol>
<li><p>通过ssh链接远端服务器<br>输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  uname -a</div></pre></td></tr></table></figure>
</li>
<li><p>查询Linux系统位数<br><img src="/images/2018040301.png" alt="images"><br>通过查询可以得知该Lunix为32位系统</p>
</li>
<li><p>下载放置在服务端</p>
</li>
</ol>
<p>去官网下载和自己系统匹配的文件：<br> 英文网址：<a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a><br> 中文网址：<a href="http://nodejs.cn/download/" target="_blank" rel="external">http://nodejs.cn/download/</a></p>
<p>有三种安装形式<br>1) 服务端直接下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 进入安装包放置的位置</div><div class="line"># cd /usr/local/src </div><div class="line">// 下载安装包，这个是编译好的安装包，不要make &amp;&amp; make install</div><div class="line"># wget https://nodejs.org/dist/v6.11.4/node-v6.11.4-linux-x64.tar.xz</div><div class="line">// 解压</div><div class="line"># tar -zxvf node-v6.11.4-linux-x64.tar.xz</div></pre></td></tr></table></figure></p>
<p>1) 本地解压上传<br>通过 WinSCP上传</p>
<p>2) 压缩包上传服务端解压<br>可以通过WinSCP上传<br>解压方式如上</p>
<ol>
<li>全局安装 node npm</li>
</ol>
<p>第一个路径为下载放置的路径<br>注意：在根目录执行该步操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ln -s /app/software/nodejs/bin/npm /usr/local/bin/ </div><div class="line"></div><div class="line"># ln -s /app/software/nodejs/bin/node /usr/local/bin/</div></pre></td></tr></table></figure></p>
<p>验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># node -v</div><div class="line"># npm -v</div></pre></td></tr></table></figure></p>
<p>如果失败<br>在<code>/usr/local/bin/</code>下查看，存在node，npm文件，删除文件<br>重复输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ln -s /app/software/nodejs/bin/npm /usr/local/bin/ </div><div class="line"></div><div class="line"># ln -s /app/software/nodejs/bin/node /usr/local/bin/</div></pre></td></tr></table></figure></p>
<h2 id="forever守护进程"><a href="#forever守护进程" class="headerlink" title="forever守护进程"></a>forever守护进程</h2><p>启动node服务后，不进行进程守护，node服务就会自动关闭<br>可以在服务器上安装forever(<a href="https://www.npmjs.com/package/forever" target="_blank" rel="external">https://www.npmjs.com/package/forever</a>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># npm install forever -g        #安装</div></pre></td></tr></table></figure>
<p>全局安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ln -s /app/software/nodejs/lib/node_modules/forever/bin/forever /usr/local/bin/</div></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># forever start app.js          #启动</div><div class="line"># forever stop app.js           #关闭</div><div class="line"># forever start -l forever.log -o out.log -e err.log app.js   #输出日志和错误</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> lunix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lunix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客迁移到新pc]]></title>
      <url>http://emloxe.github.io/2018/02/13/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0pc/</url>
      <content type="html"><![CDATA[<p>更换电脑后将原hexo博客内容，在新电脑中展示<br><a id="more"></a></p>
<ol>
<li>将文件夹压缩，拷贝至新电脑</li>
<li><p>重新装hexo脚手架</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g hexo-cli</div></pre></td></tr></table></figure>
</li>
<li><p>git修改</p>
</li>
</ol>
<blockquote>
<p>配置sshkey，在<code>git bash</code>中输入</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;注册git的邮箱&quot;</div><div class="line">``` </div><div class="line"></div><div class="line">连续几个按回车，密码为空，然后在C:\Users\Administrator.ssh下，得到两个文件id_rsa和id_rsa.pub(文件地址可能会有变化，但可根据git上提示的内容找到文件)</div><div class="line">复制id_rsa.pub中的所有内容</div><div class="line"></div><div class="line">&gt; GitHub上添加SSH密钥</div><div class="line"></div><div class="line">打开https://github.com/settings/ssh new SSH key 添加密钥，title随便写，key为刚刚复制的内容</div><div class="line"></div><div class="line">&gt; 验证是否能否连接到github</div></pre></td></tr></table></figure>
<p>$ ssh -T git@github.com<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果提示hexo</div></pre></td></tr></table></figure></p>
<p>The authenticity of host ‘github.com (192.30.253.112)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)? y<br>Please type ‘yes’ or ‘no’: yes<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">或者提示覆盖原来的文件，选择yes回车，只要能看到，如下提示就能成功连接到github</div></pre></td></tr></table></figure></p>
<p>Hi zhangsan! You’ve successfully authenticated, but GitHub does not provide shell access.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; github的仓库地址也发生改变</div><div class="line"></div><div class="line">修改站点配置文件 `_config.yml`</div></pre></td></tr></table></figure></p>
<h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>  type: git<br>  repository: git@github.com:emloxe/blog.emloxe.com.git<br>  branch: master<br>```</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 类型检测 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ajax异步顺序问题解决]]></title>
      <url>http://emloxe.github.io/2017/12/22/ajax%E5%BC%82%E6%AD%A5%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="es5以前的解决办法"><a href="#es5以前的解决办法" class="headerlink" title="es5以前的解决办法"></a>es5以前的解决办法</h2><ol>
<li><p>等待上一个Ajax完成后执行下一个<br>这种情况比较容易解决，直接通过回调就可以</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">  callback&amp;&amp;callback()</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">  callback&amp;&amp;callback()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ajax(...)是某个库中的某个ajax函数</span></div><div class="line">ajax(<span class="string">'http://some.url.1'</span>, foo( ajax(<span class="string">'http://some.url.2'</span>, bar) ))</div></pre></td></tr></table></figure>
</li>
<li><p>等待ajax都完成时，再执行baz</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a, b;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">  if(a&amp;&amp;b)&#123;</div><div class="line">    callback&amp;&amp;callback()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">  if(a&amp;&amp;b)&#123;</div><div class="line">    callback&amp;&amp;callback()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// ajax(...)是某个库中的某个ajax函数</span></div><div class="line">ajax(<span class="string">'http://some.url.1'</span>, foo(baz))</div><div class="line">ajax(<span class="string">'http://some.url.2'</span>, bar(baz))</div></pre></td></tr></table></figure>
<ol>
<li>第一个完成的执行回调</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">  if(!a)&#123;</div><div class="line">    a++</div><div class="line">    callback&amp;&amp;callback()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">  if(!a)&#123;</div><div class="line">    a++</div><div class="line">    callback&amp;&amp;callback()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// ajax(...)是某个库中的某个ajax函数</span></div><div class="line">ajax(<span class="string">'http://some.url.1'</span>, foo(baz))</div><div class="line">ajax(<span class="string">'http://some.url.2'</span>, bar(baz))</div></pre></td></tr></table></figure>
<h2 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h2><p>在es6中引入了promise</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[获取input[type=file]上传文件文件名及扩展名]]></title>
      <url>http://emloxe.github.io/2017/12/21/%E8%8E%B7%E5%8F%96input%5Btype=file%5D%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%96%87%E4%BB%B6%E5%90%8D%E5%8F%8A%E6%89%A9%E5%B1%95%E5%90%8D/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="上传文件信息的获取"><a href="#上传文件信息的获取" class="headerlink" title="上传文件信息的获取"></a>上传文件信息的获取</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myfile"</span> <span class="attr">id</span>=<span class="string">"myfile"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"mybtn"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript">  </span></div><div class="line">  <span class="comment">//获取一个上传文件的扩展名  </span></div><div class="line">  <span class="keyword">var</span> myfile = <span class="built_in">document</span>.getElementById(<span class="string">'myfile'</span>);  </div><div class="line">  <span class="built_in">console</span>.log(myfile.files);   <span class="comment">// 打印可以看到需要的值</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="类型的限定"><a href="#类型的限定" class="headerlink" title="类型的限定"></a>类型的限定</h3><p>accept<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"fileId1"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/png,image/gif"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>multiple<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input id=&quot;fileId2&quot; type=&quot;file&quot; multiple=&quot;multiple&quot; name=&quot;file&quot; /&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 文件传输 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[load与DOMContentLoaded]]></title>
      <url>http://emloxe.github.io/2017/12/15/load%E4%B8%8EDOMContentLoaded/</url>
      <content type="html"><![CDATA[<p>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完成加载。<br>另一个不同的事件 load 应该仅用于检测一个完全加载的页面。 在使用 DOMContentLoaded 更加合适的情况下使用 load 是一个令人难以置信的流行的错误，所以要谨慎。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"0"</span>);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		  <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">		      <span class="built_in">console</span>.log(<span class="string">"1"</span>);</div><div class="line">		  &#125;);</div><div class="line"></div><div class="line">		  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">1</span>; i++)&#123;</div><div class="line">		      <span class="comment">// 这个同步脚本将延迟DOM的解析。</span></div><div class="line">		      <span class="comment">// 所以DOMContentLoaded事件稍后将启动。</span></div><div class="line">		      <span class="built_in">console</span>.log(<span class="string">"2"</span>);</div><div class="line">		  &#125; </div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"3"</span>);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在以上示例中 输出顺序为 02314</p>
<p><em>参考</em><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded</a></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> load </tag>
            
            <tag> DOMContentLoaded </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js判断浏览器是否为手机端]]></title>
      <url>http://emloxe.github.io/2017/11/30/js%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%90%A6%E4%B8%BA%E6%89%8B%E6%9C%BA%E7%AB%AF/</url>
      <content type="html"><![CDATA[<p>js判断浏览器是否为手机端</p>
<h2 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) &#123;</div><div class="line">    window.location = &quot;//m.emloxe.com/&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[meta-dns-prefetch]]></title>
      <url>http://emloxe.github.io/2017/11/27/meta-dns-prefetch/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>DNS Prefetch，即DNS预获取，是前端优化的一部分。一般来说，在前端优化中与 DNS 有关的有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预获取 。</p>
<p>DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS Prefetching 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。</p>
<p>默认情况下浏览器会对页面中和当前域名（正在浏览网页的域名）不在同一个域的域名进行预获取，并且缓存结果，这就是隐式的 DNS Prefetch。如果想对页面中没有出现的域进行预获取，那么就要使用显示的 DNS Prefetch 了。</p>
<p>目前大多数浏览器已经支持此属性。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"on"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//cdn.emloxe.com"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//img.emloxe.com"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果需要禁止隐式的 DNS Prefetch，可以使用以下的标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;off&quot;&gt;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>高性能网站建设指南</p>
]]></content>
      
        <categories>
            
            <category> 网站优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网站优化 </tag>
            
            <tag> meta </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网站建设]]></title>
      <url>http://emloxe.github.io/2017/11/25/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h2><h3 id="docsearch-文档搜索"><a href="#docsearch-文档搜索" class="headerlink" title="docsearch 文档搜索"></a>docsearch 文档搜索</h3><p><a href="https://community.algolia.com/docsearch/" target="_blank" rel="external">https://community.algolia.com/docsearch/</a></p>
<h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="腾讯分析"><a href="#腾讯分析" class="headerlink" title="腾讯分析"></a>腾讯分析</h3><p><a href="http://v2.ta.qq.com/summary/index" target="_blank" rel="external">http://v2.ta.qq.com/summary/index</a></p>
<h3 id="百度分析"><a href="#百度分析" class="headerlink" title="百度分析"></a>百度分析</h3><p><a href="http://ziyuan.baidu.com/dashboard/index" target="_blank" rel="external">http://ziyuan.baidu.com/dashboard/index</a></p>
<h2 id="网站搜录"><a href="#网站搜录" class="headerlink" title="网站搜录"></a>网站搜录</h2><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><p><a href="http://ziyuan.baidu.com/site/index" target="_blank" rel="external">http://ziyuan.baidu.com/site/index</a></p>
<h3 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h3><p> <a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">https://www.google.com/webmasters/tools/home?hl=zh-CN</a></p>
<h2 id="阅读统计"><a href="#阅读统计" class="headerlink" title="阅读统计"></a>阅读统计</h2><p><a href="https://leancloud.cn/" target="_blank" rel="external">https://leancloud.cn/</a></p>
]]></content>
      
        <categories>
            
            <category> 网站建设 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网站建设 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js插件兼容ie6-ie8]]></title>
      <url>http://emloxe.github.io/2017/11/24/js%E6%8F%92%E4%BB%B6%E5%85%BC%E5%AE%B9ie6-ie8/</url>
      <content type="html"><![CDATA[<p>整理兼容ie的插件 respond.js<br><a id="more"></a></p>
<h2 id="respond-js"><a href="#respond-js" class="headerlink" title="respond.js"></a>respond.js</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>用于最小/最大宽度的快速和轻量级的polyfill CSS3媒体查询（适用于IE 6-8以及更多）<br>这个脚本的目标是提供一个快速和轻量级的（3kb缩小/ 1kb压缩）脚本，以在不支持<em>CSS3媒体查询</em>的浏览器中实现响应式网页设计 - 特别是Internet Explorer 8及以下版本。它的编写方式可能会补充对其他不支持的浏览器的支持（稍后还会提供更多的信息）。<br><a href="https://github.com/scottjehl/Respond" target="_blank" rel="external">https://github.com/scottjehl/Respond</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在所有的CSS之后引用respond.min.js脚本（1kb min / gzipped）（它运行的越早，IE用户看不到非媒体内容的闪光的机会越大）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lt IE 9]&gt;</div><div class="line">&lt;script src = &quot;http://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 兼容 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 兼容 </tag>
            
            <tag> ie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js小技巧整理]]></title>
      <url>http://emloxe.github.io/2017/11/23/js%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="防劫持"><a href="#防劫持" class="headerlink" title="防劫持"></a>防劫持</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (top.location != self.location) &#123;</div><div class="line">    top.location.href = self.location.href;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网站性能优化]]></title>
      <url>http://emloxe.github.io/2017/11/14/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><h3 id="添加expires头部"><a href="#添加expires头部" class="headerlink" title="添加expires头部"></a>添加expires头部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Expires: Mon, 15 Apr 2014 20:00:00 GMT    // 过期时间</div><div class="line"></div><div class="line"></div><div class="line">Cache-Control: max-age=315360000    // 过期具体时长</div></pre></td></tr></table></figure>
<h3 id="压缩组件"><a href="#压缩组件" class="headerlink" title="压缩组件"></a>压缩组件</h3><p>Web客户端   请求头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Accept-Encoding: gzip, deflate;</div></pre></td></tr></table></figure></p>
<p>Web服务器 响应头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Encoding: gzip;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>高性能网站建设指南</p>
]]></content>
      
        <categories>
            
            <category> 网站优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网站优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react学习]]></title>
      <url>http://emloxe.github.io/2017/11/10/react%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="脚手架搭建"><a href="#脚手架搭建" class="headerlink" title="脚手架搭建"></a>脚手架搭建</h3><h3 id="Webpack-dev-sever-搭建开发环境"><a href="#Webpack-dev-sever-搭建开发环境" class="headerlink" title="Webpack dev sever 搭建开发环境"></a>Webpack dev sever 搭建开发环境</h3><p>webpack-dev-sever是一个小型的Node Express服务器，它为通过webpack打包生成的资源文件提供Web服务。</p>
<ul>
<li>搭建本地服务器</li>
<li>自动刷新</li>
</ul>
<p>配置webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var path = require(&apos;path&apos;);</div><div class="line">var webpack = require(&apos;webpack&apos;);   // webpack全局安装就不需要写这个</div><div class="line">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    devtool: &apos;eval-source-map&apos;,</div><div class="line">    entry: [</div><div class="line">        &apos;webpack-dev-server/client?http://localhost:3000&apos;,</div><div class="line">        &apos;webpack/hot/only-dev-server&apos;,</div><div class="line">        &apos;react-hot-loader/patch&apos;,     // 热更新</div><div class="line">        path.join(__dirname, &apos;app/final/index.js&apos;)</div><div class="line">    ],</div><div class="line">    output: &#123;</div><div class="line">        path: path.join(__dirname, &apos;/dist/&apos;),</div><div class="line">        filename: &apos;[name].js&apos;,</div><div class="line">        publicPath: &apos;/&apos;</div><div class="line">    &#125;,</div><div class="line">    plugins: [</div><div class="line">        new HtmlWebpackPlugin(&#123;</div><div class="line">          template: &apos;./app/index.tpl.html&apos;,</div><div class="line">          inject: &apos;body&apos;,</div><div class="line">          filename: &apos;./index.html&apos;</div><div class="line">        &#125;),</div><div class="line">        new webpack.optimize.OccurenceOrderPlugin(),</div><div class="line">        new webpack.HotModuleReplacementPlugin(),</div><div class="line">        new webpack.NoErrorsPlugin(),</div><div class="line">        new webpack.DefinePlugin(&#123;</div><div class="line">          &apos;process.env.NODE_ENV&apos;: JSON.stringify(&apos;development&apos;)</div><div class="line">        &#125;)</div><div class="line">    ],</div><div class="line">    module: &#123;</div><div class="line">        resolve:&#123;</div><div class="line">            extensions:[&apos;&apos;,&apos;.js&apos;,&apos;.json&apos;]</div><div class="line">        &#125;,        </div><div class="line">        loaders: [</div><div class="line">            &#123;</div><div class="line">              test: /\.js$/,</div><div class="line">              exclude: /node_modules/,</div><div class="line">              loader: &quot;babel-loader&quot;,</div><div class="line">              query:</div><div class="line">                &#123;</div><div class="line">                  presets:[&apos;react&apos;,&apos;es2015&apos;]</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: /\.json?$/,</div><div class="line">                loader: &apos;json&apos;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: /\.css$/,</div><div class="line">                loader: &quot;style!css&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: /\.less/,</div><div class="line">                loader: &apos;style-loader!css-loader!less-loader&apos;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>配置sever.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&apos;webpack&apos;);</div><div class="line">var WebpackDevServer = require(&apos;webpack-dev-server&apos;);</div><div class="line">var config = require(&apos;./webpack.config&apos;);</div><div class="line"></div><div class="line">new WebpackDevServer(webpack(config), &#123;</div><div class="line">    publicPath: config.output.publicPath,</div><div class="line">    hot: true,</div><div class="line">    historyApiFallback: true,</div><div class="line">    // It suppress error shown in console, so it has to be set to false.</div><div class="line">    quiet: false,</div><div class="line">    // It suppress everything except error, so it has to be set to false as well</div><div class="line">    // to see success build.</div><div class="line">    noInfo: false,</div><div class="line">    stats: &#123;</div><div class="line">      // Config for minimal console.log mess.</div><div class="line">      assets: false,</div><div class="line">      colors: true,</div><div class="line">      version: false,</div><div class="line">      hash: false,</div><div class="line">      timings: false,</div><div class="line">      chunks: false,</div><div class="line">      chunkModules: false</div><div class="line">    &#125;</div><div class="line">&#125;).listen(3000, &apos;localhost&apos;, function (err) &#123;</div><div class="line">    if (err) &#123;</div><div class="line">        console.log(err);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  console.log(&apos;Listening at localhost:3000&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="js编写"><a href="#js编写" class="headerlink" title="js编写"></a>js编写</h2><p>组件header<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;</div><div class="line">import &apos;./header.less&apos;</div><div class="line"></div><div class="line">let Header = React.creatClass(&#123;</div><div class="line">  render()&#123;</div><div class="line">    return(</div><div class="line">      &lt;div className=&quot;m-header&quot;&gt;&lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">export default Header;</div></pre></td></tr></table></figure></p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>组件的生命周期可分成三个状态：<br>Mounting：已插入真实 DOM<br>Updating：正在被重新渲染<br>Unmounting：已移出真实 DOM</p>
<ul>
<li><p>constructor(props, context)<br>构造函数，在创建组件的时候调用一次。</p>
</li>
<li><p>void componentWillMount()<br>在组件挂载之前调用一次。如果在这个函数里面调用setState，本次的render函数可以看到更新后的state，并且只渲染一次。</p>
</li>
<li><p>void componentDidMount()<br>在组件挂载之后调用一次。这个时候，子组件也都挂载好了，可以在这里使用refs。</p>
</li>
<li><p>void componentWillReceiveProps(nextProps)<br>props是父组件传递给子组件的。父组件发生render的时候子组件就会调用componentWillReceiveProps（不管props有没有更新，也不管父子组件之间有没有数据交换）。</p>
</li>
<li><p>bool shouldComponentUpdate(nextProps, nextState)<br>组件挂载之后，每次调用setState后都会调用shouldComponentUpdate判断是否需要重新渲染组件。默认返回true，需要重新render。在比较复杂的应用里，有一些数据的改变并不影响界面展示，可以在这里做判断，优化渲染效率。</p>
</li>
<li><p>void componentWillUpdate(nextProps, nextState)<br>shouldComponentUpdate返回true或者调用forceUpdate之后，componentWillUpdate会被调用。</p>
</li>
<li><p>void componentDidUpdate()<br>除了首次render之后调用componentDidMount，其它render结束之后都是调用componentDidUpdate。</p>
</li>
<li><p>componentWillMount、componentDidMount和componentWillUpdate、componentDidUpdate可以对应起来。区别在于，前者只有在挂载的时候会被调用；而后者在以后的每次更新渲染之后都会被调用。</p>
</li>
<li><p>ReactElement render()<br>render是一个React组件所必不可少的核心函数（上面的其它函数都不是必须的）。记住，不要在render里面修改state。</p>
</li>
<li><p>void componentWillUnmount()<br>组件被卸载的时候调用。一般在componentDidMount里面注册的事件需要在这里删除。</p>
</li>
</ul>
<p>生命周期部分内容 摘自<br> 作者：linjinhe 來源：<a href="http://www.jianshu.com/p/4784216b8194" target="_blank" rel="external">简书</a></p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cmd命令提示符]]></title>
      <url>http://emloxe.github.io/2017/10/23/cmd%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="快速打开"><a href="#快速打开" class="headerlink" title="快速打开"></a>快速打开</h2><ol>
<li><p>win+r 打开运行窗口<br>输入cmd<br><img src="/images/2017102301.png" alt="images"></p>
</li>
<li><p>在当前目录下快速打开<br>在文件夹下，按住Shift键右击鼠标打开命令行窗口<br><img src="/images/2017102302.png" alt="images"><br><img src="/images/2017102303.png" alt="images"></p>
</li>
</ol>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>进入文件</p>
<blockquote>
<blockquote>
<p>cd [文件名]</p>
</blockquote>
</blockquote>
<p>返回上一级</p>
<blockquote>
<blockquote>
<p>../</p>
</blockquote>
</blockquote>
<p>清屏</p>
<blockquote>
<blockquote>
<p>cls</p>
</blockquote>
</blockquote>
<h3 id="查看本地IP"><a href="#查看本地IP" class="headerlink" title="查看本地IP"></a>查看本地IP</h3><blockquote>
<p>ipconfig</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 计算机基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[node]]></title>
      <url>http://emloxe.github.io/2017/10/19/node/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="搭建一个简单的服务器"><a href="#搭建一个简单的服务器" class="headerlink" title="搭建一个简单的服务器"></a>搭建一个简单的服务器</h2><p>采用http模块搭建<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">  res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;).listen(<span class="number">8124</span>, <span class="string">"127.0.0.1"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8124/'</span>);</div></pre></td></tr></table></figure></p>
<p>使用Express<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Hello World!'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening at http://%s:%s'</span>, host, port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们引入了 express 模块而不是 http 模块。在后台,Express 会调用 http 模块。</p>
<h2 id="框架-express"><a href="#框架-express" class="headerlink" title="框架 express"></a>框架 express</h2><p>内容取自express中文文档</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">手动创建</div><div class="line">$ mkdir myapp  <span class="comment">// 创建文件夹</span></div><div class="line">$ cd myapp  <span class="comment">// 进入目录</span></div><div class="line">$ npm init  <span class="comment">// 通过 npm init 命令为你的应用创建一个 package.json 文件。</span></div><div class="line"></div><div class="line">$ npm install express --save</div></pre></td></tr></table></figure>
<p>通过应用生成器工具 express 可以快速创建一个应用的骨架。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm install express-generator -g</div><div class="line"></div><div class="line">$ cd myapp </div><div class="line">$ npm install  // 然后安装</div></pre></td></tr></table></figure></p>
<p><img src="/images/2017101901.png" alt="images"></p>
<h3 id="hellow-word"><a href="#hellow-word" class="headerlink" title="hellow word"></a>hellow word</h3><p>进入 myapp 目录，创建一个名为 app.js 的文件，然后将下列代码复制进去：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Hello World!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> host = server.address().address;</div><div class="line">  <span class="keyword">var</span> port = server.address().port;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening at http://%s:%s'</span>, host, port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node app.js</div></pre></td></tr></table></figure></p>
<p>然后在浏览器中打开 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a> 并查看输出结果。</p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>路由的定义由如下结构组成：app.METHOD(PATH, HANDLER)。其中，app 是一个 express 实例；METHOD 是某个 HTTP 请求方式中的一个；PATH 是服务器端的路径；HANDLER 是当路由匹配到时需要执行的函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对网站首页的访问返回 "Hello World!" 字样</span></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Hello World!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 网站首页接受 POST 请求</span></div><div class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Got a POST request'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// /user 节点接受 PUT 请求</span></div><div class="line">app.put(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Got a PUT request at /user'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// /user 节点接受 DELETE 请求</span></div><div class="line">app.delete(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Got a DELETE request at /user'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="路由的正则匹配"><a href="#路由的正则匹配" class="headerlink" title="路由的正则匹配"></a>路由的正则匹配</h4><p>使用字符串模式的路由路径示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匹配 acd 和 abcd</span></div><div class="line">app.get(<span class="string">'/ab?cd'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'ab?cd'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 匹配 abcd、abbcd、abbbcd等</span></div><div class="line">app.get(<span class="string">'/ab+cd'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'ab+cd'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></div><div class="line">app.get(<span class="string">'/ab*cd'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'ab*cd'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 匹配 /abe 和 /abcde</span></div><div class="line">app.get(<span class="string">'/ab(cd)?e'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line"> res.send(<span class="string">'ab(cd)?e'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>使用正则表达式的路由路径示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匹配任何路径中含有 a 的路径：</span></div><div class="line">app.get(<span class="regexp">/a/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'/a/'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span></div><div class="line">app.get(<span class="regexp">/.*fly$/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'/.*fly$/'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="app-route-链式路由句柄"><a href="#app-route-链式路由句柄" class="headerlink" title="app.route()链式路由句柄"></a>app.route()链式路由句柄</h4><p>可使用 app.route() 创建路由路径的链式路由句柄。由于路径在一个地方指定，这样做有助于创建模块化的路由，而且减少了代码冗余和拼写错误。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">app.route(<span class="string">'/book'</span>)</div><div class="line">  .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'Get a random book'</span>);</div><div class="line">  &#125;)</div><div class="line">  .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'Add a book'</span>);</div><div class="line">  &#125;)</div><div class="line">  .put(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'Update the book'</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h4 id="express-Router-模块化、可挂载的路由句柄"><a href="#express-Router-模块化、可挂载的路由句柄" class="headerlink" title="express.Router 模块化、可挂载的路由句柄"></a>express.Router 模块化、可挂载的路由句柄</h4><p>可使用 express.Router 类创建模块化、可挂载的路由句柄。Router 实例是一个完整的中间件和路由系统，因此常称其为一个 “mini-app”。</p>
<p>下面的实例程序创建了一个路由模块，并加载了一个中间件，定义了一些路由，并且将它们挂载至应用的路径上。</p>
<p>在 app 目录下创建名为 birds.js 的文件，内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"></div><div class="line"><span class="comment">// 该路由使用的中间件</span></div><div class="line">router.use(<span class="function"><span class="keyword">function</span> <span class="title">timeLog</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Time: '</span>, <span class="built_in">Date</span>.now());</div><div class="line">  next();</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 定义网站主页的路由</span></div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Birds home page'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 定义 about 页面的路由</span></div><div class="line">router.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'About birds'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure></p>
<p>然后在应用中加载路由模块：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> birds = <span class="built_in">require</span>(<span class="string">'./birds'</span>);</div><div class="line">...</div><div class="line">app.use(<span class="string">'/birds'</span>, birds);</div></pre></td></tr></table></figure></p>
<p>应用即可处理发自 /birds 和 /birds/about 的请求，并且调用为该路由指定的 timeLog 中间件。</p>
<h3 id="利用-Express-托管静态文件"><a href="#利用-Express-托管静态文件" class="headerlink" title="利用 Express 托管静态文件"></a>利用 Express 托管静态文件</h3><p>通过 Express 内置的 express.static 可以方便地托管静态文件，例如图片、CSS、JavaScript 文件等。<br>将静态资源文件所在的目录作为参数传递给 express.static 中间件就可以提供静态资源文件的访问了。例如，假设在 public 目录放置了图片、CSS 和 JavaScript 文件，你就可以：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(<span class="string">'public'</span>));</div></pre></td></tr></table></figure></p>
<p>现在，public 目录下面的文件就可以访问了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://localhost:3000/images/kitten.jpg</div><div class="line">http://localhost:3000/css/style.css</div><div class="line">http://localhost:3000/js/app.js</div><div class="line">http://localhost:3000/images/bg.png</div><div class="line">http://localhost:3000/hello.html</div></pre></td></tr></table></figure></p>
<p>如果你的静态资源存放在多个目录下面，你可以多次调用 express.static 中间件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line">app.use(express.static(<span class="string">'files'</span>));</div></pre></td></tr></table></figure></p>
<p>访问静态资源文件时，express.static 中间件会根据目录添加的顺序查找所需的文件。<br>如果你希望所有通过 express.static 访问的文件都存放在一个“虚拟（virtual）”目录（即目录根本不存在）下面，可以通过为静态资源目录指定一个挂载路径的方式来实现，如下所示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'public'</span>));</div></pre></td></tr></table></figure></p>
<p>现在，你就爱可以通过带有 “/static” 前缀的地址来访问 public 目录下面的文件了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://localhost:3000/static/images/kitten.jpg</div><div class="line">http://localhost:3000/static/css/style.css</div><div class="line">http://localhost:3000/static/js/app.js</div><div class="line">http://localhost:3000/static/images/bg.png</div><div class="line">http://localhost:3000/static/hello.html</div></pre></td></tr></table></figure></p>
<p>如果将当前目录都当做静态资源来进行访问可以用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(__dirname));</div></pre></td></tr></table></figure></p>
<h3 id="app-mountpath-子应用程序的路径模式"><a href="#app-mountpath-子应用程序的路径模式" class="headerlink" title="app.mountpath 子应用程序的路径模式"></a>app.mountpath 子应用程序的路径模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express(); <span class="comment">// the main app</span></div><div class="line"><span class="keyword">var</span> admin = express(); <span class="comment">// the sub app</span></div><div class="line"></div><div class="line">admin.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(admin.mountpath); <span class="comment">// /admin</span></div><div class="line">  res.send(<span class="string">'Admin Homepage'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use(<span class="string">'/admin'</span>, admin); <span class="comment">// mount the sub app</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> admin = express();</div><div class="line"></div><div class="line">admin.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(admin.mountpath); <span class="comment">// [ '/admin', '/manager' ]</span></div><div class="line">  res.send(<span class="string">'Admin Homepage'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> secret = express();</div><div class="line">secret.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(secret.mountpath); <span class="comment">// /secret</span></div><div class="line">  res.send(<span class="string">'Admin Secret'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">admin.use(<span class="string">'/secret'</span>, secret); <span class="comment">// load the 'secret' router on '/secr*t', on the 'admin' sub app</span></div><div class="line">app.use([<span class="string">'/admin'</span>, <span class="string">'/manager'</span>], admin); <span class="comment">// load the 'admin' router on '/adm*n' and '/manager', on the parent app</span></div></pre></td></tr></table></figure>
<h3 id="开启压缩"><a href="#开启压缩" class="headerlink" title="开启压缩"></a>开启压缩</h3><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i compression --save</div></pre></td></tr></table></figure></p>
<p>使用如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var compression = require(&apos;compression&apos;);</div><div class="line"></div><div class="line">app.use(compression());</div></pre></td></tr></table></figure></p>
<h3 id="开启跨域允许访问"><a href="#开启跨域允许访问" class="headerlink" title="开启跨域允许访问"></a>开启跨域允许访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.use(function(req, res, next) &#123;</div><div class="line">    res.header(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;);</div><div class="line">    res.header(&apos;Access-Control-Allow-Headers&apos;, &apos;Origin, X-Requested-With, Content-Type, Accept&apos;);</div><div class="line">    next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="图书"><a href="#图书" class="headerlink" title="图书"></a>图书</h3><p>Node即学即用</p>
<h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><p><a href="http://www.expressjs.com.cn" target="_blank" rel="external">Express - 基于 Node.js 平台的 web 应用开发框架</a></p>
]]></content>
      
        <categories>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[form表单提交与ajax提交对比]]></title>
      <url>http://emloxe.github.io/2017/10/18/form%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E4%B8%8Eajax%E6%8F%90%E4%BA%A4%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="form表单提交"><a href="#form表单提交" class="headerlink" title="form表单提交"></a>form表单提交</h2><p>action填写请求, method填写请求方式。点击回车可以直接触发提交<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"id_form"</span> <span class="attr">name</span>=<span class="string">"form"</span> <span class="attr">action</span>=<span class="string">"/login.do"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></div><div class="line">用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userame"</span>&gt;</span></div><div class="line">密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"psd"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="提交前的操作验证"><a href="#提交前的操作验证" class="headerlink" title="提交前的操作验证"></a>提交前的操作验证</h3><p>当页面中有以下三种按钮时，就可以会自动触发自动提交，当 <code>return false;</code>表单提交会中止<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li><p>onsubmit 方法</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">id</span>=<span class="string">"id_form"</span> <span class="attr">name</span>=<span class="string">"form"</span> <span class="attr">action</span>=<span class="string">"/login.do"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">onsubmit</span>=<span class="string">"return check()"</span> &gt;</span></div><div class="line">用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"psd"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> idForm = <span class="built_in">document</span>.getElementById(<span class="string">'id_form'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 表单验证，return true时提交表单</span></div><div class="line">  <span class="keyword">if</span>(idForm.elements[<span class="string">'username'</span>].value === <span class="string">''</span> || idForm.elements[<span class="string">'psd'</span>].value === <span class="string">''</span>)&#123;</div><div class="line">    alert(<span class="string">'不能为空'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    alert(<span class="string">'不能为空2'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用按钮事件绑定</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">id</span>=<span class="string">"id_form"</span> <span class="attr">name</span>=<span class="string">"form"</span> <span class="attr">action</span>=<span class="string">"/login.do"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></div><div class="line">用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"psd"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"id_btn"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> idForm = <span class="built_in">document</span>.getElementById(<span class="string">'id_form'</span>);</div><div class="line"><span class="keyword">var</span> idBtn = <span class="built_in">document</span>.getElementById(<span class="string">'id_btn'</span>);</div><div class="line">idBtn.onclick = <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 表单验证，return true时提交表单</span></div><div class="line">  <span class="keyword">if</span>(idForm.elements[<span class="string">'username'</span>].value === <span class="string">''</span> || idForm.elements[<span class="string">'psd'</span>].value === <span class="string">''</span>)&#123;</div><div class="line">    alert(<span class="string">'不能为空'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    alert(<span class="string">'不能为空2'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>idForm.submit()<br>以上两种形式，都可以按回车触发提交。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;form  id="id_form" name="form" action="/login.do" method="post"  &gt;</div><div class="line">用户名： &lt;input type="text" name="username"&gt;</div><div class="line">密码： &lt;input type="password" name="psd"&gt;</div><div class="line">&lt;button id="id_btn" name="button" type="button"&gt;登录&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var idForm = document.getElementById('id_form');</div><div class="line">var idBtn = document.getElementById('id_btn');</div><div class="line">idBtn.onclick = function check()&#123;  // 表单验证，return true时提交表单</div><div class="line">  if(idForm.elements['username'].value === '' || idForm.elements['psd'].value === '')&#123;</div><div class="line">    alert('不能为空');</div><div class="line">  &#125;else&#123;</div><div class="line">    idForm.submit();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以这种形式提交，也是提交的form表单。由于button <code>type=&quot;button&quot;</code>，回车键就没有提交的效果了。</p>
<h2 id="ajax提交"><a href="#ajax提交" class="headerlink" title="ajax提交"></a>ajax提交</h2><p>ajax提交和form表单提交的第3种，形式相仿。不同的是，ajax提交需要自行将form表单中的数据提取出来，写在data中，<code>&lt;form&gt;</code>标签不再需要<code>action</code>和<code>method</code>等属性。</p>
<h2 id="两者比较"><a href="#两者比较" class="headerlink" title="两者比较"></a>两者比较</h2><p>表单直接用form提交相对来说会比较快捷。</p>
<p>异步提交的优点会更多一点。<br>当用户密码输错时，form提交返回原页面时，页面会丢失原数据。现在比较好的形式是后端将原数据渲染到原页面再返回页面，而不是返回初始页面，让用户在重新填写一遍。<br>异步就比较方便了，可以通过返回码来直接判断，是否验证通过，再执行下一步操作。</p>
<p>在用户体验上，可以在<code>&lt;form&gt;</code>表单上绑定 回车事件，这样用户体验就会更好。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>提交表单最可能出现的问题就是重复提交，可以在第一次点击后就进行禁用，设置<code>disabled: disabled</code>,或者设置变量来判断状态，取消后续操作</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/kingson_wu/article/details/38928827" target="_blank" rel="external">form表单提交之前判断</a></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jsp模板运用]]></title>
      <url>http://emloxe.github.io/2017/10/11/jsp%E6%A8%A1%E6%9D%BF%E8%BF%90%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="标准标签"><a href="#标准标签" class="headerlink" title="标准标签"></a>标准标签</h2><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;condition.payType == '1'&#125;"</span>&gt;</span>成立时显示<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;c:if&gt;没有&lt;c:else&gt;    可以用&lt;c:choose&gt;来取代结构：</div><div class="line">--&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;condition1&#125;"</span>&gt;</span>  </div><div class="line">    condition1为true  </div><div class="line">  <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123; condition2&#125;"</span>&gt;</span>  </div><div class="line">    condition2为true  </div><div class="line">  <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span>  </div><div class="line">    condition1和condition2都为false  </div><div class="line">  <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></div></pre></td></tr></table></figure>
<p>　范例说明：当condition1为true时，会显示“condition1为true”；当condition1为false且condition2为true时，会显示“condition2为true”，如果两者都为false，则会显示“condition1和condition2都为false”。  </p>
]]></content>
      
        <categories>
            
            <category> jsp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jsp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webstorm使用]]></title>
      <url>http://emloxe.github.io/2017/10/10/webstorm%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul>
<li><p>alt 多行游标</p>
</li>
<li><p>Ctrl+f  查找</p>
</li>
<li><p>Ctrl+r  替换</p>
</li>
<li><p>Ctrl+z  倒退</p>
</li>
<li><p>Ctrl+y  向前</p>
</li>
<li><p>Ctrl+Shift+/  注释代码</p>
</li>
</ul>
<a id="more"></a>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="识别jsp"><a href="#识别jsp" class="headerlink" title="识别jsp"></a>识别jsp</h3><p>setting -&gt; File Type - html 里面增加 <code>*.jsp</code></p>
<p><img src="/images/2017101001.png" alt="images"></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm常用的快捷方式]]></title>
      <url>http://emloxe.github.io/2017/09/20/npm%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="具体的一些常用命令"><a href="#具体的一些常用命令" class="headerlink" title="具体的一些常用命令"></a>具体的一些常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">npm -v  查看当前NPM的版本（可以用来查看是否安装成功！）</div><div class="line">npm install &lt;name&gt; 安装nodejs的依赖包</div><div class="line">　　安装依赖包是NPM最常见的用法，例如安装node的框架express，它的执行语句是npm install express。执行该命令后，NPM会在当前目录下创建node_modules目录，然后在node_modules目录下创建express目录，接着将包解压到这个目录下。</div><div class="line"></div><div class="line">npm install &lt;name&gt; -g  将包安装到全局环境中</div><div class="line">　　如果包中含有命令行工具，那么需要执行npm install express -g命令进行全局模式安装。需要注意的是全局模式并不是将一个模块包安装为一个全局包的意思，它并不意味着可以从任何地方通过require来引用它。全局模式这个称谓并不精确，存在诸多误导。实际上，-g是将一个包安装为全局可用的可执行命令。因此全局的安装是供命令行使用的，就好像全局安装了vmarket后，就可以在命令行中直接运行vm命令</div><div class="line"></div><div class="line">npm install &lt;name&gt; --save-dev  安装的同时，将信息写入package.json中</div><div class="line">　　--save   自动把模块和版本号添加到dependencies部分，开发依赖模块</div><div class="line">　　--save--dev    自动把模块和版本号添加到devdependencies部分，产品依赖模块</div><div class="line"></div><div class="line">npm init  会引导你创建一个package.json文件，包括名称、版本、作者这些信息等，package.json包描述文件，创建包必不可少的文件。</div><div class="line"></div><div class="line"></div><div class="line">npm uninstall &lt;name&gt; 删除包</div><div class="line"></div><div class="line">npm update &lt;name&gt; 更新包</div><div class="line"></div><div class="line">npm ls 列出当前安装的了所有包</div><div class="line"></div><div class="line">npm root 查看当前包的安装路径</div><div class="line"></div><div class="line">npm root -g  查看全局的包的安装路径</div><div class="line"></div><div class="line">npm help  帮助，如果要单独查看install命令的帮助，可以使用的npm help install</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="external">NPM 使用介绍 | 菜鸟教程</a></p>
]]></content>
      
        <categories>
            
            <category> npm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html处理兼容样式]]></title>
      <url>http://emloxe.github.io/2017/09/14/html%E5%A4%84%E7%90%86%E5%85%BC%E5%AE%B9%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>在查看网页的时候发现了一个非常好处理兼容样式的例子<br>网站采用（此图为谷歌下查看的结果）<br><img src="/images/2017091401.png" alt="images"></p>
<p>在IE8下查看，html的class名称为<br><img src="/images/2017091402.png" alt="images"><br>可以通过这种形式来给兼容的样式做特殊处理</p>
]]></content>
      
        <categories>
            
            <category> 兼容 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 兼容 </tag>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML 5 Web 存储]]></title>
      <url>http://emloxe.github.io/2017/09/14/HTML%205%20Web%20%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>在客户端存储数据<br>HTML5 提供了两种在客户端存储数据的新方法：</p>
<ul>
<li>localStorage - 没有时间限制的数据存储</li>
<li>sessionStorage - 针对一个 session 的数据存储</li>
</ul>
<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>遵循同源策略的,作用范围在该域名下<br>采用键值对存储，值只能是字符串</p>
<h3 id="浏览器支持性判断"><a href="#浏览器支持性判断" class="headerlink" title="浏览器支持性判断"></a>浏览器支持性判断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if(！window.localStorage)&#123;</div><div class="line">  alert(&quot;浏览器支持localstorage&quot;);</div><div class="line">  return false;</div><div class="line">&#125;else&#123;</div><div class="line">  //主逻辑业务</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var storage=window.localStorage;</div><div class="line">//写入a字段</div><div class="line">storage[&quot;a&quot;]=1;</div><div class="line">//写入b字段</div><div class="line">storage.a=1;</div><div class="line">//写入c字段</div><div class="line">storage.setItem(&quot;c&quot;,3);</div><div class="line"></div><div class="line">console.log(typeof storage[&quot;a&quot;]);  // string</div><div class="line">console.log(typeof storage[&quot;b&quot;]);  // string</div><div class="line">console.log(typeof storage[&quot;c&quot;]);  // string</div></pre></td></tr></table></figure>
<p>value 只是支持字符串，存入对象可以先JSON.stringify()转换，取出来后再JSON.pase()</p>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var storage=window.localStorage;</div><div class="line"></div><div class="line">// 全部清除</div><div class="line">storage.clear();</div><div class="line"></div><div class="line">// 某个键值对删除</div><div class="line">storage.removeItem(&quot;a&quot;);</div></pre></td></tr></table></figure>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var storage=window.localStorage;</div><div class="line">//写入a字段</div><div class="line">storage[&quot;a&quot;]=1;</div><div class="line">//写入b字段</div><div class="line">storage.a=1;</div><div class="line">//写入c字段</div><div class="line">storage.setItem(&quot;c&quot;,3);</div></pre></td></tr></table></figure>
<h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var storage=window.localStorage;</div><div class="line">storage.setItem(&quot;c&quot;,3);</div><div class="line"></div><div class="line">var key =storage.key(i);  // i为索引, 可以根据索引获取key值</div><div class="line">var value = storage.getItem(key);  // 可以根据key值获取value值</div><div class="line">storage.c;  // 直接调用也可以获取到值</div><div class="line"></div><div class="line">// 如果没有改值</div><div class="line">storage.noc;   // undefined</div><div class="line">storage.getItem(&apos;noc&apos;);  // null</div></pre></td></tr></table></figure>
<h3 id="时间限定"><a href="#时间限定" class="headerlink" title="时间限定"></a>时间限定</h3><p>localStorage 方法存储的数据没有时间限制。<br>想要清除存在该域名的数据，需要手动清除。</p>
<p>可以在第一次存储数据的时候，存储数据的创建时间，判断时间是否超过，进行移除操作</p>
<h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p>调用形式与localstorage相同，但关闭浏览器后，数据自动清空</p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="创建和存储-cookie"><a href="#创建和存储-cookie" class="headerlink" title="创建和存储 cookie"></a>创建和存储 cookie</h3><p>在这个例子中我们要创建一个存储访问者名字的 cookie。当访问者首次访问网站时，他们会被要求填写姓名。名字会存储于 cookie 中。当访问者再次访问网站时，他们就会收到欢迎词。<br>首先，我们会创建一个可在 cookie 变量中存储访问者姓名的函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">c_name,value,expiredays</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> exdate=<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">  exdate.setDate(exdate.getDate()+expiredays);</div><div class="line">  <span class="built_in">document</span>.cookie=c_name + <span class="string">"="</span> +<span class="built_in">escape</span>(value) + ((expiredays==<span class="literal">null</span>) ? <span class="string">""</span> : <span class="string">";expires="</span>+exdate.toGMTString())+<span class="string">";path=/"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个函数中的参数存有 cookie 的名称、值以及过期天数。在上面这个函数中，expiredays为1，则设置过期时间为1天。<br>设置<code>;path=/</code>可以让cookie在主域内共享<br>注释：<br>toGMTString()方法可根据格林威治时间 (GMT) 把 Date 对象转换为字符串，并返回结果。<br>escape() 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。</p>
<p>在上面的函数中，我们首先将天数转换为有效的日期，然后，我们将 cookie 名称、值及其过期日期存入 document.cookie 对象。<br>之后，我们要创建另一个函数来检查是否已设置 cookie：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">c_name</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.cookie.length&gt;<span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">var</span> c_start=<span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">"="</span>)</div><div class="line">    <span class="keyword">if</span> (c_start!=<span class="number">-1</span>)&#123; </div><div class="line">      c_start=c_start + c_name.length+<span class="number">1</span> ;</div><div class="line">      <span class="keyword">var</span> c_end=<span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>,c_start);</div><div class="line">      <span class="keyword">if</span> (c_end==<span class="number">-1</span>)&#123;</div><div class="line">        c_end=<span class="built_in">document</span>.cookie.length</div><div class="line">      &#125; </div><div class="line">      <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start,c_end));</div><div class="line">    &#125; </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="清除cookie"><a href="#清除cookie" class="headerlink" title="清除cookie"></a>清除cookie</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearCookie</span>(<span class="params">name</span>) </span>&#123;  </div><div class="line">  setCookie(name, <span class="string">""</span>, <span class="number">-1</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关于禁用"><a href="#关于禁用" class="headerlink" title="关于禁用"></a>关于禁用</h2><p>cookie 用户计算机可以直接禁用cookie的写入<br>localstorage 浏览器在无痕的状态下，可以禁止setItem，但是可以读取数据 </p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.w3school.com.cn/html5/html_5_webstorage.asp" target="_blank" rel="external">W3C HTML 5 Web 存储</a><br><a href="http://www.w3school.com.cn/js/js_cookies.asp" target="_blank" rel="external">JavaScript Cookies</a><br><a href="http://www.w3school.com.cn/jsref/jsref_toGMTString.asp" target="_blank" rel="external">JavaScript toGMTString() 方法</a><br><a href="http://www.w3school.com.cn/jsref/jsref_escape.asp" target="_blank" rel="external">JavaScript escape() 函数</a></p>
<p><a href="http://www.cnblogs.com/st-leslie/p/5617130.html" target="_blank" rel="external">localStorage使用总结</a></p>
]]></content>
      
        <categories>
            
            <category> html5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html5 </tag>
            
            <tag> 存储 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js防嵌套]]></title>
      <url>http://emloxe.github.io/2017/08/23/js%E9%98%B2%E5%B5%8C%E5%A5%97/</url>
      <content type="html"><![CDATA[<p>js防止页面被其他网站iframe嵌套<br><a id="more"></a><br>代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if(top.location!=self.location)&#123;</div><div class="line">  top.location.href=self.location.href;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码可将页面重定向到被嵌套的页面</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 类型检测 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js数组对象]]></title>
      <url>http://emloxe.github.io/2017/08/01/js%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>原生js中的数组API以及相关操作<br><a id="more"></a></p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><h4 id="单个数组修改"><a href="#单个数组修改" class="headerlink" title="单个数组修改"></a>单个数组修改</h4><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">改变原数组</th>
<th style="text-align:left">返回值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">新数组的长度</td>
<td style="text-align:left">向数组的末尾添加一个或更多元素，并返回新的长度。</td>
</tr>
<tr>
<td style="text-align:center">unshift()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">新数组的长度</td>
<td style="text-align:left">向数组的开头添加一个或更多元素，并返回新的长度。</td>
</tr>
<tr>
<td style="text-align:center">splice()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">数组，由删除数据形成的数组</td>
<td style="text-align:left">从数组中添加或删除元素。</td>
</tr>
</tbody>
</table>
<p>数组头部新增数据用<code>unshift()</code>,数组尾部新增数据用<code>push()</code><br><code>unshift()</code>和<code>push()</code>可以一次新增多个数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">arr.push(<span class="number">5</span>, <span class="number">6</span>);</div><div class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [3, 4, 5, 5, 6]</span></div><div class="line"></div><div class="line">arr.unshift(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [1, 2, 3, 3, 4, 5, 5, 6]</span></div></pre></td></tr></table></figure></p>
<p><code>splice()</code>可以删除任意位置的数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">arr.splice(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// 从索引为1处删除2个数据，执行后返回[2, 3]</span></div><div class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [1, 4, 5]</span></div></pre></td></tr></table></figure></p>
<h4 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h4><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">改变原数组</th>
<th style="text-align:left">返回值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">concat()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">新数组</td>
<td style="text-align:left">连接两个或更多的数组，并返回结果。</td>
</tr>
</tbody>
</table>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">改变原数组</th>
<th style="text-align:left">返回值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">删除的元素</td>
<td style="text-align:left">删除数组的最后一个元素并返回删除的元素。</td>
</tr>
<tr>
<td style="text-align:center">shift()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">删除的元素</td>
<td style="text-align:left">删除并返回数组的第一个元素。</td>
</tr>
<tr>
<td style="text-align:center">splice()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">数组，由删除数据形成的数组</td>
<td style="text-align:left">从数组中添加或删除元素。</td>
</tr>
</tbody>
</table>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">改变原数组</th>
<th style="text-align:left">返回值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">splice()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">数组，由删除数据形成的数组</td>
<td style="text-align:left">从数组中添加或删除元素。</td>
</tr>
</tbody>
</table>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">改变原数组</th>
<th style="text-align:left">返回值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">every()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">true/false</td>
<td style="text-align:left">检测数值元素的每个元素是否都符合条件。</td>
</tr>
<tr>
<td style="text-align:center">some()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">true/false</td>
<td style="text-align:left">检测数组元素中是否有元素符合指定条件。</td>
</tr>
<tr>
<td style="text-align:center">filter()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">新数组，符合条件所有元素的数组。</td>
<td style="text-align:left">检测数值元素，并返回符合条件所有元素的数组。</td>
</tr>
</tbody>
</table>
<h3 id="相关处理"><a href="#相关处理" class="headerlink" title="相关处理"></a>相关处理</h3><p>| map()| 否 | 新数组 | 通过指定函数处理数组的每个元素，并返回处理后的数组。|</p>
<h3 id="重新排序"><a href="#重新排序" class="headerlink" title="重新排序"></a>重新排序</h3><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">改变原数组</th>
<th style="text-align:left">返回值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sort()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">新数组，不传参则从小到大排序</td>
<td style="text-align:left">对数组的元素进行排序。</td>
</tr>
<tr>
<td style="text-align:center">reverse()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">新数组</td>
<td style="text-align:left">反转数组的元素顺序。</td>
</tr>
</tbody>
</table>
<h2 id="API对象属性"><a href="#API对象属性" class="headerlink" title="API对象属性"></a>API对象属性</h2><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">改变原数组</th>
<th style="text-align:left">返回值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">新数组的长度</td>
<td style="text-align:left">向数组的末尾添加一个或更多元素，并返回新的长度。</td>
</tr>
<tr>
<td style="text-align:center">unshift()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">新数组的长度</td>
<td style="text-align:left">向数组的开头添加一个或更多元素，并返回新的长度。</td>
</tr>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">删除的元素</td>
<td style="text-align:left">删除数组的最后一个元素并返回删除的元素。</td>
</tr>
<tr>
<td style="text-align:center">shift()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">删除的元素</td>
<td style="text-align:left">删除并返回数组的第一个元素。</td>
</tr>
<tr>
<td style="text-align:center">splice()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">数组，由删除数据形成的数组</td>
<td style="text-align:left">从数组中添加或删除元素。</td>
</tr>
<tr>
<td style="text-align:center">slice()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">数组</td>
<td style="text-align:left">选取数组的的一部分，并返回选取数据组成的数组。</td>
</tr>
<tr>
<td style="text-align:center">concat()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">新数组</td>
<td style="text-align:left">连接两个或更多的数组，并返回结果。</td>
</tr>
<tr>
<td style="text-align:center">forEach()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">无</td>
<td style="text-align:left">数组每个元素都执行一次回调函数。</td>
</tr>
<tr>
<td style="text-align:center">map()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">新数组</td>
<td style="text-align:left">通过指定函数处理数组的每个元素，并返回处理后的数组。</td>
</tr>
<tr>
<td style="text-align:center">every()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">true/false</td>
<td style="text-align:left">检测数值元素的每个元素是否都符合条件。</td>
</tr>
<tr>
<td style="text-align:center">some()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">true/false</td>
<td style="text-align:left">检测数组元素中是否有元素符合指定条件。</td>
</tr>
<tr>
<td style="text-align:center">filter()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">新数组，符合条件所有元素的数组。</td>
<td style="text-align:left">检测数值元素，并返回符合条件所有元素的数组。</td>
</tr>
<tr>
<td style="text-align:center">find()</td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left">返回符合传入测试（函数）条件的数组元素。</td>
</tr>
<tr>
<td style="text-align:center">findIndex()</td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left">返回符合传入测试（函数）条件的数组元素索引。</td>
</tr>
<tr>
<td style="text-align:center">indexOf()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">返回符合条件的第一个元素的索引</td>
<td style="text-align:left">搜索数组中的元素，并返回它所在的位置。</td>
</tr>
<tr>
<td style="text-align:center">lastIndexOf()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">返回符合条件的最后元素的索引</td>
<td style="text-align:left">返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。</td>
</tr>
<tr>
<td style="text-align:center">sort()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">新数组，不传参则从小到大排序</td>
<td style="text-align:left">对数组的元素进行排序。</td>
</tr>
<tr>
<td style="text-align:center">reverse()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">新数组</td>
<td style="text-align:left">反转数组的元素顺序。</td>
</tr>
<tr>
<td style="text-align:center">fill()</td>
<td style="text-align:center">是</td>
<td style="text-align:left">新数组</td>
<td style="text-align:left">使用一个固定值来填充数组。</td>
</tr>
<tr>
<td style="text-align:center">join()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">指定格式的字符串</td>
<td style="text-align:left">把数组的所有元素放入一个字符串。</td>
</tr>
<tr>
<td style="text-align:center">toString()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">字符串， 用逗号分隔</td>
<td style="text-align:left">把数组转换为字符串，并返回结果。</td>
</tr>
<tr>
<td style="text-align:center">reduce()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">计算的值</td>
<td style="text-align:left">将数组元素计算为一个值（从左到右）。</td>
</tr>
<tr>
<td style="text-align:center">reduceRight()</td>
<td style="text-align:center">否</td>
<td style="text-align:left">计算的值</td>
<td style="text-align:left">将数组元素计算为一个值（从右到左）。</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js中==与===]]></title>
      <url>http://emloxe.github.io/2017/07/22/js%E4%B8%AD==%E4%B8%8E===/</url>
      <content type="html"><![CDATA[<p>js中的比较数据<br><a id="more"></a></p>
<h2 id="常见的比较"><a href="#常见的比较" class="headerlink" title="常见的比较"></a>常见的比较</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// ==</span></div><div class="line"></div><div class="line"><span class="number">0</span> == <span class="string">''</span>;      <span class="comment">// true</span></div><div class="line"><span class="number">0</span> == <span class="string">'0'</span>;     <span class="comment">// true</span></div><div class="line"><span class="number">0</span> == <span class="literal">false</span>;   <span class="comment">// true</span></div><div class="line"><span class="comment">// 由此可得 0 == '' == '0' == false 都是等价的，都为true</span></div><div class="line"></div><div class="line"><span class="literal">null</span> == <span class="literal">undefined</span>;    <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="literal">null</span> == <span class="number">0</span>;    <span class="comment">// false</span></div><div class="line"><span class="comment">// 由此可得 null和undefined与 0, '', '0', false在 == 都不相等</span></div><div class="line"></div><div class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>;   <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// ===</span></div><div class="line"></div><div class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>;   <span class="comment">// false</span></div><div class="line"><span class="literal">null</span> === <span class="literal">undefined</span>;    <span class="comment">//false</span></div></pre></td></tr></table></figure>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>js作为比较灵活的语言，<code>==</code>与<code>===</code>有着不同的作用。在<code>==</code>中，是判断值是否相等，即使数据类型不同，会进行一定的数据转换（下面会详细的介绍）。而<code>===</code>会第一步判断数据类型，如果是基本数据类型，基本数据类型不一致则直接为false,数据类型一致，判断值是否相等；如果是对象，判断引用的地址是否一致，如果不是引用的同一个地址，则为false。<br>注意<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="literal">null</span> == <span class="literal">undefined</span>;     <span class="comment">//true</span></div><div class="line"><span class="literal">null</span> === <span class="literal">undefined</span>;    <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<h3 id="的判断过程"><a href="#的判断过程" class="headerlink" title="== 的判断过程"></a>== 的判断过程</h3><ol>
<li>如果两个值类型相同，进行<code>===</code>比较。</li>
<li>如果两个值类型不同<br>a. null == undefined<br>b. 一个是字符串，一个是数字，把字符串转换为数字再比较<br>c. 任意一个为布尔，先将<code>true</code>转换为1，<code>false</code>转换为0<br>d. 如果一个是对象，另一个是数字或字符串，先把对象转换为基本类型的值再比较。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[表格样式css探究]]></title>
      <url>http://emloxe.github.io/2017/07/16/%E8%A1%A8%E6%A0%BC%E6%A0%B7%E5%BC%8Fcss%E6%8E%A2%E7%A9%B6/</url>
      <content type="html"><![CDATA[<p>各种表格样式的编写<br><a id="more"></a></p>
<h2 id="表格基本css属性"><a href="#表格基本css属性" class="headerlink" title="表格基本css属性"></a>表格基本css属性</h2><h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/2017071601.png" alt="images"></p>
<p>除此之外还有</p>
<table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><caption></caption></td>
<td style="text-align:left">定义表格标题</td>
</tr>
<tr>
<td style="text-align:center"><colgroup></colgroup></td>
<td style="text-align:left">定义表格列的组</td>
</tr>
<tr>
<td style="text-align:center"><col></td>
<td style="text-align:left">定义用于表格列的属性</td>
</tr>
<tr>
<td style="text-align:center"><tfoot></tfoot></td>
<td style="text-align:left">定义表格的页脚</td>
</tr>
</tbody>
</table>
<h3 id="表格样式编写"><a href="#表格样式编写" class="headerlink" title="表格样式编写"></a>表格样式编写</h3><p>表格边框<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/2017071602.png" alt="images"></p>
<p>折叠边框<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">table</div><div class="line">&#123;</div><div class="line">  border-collapse:collapse;  // 默认值为separate</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/2017071603.png" alt="images"></p>
<p>自适应宽度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span> </div><div class="line">&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="各种表格的编写"><a href="#各种表格的编写" class="headerlink" title="各种表格的编写"></a>各种表格的编写</h2>]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重写css样式]]></title>
      <url>http://emloxe.github.io/2017/07/13/%E9%87%8D%E5%86%99css%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>零碎的css相关知识<br><a id="more"></a></p>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="文本选中状态"><a href="#文本选中状态" class="headerlink" title="文本选中状态"></a>文本选中状态</h3><p>默认选择文本时为蓝底白字，可通过以下属性更改样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::-moz-selection</span>&#123;<span class="attribute">background</span>: transparent;<span class="attribute">color</span>:<span class="number">#494949</span>;&#125;</div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123;<span class="attribute">background</span>: transparent;<span class="attribute">color</span>:<span class="number">#494949</span>;&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重写css样式]]></title>
      <url>http://emloxe.github.io/2017/07/13/css%E9%87%8D%E5%86%99%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>零碎的css相关知识<br><a id="more"></a></p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="chrome字体缩放"><a href="#chrome字体缩放" class="headerlink" title="chrome字体缩放"></a>chrome字体缩放</h3><p>-webkit-text-size-adjust<br>当样式表里font-size<12px时，中文版chrome浏览器里字体显示仍为12px，这时可以用 <figure="" class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">html&#123;-webkit-text-size-adjust:none;&#125;</div></pre></td></tr></table></12px时，中文版chrome浏览器里字体显示仍为12px，这时可以用></p>
<p>-webkit-text-size-adjust放在body上会导致页面缩放失效<br>body会继承定义在html的样式<br>用-webkit-text-size-adjust不要定义成可继承的或全局的</p>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="文本选中状态"><a href="#文本选中状态" class="headerlink" title="文本选中状态"></a>文本选中状态</h3><p>默认选择文本时为蓝底白字，可通过以下属性更改样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::-moz-selection</span>&#123;<span class="attribute">background</span>: transparent;<span class="attribute">color</span>:<span class="number">#494949</span>;&#125;</div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123;<span class="attribute">background</span>: transparent;<span class="attribute">color</span>:<span class="number">#494949</span>;&#125;</div></pre></td></tr></table></figure></p>
<h2 id="a链接"><a href="#a链接" class="headerlink" title="a链接"></a>a链接</h2><h3 id="消除移动端点击高亮"><a href="#消除移动端点击高亮" class="headerlink" title="消除移动端点击高亮"></a>消除移动端点击高亮</h3><p>-webkit-tap-highlight-color<br>当你点击一个链接或者通过Javascript定义的可点击元素的时候，它就会出现一个半透明的灰色背景。要重设这个表现，你可以设置-webkit-tap-highlight-color为任何颜色。</p>
<p>示例：设置高亮色为50%透明的红色:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-tap-highlight-color</span>: <span class="selector-tag">rgba</span>(255,0,0,0);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js、jq控制form表单]]></title>
      <url>http://emloxe.github.io/2017/07/12/js%E3%80%81jq%E6%93%8D%E6%8E%A7form%E8%A1%A8%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>表单在工作中经常用到，文章将表单常用的获取值，监听改变等方式进行总结。<br><a id="more"></a></p>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="获取标签"><a href="#获取标签" class="headerlink" title="获取标签"></a>获取标签</h3><p>在html中，表单是有<form>元素来表示的，而在JavaScript中，表单对应的则是HTMLFormElement类型。<br>可以像访问页面的其他元素一样，使用原生的DOM方式访问表单。此外每个表单都有elements属性，该属性是表单中所有元素（字段）的集合。<br>常用的通过id、class获取<br>还可以通过<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">'form'</span>);</div><div class="line"><span class="keyword">var</span> usernameDom = form.elements[<span class="string">'username'</span>];</div><div class="line"><span class="keyword">var</span> usernameValue = usernameDom.value;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></form></p>
<h2 id="事件选中"><a href="#事件选中" class="headerlink" title="事件选中"></a>事件选中</h2><h3 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h3><p>判断单个单选是否选中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>是否必选 <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"radio"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="string">'#radio'</span>).is(<span class="string">':checked'</span>)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>获取单选选中的值<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"radio"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"radio"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="string">'#radio'</span>).is(<span class="string">':checked'</span>)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>获取单选选中的值</p>
<h3 id="多选"><a href="#多选" class="headerlink" title="多选"></a>多选</h3><p>更改多选框的选中状态<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"checked"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="string">'#checkbox'</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</div><div class="line">  $(<span class="string">'#checkbox'</span>).prop(<span class="string">"checked"</span>, <span class="literal">false</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="下拉"><a href="#下拉" class="headerlink" title="下拉"></a>下拉</h3><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><h3 id="input输入事件的监听"><a href="#input输入事件的监听" class="headerlink" title="input输入事件的监听"></a>input输入事件的监听</h3><p>jq控制input的输入事件，可以用 input,keydown,keyup等事件<br>区别</p>
<h3 id="单选更改监听"><a href="#单选更改监听" class="headerlink" title="单选更改监听"></a>单选更改监听</h3><h3 id="多选更改监听"><a href="#多选更改监听" class="headerlink" title="多选更改监听"></a>多选更改监听</h3><h3 id="下拉更改监听"><a href="#下拉更改监听" class="headerlink" title="下拉更改监听"></a>下拉更改监听</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《JavaScript高级程序设计》</p>
]]></content>
      
        <categories>
            
            <category> jq </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> jq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css重写form表单样式]]></title>
      <url>http://emloxe.github.io/2017/07/11/css%E9%87%8D%E5%86%99form%E8%A1%A8%E5%8D%95%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>form表单在浏览器器中有不同的样式，在这里对样式进行重写，使表单样式在各个浏览器显示的基本一致<br><a id="more"></a></p>
<h2 id="input与button"><a href="#input与button" class="headerlink" title="input与button"></a>input与button</h2><h3 id="初始状态查看"><a href="#初始状态查看" class="headerlink" title="初始状态查看"></a>初始状态查看</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"green"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上三个元素都设置宽高为100px，content设置<code>1px solid #000</code>的边框,设置<code>span</code>  <code>display: inline-block</code><br>在不引入任何 reset.css 状态下，如图显示(谷歌)</p>
<p><img src="/images/2017071101.png" alt="images"></p>
<p>button input span 都为 inline-block 结构，设置<code>vertical-align: top;</code>显示如下（谷歌）</p>
<p><img src="/images/2017071102.png" alt="images"></p>
<p>通过谷歌，查看<code>button</code>和<code>input</code>盒模型</p>
<p><img src="/images/2017071103.png" alt="images"></p>
<p>发现谷歌自动将<code>button</code>和<code>input</code>元素设置为<code>box-sizing:border-box;</code>, 默认有<code>border: 1px solid buttonface; padding: 6px;</code></p>
<p>火狐、ie和谷歌效果基本相同，就是默认的边框样式不同<br><img src="/images/2017071104.png" alt="images"></p>
<h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>以下样式参考boostrap</p>
<h2 id="谷歌特殊样式"><a href="#谷歌特殊样式" class="headerlink" title="谷歌特殊样式"></a>谷歌特殊样式</h2><p>解决谷歌浏览器中的input背景色默认是黄色<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span> &#123;</div><div class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="number">1000px</span> white inset <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css居中]]></title>
      <url>http://emloxe.github.io/2017/06/26/css%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<p>对固定宽高和非固定宽高的div，进行居中的探讨<br><a id="more"></a></p>
<h2 id="左右居中"><a href="#左右居中" class="headerlink" title="左右居中"></a>左右居中</h2><h3 id="元素为inline-inline-block"><a href="#元素为inline-inline-block" class="headerlink" title="元素为inline inline-block"></a>元素为inline inline-block</h3><h3 id="元素为block"><a href="#元素为block" class="headerlink" title="元素为block"></a>元素为block</h3><p>单个block元素设置 margin: auto</p>
<p>多个block元素可用css3的flex</p>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="父元素高度不固定"><a href="#父元素高度不固定" class="headerlink" title="父元素高度不固定"></a>父元素高度不固定</h3><p>可设置父元素<code>padding: 10px 0;</code>元素只适应高度，可做到垂直居中</p>
<h3 id="父元素高度固定"><a href="#父元素高度固定" class="headerlink" title="父元素高度固定"></a>父元素高度固定</h3><p>已知子元素高度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</div><div class="line"><span class="selector-tag">top</span>: 50%;</div><div class="line"><span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">margin-top</span>: <span class="selector-tag">-50px</span>;</div></pre></td></tr></table></figure></p>
<p>子元素高度不固定<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</div><div class="line"><span class="selector-tag">top</span>: 50%;</div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(<span class="selector-tag">-50</span>%);</div></pre></td></tr></table></figure></p>
<h2 id="左右上下居中"><a href="#左右上下居中" class="headerlink" title="左右上下居中"></a>左右上下居中</h2><h3 id="父元素高度固定-1"><a href="#父元素高度固定-1" class="headerlink" title="父元素高度固定"></a>父元素高度固定</h3><p>已知子元素高度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</div><div class="line"><span class="selector-tag">top</span>: 50%;</div><div class="line"><span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">margin-top</span>: <span class="selector-tag">-50px</span>;</div><div class="line"><span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">margin-left</span>: <span class="selector-tag">-50px</span>;</div></pre></td></tr></table></figure></p>
<p>子元素高度不固定<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</div><div class="line"><span class="selector-tag">top</span>: 50%;</div><div class="line"><span class="selector-tag">left</span>: 50%;</div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(<span class="selector-tag">-50</span>%,, <span class="selector-tag">-50</span>%);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[position总结]]></title>
      <url>http://emloxe.github.io/2017/06/26/position%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>position 一共有static relative absolute fixed等属性值<br><a id="more"></a></p>
<h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>不脱离文档流，移动可能会遮盖到旁边的元素</p>
<h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><ol>
<li><p>脱离文档流,会使父元素高度塌陷。</p>
</li>
<li><p>相对于非static元素进行定位。绝对定位元素需要至少一个祖先元素设置了相对定位（绝对定位），不然元素定位会相对于页面的主体进行定位。<br>其祖先元素设置了非static的，将根据其content位置开始计算left，top等等。</p>
</li>
<li><p>当元素为display为inline、inline-block，会自动将元素display设置为block。元素如果没有设定宽高，元素的宽高将有其子元素的宽高决定。如果其子元素全部设置了<code>position: absolute;</code>，子元素的宽高则为0;如果子元素设置<code>float: left</code>,则宽高有其子元素的宽高决定。</p>
</li>
</ol>
<h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h2><ol>
<li><p>脱离文档流,会使父元素高度塌陷。</p>
</li>
<li><p>相对于浏览器窗口定位。</p>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.w3cplus.com/css/advanced-html-css-lesson2-detailed-css-positioning.html" target="_blank" rel="external">http://www.w3cplus.com/css/advanced-html-css-lesson2-detailed-css-positioning.html</a></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js、jq获取距离与宽高]]></title>
      <url>http://emloxe.github.io/2017/05/08/js%E3%80%81jq%E8%8E%B7%E5%8F%96%E8%B7%9D%E7%A6%BB%E4%B8%8E%E5%AE%BD%E9%AB%98/</url>
      <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><h3 id="文档的宽高"><a href="#文档的宽高" class="headerlink" title="文档的宽高"></a>文档的宽高</h3><p>网页正文全文宽： document.body.scrollWidth<br>网页正文全文高： document.body.scrollHeight</p>
<h3 id="被卷去的"><a href="#被卷去的" class="headerlink" title="被卷去的"></a>被卷去的</h3><p>网页正文全文高： document.body.scrollHeight<br>网页被卷去的高： document.body.scrollTop</p>
<h2 id="window可视区域"><a href="#window可视区域" class="headerlink" title="window可视区域"></a>window可视区域</h2><h3 id="可视区域的宽高"><a href="#可视区域的宽高" class="headerlink" title="可视区域的宽高"></a>可视区域的宽高</h3><p>网页可见区域宽： document.body.clientWidth<br>网页可见区域高： document.body.clientHeight<br>网页可见区域宽： document.body.offsetWidth (包括边线的宽)<br>网页可见区域高： document.body.offsetHeight (包括边线的高)</p>
<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><h3 id="元素的宽高"><a href="#元素的宽高" class="headerlink" title="元素的宽高"></a>元素的宽高</h3><p>元素的宽： dom.offsetWidth<br>元素的高： dom.offsetWidth</p>
<h3 id="被卷去的-1"><a href="#被卷去的-1" class="headerlink" title="被卷去的"></a>被卷去的</h3><p>scrollWidth:获取对象的滚动宽度<br>scrollHeight: 获取对象的滚动高度。<br>scrollLeft:设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离<br>scrollTop:设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离</p>
<h2 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h2><p>屏幕分辨率的高：window.screen.height<br>屏幕分辨率的宽：window.screen.width<br>屏幕可用工作区高度： window.screen.availHeight<br>屏幕可用工作区宽度： window.screen.availWidth</p>
<h2 id="API文档相关介绍"><a href="#API文档相关介绍" class="headerlink" title="API文档相关介绍"></a>API文档相关介绍</h2><h3 id="获取宽高"><a href="#获取宽高" class="headerlink" title="获取宽高"></a>获取宽高</h3><p>js</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">element.clientHeight</td>
<td>在页面上返回内容的可视高度（不包括边框，边距或滚动条）</td>
</tr>
<tr>
<td style="text-align:center">element.clientWidth</td>
<td>在页面上返回内容的可视宽度（不包括边框，边距或滚动条）</td>
</tr>
<tr>
<td style="text-align:center">element.offsetHeight</td>
<td>返回，任何一个元素的高度包括边框和填充，但不是边距</td>
</tr>
<tr>
<td style="text-align:center">element.offsetWidth</td>
<td>返回元素的宽度，包括边框和填充，但不是边距</td>
</tr>
<tr>
<td style="text-align:center">element.scrollHeight</td>
<td>返回整个元素的高度（包括带滚动条的隐蔽的地方）</td>
</tr>
<tr>
<td style="text-align:center">element.scrollWidth</td>
<td>返回元素的整个宽度（包括带滚动条的隐蔽的地方）</td>
</tr>
</tbody>
</table>
<p>jq</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">width()</td>
<td>设置或返回被选元素的宽度</td>
</tr>
<tr>
<td style="text-align:center">height()</td>
<td>设置或返回被选元素的高度</td>
</tr>
<tr>
<td style="text-align:center">innerHeight()</td>
<td>返回元素的高度（包含 padding，不包含 border）</td>
</tr>
<tr>
<td style="text-align:center">innerWidth()</td>
<td>返回元素的宽度（包含 padding，不包含 border）</td>
</tr>
<tr>
<td style="text-align:center">outerHeight()</td>
<td>返回元素的高度（包含 padding 和 border）</td>
</tr>
<tr>
<td style="text-align:center">outerWidth()</td>
<td>返回元素的宽度（包含 padding 和 border）</td>
</tr>
</tbody>
</table>
<h3 id="获取位置"><a href="#获取位置" class="headerlink" title="获取位置"></a>获取位置</h3><p>js</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">element.offsetLeft</td>
<td>返回当前元素的相对水平偏移位置的偏移容器</td>
</tr>
<tr>
<td style="text-align:center">element.offsetTop</td>
<td>返回当前元素的相对垂直偏移位置的偏移容器</td>
</tr>
<tr>
<td style="text-align:center">element.offsetParent</td>
<td>返回元素的偏移容器</td>
</tr>
<tr>
<td style="text-align:center">element.scrollLeft</td>
<td>返回当前视图中的实际元素的左边缘和左边缘之间的距离</td>
</tr>
<tr>
<td style="text-align:center">element.scrollTop</td>
<td>返回当前视图中的实际元素的顶部边缘和顶部边缘之间的距离</td>
</tr>
</tbody>
</table>
<p>jq</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">offset()</td>
<td>设置或返回被选元素的偏移坐标（相对于文档）</td>
</tr>
<tr>
<td style="text-align:center">position()</td>
<td>返回元素的位置（相对于父元素）</td>
</tr>
<tr>
<td style="text-align:center">scrollLeft()</td>
<td>设置或返回被选元素的水平滚动条位置</td>
</tr>
<tr>
<td style="text-align:center">scrollTop()</td>
<td>设置或返回被选元素的垂直滚动条位置</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> jq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jq简单操作汇总]]></title>
      <url>http://emloxe.github.io/2017/05/05/jq%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h2 id="dom操作"><a href="#dom操作" class="headerlink" title="dom操作"></a>dom操作</h2><h3 id="移除自身"><a href="#移除自身" class="headerlink" title="移除自身"></a>移除自身</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$dom.remove();</div></pre></td></tr></table></figure>
<p>原生js可采用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dom.parentNode.removeChild(dom);</div></pre></td></tr></table></figure></p>
<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>键盘上的监听事件有</p>
<ul>
<li>keydown 当键盘或按钮被按下时，发生 keydown 事件。</li>
<li>keypress keypress 事件与 keydown 事件类似。当按钮被按下时，会发生该事件。它发生在当前获得焦点的元素上。</li>
<li>keyup 当按钮被松开时，发生 keyup 事件。它发生在当前获得焦点的元素上。</li>
</ul>
<h4 id="ctrl-enter"><a href="#ctrl-enter" class="headerlink" title="ctrl + enter"></a>ctrl + enter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Ctrl+enter同时按下</span></div><div class="line">  <span class="keyword">if</span>(e.ctrlKey &amp;&amp; e.which == <span class="number">13</span>)&#123;</div><div class="line">            </div><div class="line">  <span class="comment">// 只按下enter</span></div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e.keyCode == <span class="number">13</span>)&#123;</div><div class="line">         </div><div class="line">  &#125;</div><div class="line"></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>textarea中的内容换行<br>可在value中加入’\n’</p>
<h3 id="监听表单"><a href="#监听表单" class="headerlink" title="监听表单"></a>监听表单</h3><h4 id="下拉监听"><a href="#下拉监听" class="headerlink" title="下拉监听"></a>下拉监听</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"w-type"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"radio"</span>&gt;</span>单选题<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"multiselect"</span>&gt;</span>多选题<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"text"</span>&gt;</span>单行文本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"area"</span>&gt;</span>多行文本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="comment">// jq</span></div><div class="line">  $(<span class="string">'#w-type'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 获取选中的选项的值</span></div><div class="line">    <span class="keyword">var</span> val = $(<span class="keyword">this</span>).children(<span class="string">'option:selected'</span>).val();</div><div class="line">    <span class="comment">//选中的文本</span></div><div class="line">    <span class="keyword">var</span> text = $(<span class="string">'#w-type option:selected'</span>).text();</div><div class="line">    <span class="comment">//索引</span></div><div class="line">    $(<span class="string">"#w-type"</span>).get(<span class="number">0</span>).selectedIndex;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// js</span></div><div class="line">  <span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'w-type'</span>); <span class="comment">//定位id</span></div><div class="line">  <span class="keyword">var</span> index = obj.selectedIndex; <span class="comment">// 选中索引</span></div><div class="line">  <span class="keyword">var</span> text = obj.options[index].text; <span class="comment">// 选中文本</span></div><div class="line">  <span class="keyword">var</span> value = obj.options[index].value; <span class="comment">// 选中值</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="文本框输入监听"><a href="#文本框输入监听" class="headerlink" title="文本框输入监听"></a>文本框输入监听</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"ipt"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="string">'.ipt'</span>).on(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $dom = $(<span class="keyword">this</span>);</div><div class="line">      <span class="keyword">var</span> text = $dom.val();</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="单选点击的监听"><a href="#单选点击的监听" class="headerlink" title="单选点击的监听"></a>单选点击的监听</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="string">"input:radio"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      alert(<span class="number">1</span>);</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> jq </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jq制作滚动条]]></title>
      <url>http://emloxe.github.io/2017/05/04/jq%E5%88%B6%E4%BD%9C%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
      <content type="html"><![CDATA[<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scroll-bar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="高度间的关系"><a href="#高度间的关系" class="headerlink" title="高度间的关系"></a>高度间的关系</h3><p><img src="/images/2017050401.jpg" alt="images"></p>
<p>h2为wrap高度<br>h1为text高度<br>h3为scroll-bar高度</p>
<p>已知wrap和text高度，滚动条高度为动态高度<br>遵循<br><img src="/images/2017050403.jpg" alt="images"><br>h3 = h2*h2/h1<br>每当h1、h2改变时，h3就要发生改变<br>其中存在比例<code>bl = h2/h1 = h3/h2</code>也要发生改变</p>
<p>当鼠标拉动滚动条和鼠标滚轮滑动时<code>.text</code>的top值需要发生改变<br>实际上<code>h5/h4 = bl</code><br><img src="/images/2017050402.jpg" alt="images"></p>
<p>根据鼠标的拖拽距离和滚轮的滑动距离转化为 h5高度<br>h4 = h5/bl </p>
<p>弄清楚这个关系，就比较好计算了</p>
<h3 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h3><p>初始时,判断<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 内容超过容器</span></div><div class="line"><span class="keyword">if</span>(h1 &gt; h2)&#123;</div><div class="line">    bl = h2/h1</div><div class="line">    h3 = h2*bl;</div><div class="line">    <span class="comment">// 设定滚动条高度</span></div><div class="line">    <span class="comment">// 显示滚动条</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="comment">// 隐藏滚动条</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="监听滚动条点击和移动"><a href="#监听滚动条点击和移动" class="headerlink" title="监听滚动条点击和移动"></a>监听滚动条点击和移动</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设定点击按下的起始y，和移动的y</span></div><div class="line"><span class="keyword">var</span> sy = <span class="number">-1</span>;</div><div class="line"><span class="keyword">var</span> ey = <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 监听鼠标在滚动条 按下的事件</span></div><div class="line">$bar.on(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="comment">// 阻止其默认行为</span></div><div class="line">    e.preventDefault();</div><div class="line"></div><div class="line">    $bar.addClass(<span class="string">'active'</span>);</div><div class="line">    $(<span class="built_in">document</span>).css(<span class="string">'cursor'</span>, <span class="string">'default'</span>);</div><div class="line">    sy = e.clientY;</div><div class="line"></div><div class="line">    <span class="comment">// 鼠标按下并移动的的事件，并且触发动态改变滚动条bar和text的top值</span></div><div class="line">    $(<span class="built_in">document</span>).on(<span class="string">'mousemove.scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        ey = e.clientY;</div><div class="line">        <span class="keyword">var</span> h = <span class="built_in">Math</span>.floor(ey-sy);  <span class="comment">// 鼠标移动的距离，也就是滚动条需要改变的高度</span></div><div class="line"></div><div class="line">        judgeHeight(h);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 鼠标点击释放，移除事件和相关的动效</span></div><div class="line">    $(<span class="built_in">document</span>).on(<span class="string">'mouseup.scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        $bar.removeClass(<span class="string">'active'</span>);</div><div class="line">        _this.barTop = $bar.offset().top - $wrap.offset().top; <span class="comment">// 存储最终结束时的barTop值</span></div><div class="line"></div><div class="line">        $(<span class="built_in">document</span>).off(<span class="string">'.scroll'</span>)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 根据滚条滚动的高度，判断改变整体移动的高度</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeHeight</span>(<span class="params">h</span>)</span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(h + barTop &gt; <span class="number">0</span> &amp;&amp; h + barTop &lt; wrapH - barH)&#123;</div><div class="line">        $bar.css(<span class="string">'top'</span>,h + barTop);</div><div class="line"></div><div class="line">        $inside.css(<span class="string">'top'</span>, - barTop/bl - h/bl);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(h + barTop &lt; <span class="number">0</span>)&#123;</div><div class="line">        $bar.css(<span class="string">'top'</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">        $inside.css(<span class="string">'top'</span>, <span class="number">0</span>);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(h + barTop &gt; wrapH - barH)&#123;</div><div class="line">        $bar.css(<span class="string">'top'</span>,wrapH - barH);</div><div class="line"></div><div class="line">        $inside.css(<span class="string">'top'</span>, -(wrapH - barH)/bl );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="监听滑轮的滚动"><a href="#监听滑轮的滚动" class="headerlink" title="监听滑轮的滚动"></a>监听滑轮的滚动</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$wrap.on(<span class="string">'mousewheel DOMMouseScroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    e.preventDefault(); <span class="comment">// 阻止默认事件</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> speedH = <span class="number">40</span>;</div><div class="line">    <span class="keyword">var</span> oEv = e.originalEvent;  <span class="comment">// 将事件转换为原生事件event</span></div><div class="line">    <span class="keyword">var</span> wheelRange = oEv.wheelDelta ? -oEv.wheelDelta/<span class="number">120</span> : (oEv.detail || <span class="number">0</span>)/<span class="number">3</span>;  <span class="comment">// 计算滚动的数值</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> h = <span class="built_in">Math</span>.floor(wheelRange*speedH*bl);  <span class="comment">// 取得滚动条需要改变的高度</span></div><div class="line"></div><div class="line">    judgeHeight(h);</div><div class="line"></div><div class="line">    _this.barTop = $bar.offset().top - $wrap.offset().top;  <span class="comment">// 存储最终结束时的barTop值</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="整体代码如下"><a href="#整体代码如下" class="headerlink" title="整体代码如下"></a>整体代码如下</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ScrollBar</span>(<span class="params">opts</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.init(opts);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    $.extend(ScrollBar.prototype, &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.first(opts);</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.judgeShow();</div><div class="line">            <span class="keyword">this</span>.addListenterBarMove();</div><div class="line">            <span class="keyword">this</span>.addListenerMousewheel();</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="attr">first</span>: <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> $wrap = <span class="keyword">this</span>.$wrap = opts.wrap;</div><div class="line">            <span class="keyword">var</span> $inside = <span class="keyword">this</span>.$inside = opts.inside;</div><div class="line">            <span class="keyword">this</span>.$bar = opts.bar;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> insideH =<span class="keyword">this</span>.insideH = $inside.outerHeight();</div><div class="line">            <span class="keyword">var</span> wrapH = <span class="keyword">this</span>.wrapH = $wrap.height();</div><div class="line"></div><div class="line">            <span class="keyword">var</span> bl = <span class="keyword">this</span>.bl = wrapH / insideH;</div><div class="line">            <span class="keyword">this</span>.barH = <span class="built_in">Math</span>.floor(wrapH * bl); <span class="comment">// 滚动条高度</span></div><div class="line">        &#125;,</div><div class="line"></div><div class="line"></div><div class="line">        <span class="attr">judgeShow</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">// 滚动条的展示与隐藏</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.insideH &gt; <span class="keyword">this</span>.wrapH) &#123;</div><div class="line">                <span class="keyword">this</span>.$bar.height(<span class="keyword">this</span>.barH);</div><div class="line">                <span class="keyword">this</span>.$bar.show();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.$bar.hide();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 侧边条点击移动时，触发</span></div><div class="line">        addListenterBarMove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> $bar = <span class="keyword">this</span>.$bar;</div><div class="line">            <span class="keyword">var</span> $wrap = <span class="keyword">this</span>.$wrap;</div><div class="line">            <span class="comment">//var barTop = 0;</span></div><div class="line">            <span class="keyword">var</span> sy = <span class="number">-1</span>;</div><div class="line">            <span class="keyword">var</span> ey = <span class="number">-1</span>;</div><div class="line"></div><div class="line">            $bar.on(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line"></div><div class="line">                $bar.addClass(<span class="string">'active'</span>);</div><div class="line">                $(<span class="built_in">document</span>).css(<span class="string">'cursor'</span>, <span class="string">'default'</span>);</div><div class="line">                sy = e.clientY;</div><div class="line"></div><div class="line"></div><div class="line">                $(<span class="built_in">document</span>).on(<span class="string">'mousemove.scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                    ey = e.clientY;</div><div class="line">                    <span class="keyword">var</span> top = <span class="built_in">Math</span>.floor(ey-sy);</div><div class="line"></div><div class="line">                    _this.judgeHeight(top);</div><div class="line"></div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                $(<span class="built_in">document</span>).on(<span class="string">'mouseup.scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                    $bar.removeClass(<span class="string">'active'</span>);</div><div class="line">                    _this.barTop = $bar.offset().top - $wrap.offset().top;</div><div class="line"></div><div class="line">                    $(<span class="built_in">document</span>).off(<span class="string">'.scroll'</span>)</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 滚动条滚动时触发</span></div><div class="line">        addListenerMousewheel: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> $wrap = <span class="keyword">this</span>.$wrap;</div><div class="line">            <span class="keyword">var</span> $bar = <span class="keyword">this</span>.$bar;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> bl = <span class="keyword">this</span>.bl;</div><div class="line"></div><div class="line">            $wrap.on(<span class="string">'mousewheel DOMMouseScroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line"></div><div class="line">                <span class="keyword">var</span> speedH = <span class="number">40</span>;</div><div class="line">                <span class="keyword">var</span> oEv = e.originalEvent;</div><div class="line">                <span class="keyword">var</span> wheelRange = oEv.wheelDelta ? -oEv.wheelDelta/<span class="number">120</span> : (oEv.detail || <span class="number">0</span>)/<span class="number">3</span>;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> top = <span class="built_in">Math</span>.floor(wheelRange*speedH*bl);</div><div class="line"></div><div class="line">                _this.judgeHeight(top);</div><div class="line"></div><div class="line">                _this.barTop = $bar.offset().top - $wrap.offset().top;</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 根据滚条滚动的高度，判断改变整体移动的高度</span></div><div class="line">        judgeHeight: <span class="function"><span class="keyword">function</span> (<span class="params">h</span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> $bar = <span class="keyword">this</span>.$bar;</div><div class="line">            <span class="keyword">var</span> $inside = <span class="keyword">this</span>.$inside;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> wrapH = <span class="keyword">this</span>.wrapH;</div><div class="line">            <span class="keyword">var</span> barH = <span class="keyword">this</span>.barH;</div><div class="line">            <span class="keyword">var</span> bl = <span class="keyword">this</span>.bl;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> barTop = <span class="keyword">this</span>.barTop;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(h + barTop &gt; <span class="number">0</span> &amp;&amp; h + barTop &lt; wrapH - barH)&#123;</div><div class="line">                $bar.css(<span class="string">'top'</span>,h + barTop);</div><div class="line"></div><div class="line">                $inside.css(<span class="string">'top'</span>, - barTop/bl - h/bl);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(h + barTop &lt; <span class="number">0</span>)&#123;</div><div class="line">                $bar.css(<span class="string">'top'</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">                $inside.css(<span class="string">'top'</span>, <span class="number">0</span>);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(h + barTop &gt; wrapH - barH)&#123;</div><div class="line">                $bar.css(<span class="string">'top'</span>,wrapH - barH);</div><div class="line"></div><div class="line">                $inside.css(<span class="string">'top'</span>, -(wrapH - barH)/bl );</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// wrap高度改变,inside高度不变</span></div><div class="line">        wrapResize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> $bar = <span class="keyword">this</span>.$bar;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> insideH =<span class="keyword">this</span>.insideH;</div><div class="line">            <span class="keyword">var</span> wrapH = <span class="keyword">this</span>.wrapH = <span class="keyword">this</span>.$wrap.height();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">            <span class="comment">// 滚动条的展示与隐藏</span></div><div class="line">            <span class="keyword">if</span>(insideH &gt; wrapH)&#123;</div><div class="line">                <span class="keyword">var</span> bl = <span class="keyword">this</span>.bl = wrapH/insideH;</div><div class="line">                <span class="keyword">var</span> barH = <span class="keyword">this</span>.barH = <span class="built_in">Math</span>.floor(wrapH*bl); <span class="comment">// 滚动条高度</span></div><div class="line"></div><div class="line">                <span class="keyword">this</span>.$bar.height(barH);</div><div class="line"></div><div class="line">                <span class="keyword">var</span> scrollH = <span class="keyword">this</span>.$wrap.offset().top -<span class="keyword">this</span>.$inside.offset().top;<span class="comment">// 主体内部已卷去的高度</span></div><div class="line"></div><div class="line">                $bar.css(<span class="string">'top'</span>, scrollH*bl);</div><div class="line"></div><div class="line">                $bar.show();</div><div class="line"></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">                $bar.hide();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// inside高度改变，wrap高度不变</span></div><div class="line">        updateInside: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> $bar = <span class="keyword">this</span>.$bar;</div><div class="line">            <span class="keyword">var</span> $inside = <span class="keyword">this</span>.$inside;</div><div class="line">            <span class="keyword">var</span> $wrap = <span class="keyword">this</span>.$wrap;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> outInsideH = <span class="keyword">this</span>.insideH;</div><div class="line">            <span class="keyword">var</span> outBarH = <span class="keyword">this</span>.barH;</div><div class="line">            <span class="keyword">var</span> barTop = $bar.offset().top - $wrap.offset().top;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> insideH =<span class="keyword">this</span>.insideH = $inside.outerHeight();</div><div class="line">            <span class="keyword">var</span> wrapH = <span class="keyword">this</span>.wrapH = $wrap.height();</div><div class="line"></div><div class="line">            <span class="keyword">var</span> bl = <span class="keyword">this</span>.bl = wrapH / insideH;</div><div class="line">            <span class="keyword">var</span> barH = <span class="keyword">this</span>.barH = <span class="built_in">Math</span>.floor(wrapH * bl*<span class="number">10</span>)/<span class="number">10</span>; <span class="comment">// 滚动条高度</span></div><div class="line"></div><div class="line">            $bar.height(barH);</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">if</span>(barTop + outBarH &gt; wrapH - <span class="number">400</span>)&#123;</div><div class="line">                <span class="keyword">this</span>.judgeHeight(insideH - outInsideH + <span class="number">400</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">var</span> scrollH = <span class="keyword">this</span>.$wrap.offset().top -<span class="keyword">this</span>.$inside.offset().top;<span class="comment">// 主体内部已卷去的高度</span></div><div class="line"></div><div class="line">                $bar.css(<span class="string">'top'</span>, scrollH*bl);</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">this</span>.judgeShow();</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">window</span>.ScrollBar = ScrollBar;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;)(<span class="built_in">window</span>.jQuery);</div></pre></td></tr></table></figure>
<p>调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scrollBar = <span class="keyword">new</span> ScrollBar(&#123;</div><div class="line">    <span class="attr">wrap</span>: $(<span class="string">'.wrap'</span>),</div><div class="line">    <span class="attr">inside</span>: $(<span class="string">'.text'</span>),</div><div class="line">    <span class="attr">bar</span>: $(<span class="string">'.scroll-bar'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 还可以链式调用</span></div><div class="line"><span class="comment">// 当wrap高度增加时</span></div><div class="line">scrollBar.wrapResize();</div><div class="line"></div><div class="line"><span class="comment">// 当text中在内部，尾部添加新内容时</span></div><div class="line">scrollBar.updateInside();</div></pre></td></tr></table></figure></p>
<h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p><a href="https://emloxe.github.io/e-test/2017050401.html">聊天界面，滚动条制作与展示</a><br><a href="https://github.com/emloxe/e-test/blob/master/2017050401.html" target="_blank" rel="external">示例代码地址</a></p>
<h2 id="css解决方案"><a href="#css解决方案" class="headerlink" title="css解决方案"></a>css解决方案</h2><p>事实上，当子元素宽高大于父元素时，浏览器可以自动为父元素加上滚动条，设置<code>overflow: auto</code></p>
<p>在谷歌浏览器、欧朋、Safari最新浏览器中<br>还可以为滚动条设置样式</p>
<p>在父元素上设置伪类<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: <span class="number">#b46868</span>;</div><div class="line">&#125; <span class="comment">/* 滚动条的滑轨背景颜色 */</span></div><div class="line"></div><div class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.2); </div><div class="line">&#125; <span class="comment">/* 滑块颜色 */</span></div><div class="line"></div><div class="line"><span class="selector-pseudo">::-webkit-scrollbar-button</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: <span class="number">#7c2929</span>;</div><div class="line">&#125; <span class="comment">/* 滑轨两头的监听按钮颜色 */</span></div><div class="line"></div><div class="line"><span class="selector-pseudo">::-webkit-scrollbar-corner</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: black;</div><div class="line">&#125; <span class="comment">/* 横向滚动条和纵向滚动条相交处尖角的颜色 */</span></div></pre></td></tr></table></figure></p>
<h3 id="参考示例"><a href="#参考示例" class="headerlink" title="参考示例"></a>参考示例</h3><p>网上的示例,目前可在谷歌浏览器、欧朋、Safari最新浏览器正常<br><a href="https://emloxe.github.io/e-test/2017050402.html">CSS3自定义滚动条-轩枫阁</a><br><a href="https://github.com/emloxe/e-test/blob/master/2017050402.html" target="_blank" rel="external">示例代码地址</a></p>
]]></content>
      
        <categories>
            
            <category> jq </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sublime使用]]></title>
      <url>http://emloxe.github.io/2017/04/25/sublime%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>windows</p>
<ul>
<li><p>Esc 退出</p>
</li>
<li><p>Ctrl 多行游标</p>
</li>
<li><p>Ctrl+f  查找</p>
</li>
<li><p>Ctrl+h  替换</p>
</li>
<li><p>Ctrl+z  倒退</p>
</li>
<li><p>Ctrl+y  向前</p>
</li>
<li><p>Ctrl+/  注释代码</p>
</li>
<li><p>Ctrl+Shift+/  注释代码</p>
</li>
<li><p>Ctrl+[  减小缩进</p>
</li>
<li><p>Ctrl+]  增加缩进</p>
</li>
<li><p>鼠标选中文本，按下Ctrl+D  一个一个选择全部的相同文本进行同时编辑</p>
</li>
<li><p>鼠标选中文本，按下Alt+F3  一次性选择全部的相同文本进行同时编辑</p>
</li>
<li><p>Shift+鼠标右键  可以用鼠标进行竖向多行选择</p>
</li>
<li><p>Ctrl+鼠标左键  可以手动选择同时要编辑</p>
</li>
</ul>
<h3 id="选择类"><a href="#选择类" class="headerlink" title="选择类"></a>选择类</h3><ul>
<li><p>Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。</p>
</li>
<li><p>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。</p>
</li>
<li><p>Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。</p>
</li>
<li><p>Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</p>
</li>
<li><p>Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。</p>
</li>
<li><p>Ctrl+M 光标移动至括号内结束或开始的位置。</p>
</li>
<li><p>Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</p>
</li>
<li><p>Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</p>
</li>
<li><p>Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。</p>
</li>
<li><p>Ctrl+Shift+] 选中代码，按下快捷键，展开代码。</p>
</li>
<li><p>Ctrl+K+0 展开所有折叠代码。</p>
</li>
<li><p>Ctrl+← 向左单位性地移动光标，快速移动光标。</p>
</li>
<li><p>Ctrl+→ 向右单位性地移动光标，快速移动光标。</p>
</li>
<li><p>shift+↑ 向上选中多行。</p>
</li>
<li><p>shift+↓ 向下选中多行。</p>
</li>
<li><p>Shift+← 向左选中文本。</p>
</li>
<li><p>Shift+→ 向右选中文本。</p>
</li>
<li><p>Ctrl+Shift+← 向左单位性地选中文本。</p>
</li>
<li><p>Ctrl+Shift+→ 向右单位性地选中文本。</p>
</li>
<li><p>Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。</p>
</li>
<li><p>Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。</p>
</li>
<li><p>Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。</p>
</li>
<li><p>Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。</p>
</li>
</ul>
<h3 id="编辑类"><a href="#编辑类" class="headerlink" title="编辑类"></a>编辑类</h3><ul>
<li><p>Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。</p>
</li>
<li><p>Ctrl+Shift+D  复制光标所在整行，插入到下一行。</p>
</li>
<li><p>Tab 向右缩进。</p>
</li>
<li><p>Shift+Tab 向左缩进。</p>
</li>
<li><p>Ctrl+K+K 从光标处开始删除代码至行尾。</p>
</li>
<li><p>Ctrl+Shift+K 删除整行。</p>
</li>
<li><p>Ctrl+/ 注释单行。</p>
</li>
<li><p>Ctrl+Shift+/ 注释多行。</p>
</li>
<li><p>Ctrl+K+U 转换大写。</p>
</li>
<li><p>Ctrl+K+L 转换小写。</p>
</li>
<li><p>Ctrl+Z 撤销。</p>
</li>
<li><p>Ctrl+Y 恢复撤销。</p>
</li>
<li><p>Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。</p>
</li>
<li><p>Ctrl+F2 设置书签</p>
</li>
<li><p>Ctrl+T 左右字母互换。</p>
</li>
<li><p>F6 单词检测拼写</p>
</li>
</ul>
<h3 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h3><ul>
<li><p>Ctrl+F 打开底部搜索框，查找关键字。</p>
</li>
<li><p>Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。</p>
</li>
<li><p>Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。</p>
</li>
<li><p>Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。</p>
</li>
<li><p>Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。</p>
</li>
<li><p>Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。</p>
</li>
<li><p>Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</p>
</li>
<li><p>Esc 退出光标多行选择，退出搜索框，命令框等。</p>
</li>
</ul>
<h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="Package-Control插件管理"><a href="#Package-Control插件管理" class="headerlink" title="Package Control插件管理"></a>Package Control插件管理</h3><p>它是用来管理插件的插件,首次使用前也是需要安装的</p>
<p>首先要安装<br>sublime 安装教程在这里 <a href="https://packagecontrol.io/installation" target="_blank" rel="external">https://packagecontrol.io/installation</a></p>
<p>过程：<br><code>view -&gt; Show Console</code><br>在下面的出现的输入框中输入（sublime3 版本，sublime2可在以上地址中查询）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h = &apos;6f4c264a24d933ce70df5dedcf1dcaee&apos; + &apos;ebe013ee18cced0ef93d5f746d80ef60&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</div></pre></td></tr></table></figure></p>
<p>ctrl+shift+p<br>在输入框中输入 install Package Control，出现相应的匹配则安装成功</p>
<h3 id="快速注释生成-DocBlockr"><a href="#快速注释生成-DocBlockr" class="headerlink" title="快速注释生成 DocBlockr"></a>快速注释生成 DocBlockr</h3><p>ctrl+shift+p<br>输入 install Package 回车<br>输入 DocBlockr 回车</p>
<p>使用<br><code>function</code>前输入<code>/**</code>然后回车</p>
<p>自定义注释<br>  自定义配置：<br>  <code>Preference -&gt; Package Settings -&gt; DocBlockr -&gt; Settings - User</code><br>  配置成如下内容：<br>  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  &#123;</div><div class="line">  <span class="attr">"jsdocs_extra_tags"</span>:[</div><div class="line">      <span class="string">"@Author Hybrid"</span>,</div><div class="line">      <span class="string">"@DateTime &#123;&#123;date&#125;&#125;"</span>,</div><div class="line">      <span class="string">"@copyright $&#123;1:[copyright]&#125;"</span>,</div><div class="line">      <span class="string">"@license $&#123;1:[license]&#125;"</span>,</div><div class="line">      <span class="string">"@version $&#123;1:[version]&#125;"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"jsdocs_function_description"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Emmet-html代码补全"><a href="#Emmet-html代码补全" class="headerlink" title="Emmet html代码补全"></a>Emmet html代码补全</h3><p>同样使用Package Control安装</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ul&gt;(li&gt;a)*4</div><div class="line"><span class="comment">&lt;!-- 会生成 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="SideBarEnhancements-右键菜单增强插件"><a href="#SideBarEnhancements-右键菜单增强插件" class="headerlink" title="SideBarEnhancements 右键菜单增强插件"></a>SideBarEnhancements 右键菜单增强插件</h3><h3 id="Terminal-快速打开cmd"><a href="#Terminal-快速打开cmd" class="headerlink" title="Terminal 快速打开cmd"></a>Terminal 快速打开cmd</h3><p>在编程过程中，我们经常需要使用到命令行窗口<br>Terminal插件可以允许在Sublime Text 3中打开cmd命令窗口<br>安装好该插件后</p>
<p>即可使用快捷键<code>Ctrl</code>+<code>Shift</code>+<code>T</code>呼出命令行窗口</p>
<h3 id="JsFormat-js代码格式化工具"><a href="#JsFormat-js代码格式化工具" class="headerlink" title="JsFormat js代码格式化工具"></a>JsFormat js代码格式化工具</h3><p>同样使用Package Control安装JsFormat插件后</p>
<p>即可在JS文件中通过鼠标右键-&gt;JsFormat<br>或键盘快捷键<code>Ctrl</code>+<code>Alt</code>+<code>F</code>对JS进行格式化</p>
<h3 id="Doc​Blockr-注释生成插件"><a href="#Doc​Blockr-注释生成插件" class="headerlink" title="Doc​Blockr 注释生成插件"></a>Doc​Blockr 注释生成插件</h3><h3 id="SublimeLinter-代码校验"><a href="#SublimeLinter-代码校验" class="headerlink" title="SublimeLinter 代码校验"></a>SublimeLinter 代码校验</h3><h3 id="ESLint-formatter-代码格式化工具"><a href="#ESLint-formatter-代码格式化工具" class="headerlink" title="ESLint formatter 代码格式化工具"></a>ESLint formatter 代码格式化工具</h3><h2 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h2><h3 id="打开浏览器-快速预览"><a href="#打开浏览器-快速预览" class="headerlink" title="打开浏览器 快速预览"></a>打开浏览器 快速预览</h3><p>点击 菜单上的 <code>Preferences</code> &gt; <code>Key Bindings</code></p>
<p>会打开两个窗口，在user窗口上加入以下代码即可</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"></div><div class="line"><span class="comment">//firebox</span></div><div class="line">  &#123;</div><div class="line">    <span class="comment">// 设置打开firefox的的快捷键</span></div><div class="line">    <span class="string">"keys"</span>: [<span class="string">"f1"</span>],</div><div class="line">    <span class="string">"command"</span>: <span class="string">"side_bar_files_open_with"</span>,</div><div class="line">    <span class="string">"args"</span>: &#123;</div><div class="line">      <span class="string">"paths"</span>: [],</div><div class="line">      <span class="comment">// .exe的位置</span></div><div class="line">      <span class="string">"application"</span>: <span class="string">"D:\\一键安装\\Mozilla Firefox\\firefox.exe"</span>,</div><div class="line">      <span class="string">"extensions"</span>: <span class="string">".*"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line"><span class="comment">//360</span></div><div class="line">  &#123;</div><div class="line">    <span class="string">"keys"</span>: [<span class="string">"f10"</span>],</div><div class="line">    <span class="string">"command"</span>: <span class="string">"side_bar_files_open_with"</span>,</div><div class="line">    <span class="string">"args"</span>: &#123;</div><div class="line">      <span class="string">"paths"</span>: [],</div><div class="line">      <span class="string">"application"</span>: <span class="string">"C:\\Users\\acer\\AppData\\Roaming\\360se6\\Application\\360se.exe"</span>,</div><div class="line">      <span class="string">"extensions"</span>: <span class="string">".*"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line"><span class="comment">//chrome</span></div><div class="line">  &#123;</div><div class="line">    <span class="string">"keys"</span>: [<span class="string">"f2"</span>],</div><div class="line">    <span class="string">"command"</span>: <span class="string">"side_bar_files_open_with"</span>,</div><div class="line">    <span class="string">"args"</span>: &#123;</div><div class="line">      <span class="string">"paths"</span>: [],</div><div class="line">      <span class="string">"application"</span>: <span class="string">"C:\\Users\\acer\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe"</span>,</div><div class="line">      <span class="string">"extensions"</span>: <span class="string">".*"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="设置页面缩进"><a href="#设置页面缩进" class="headerlink" title="设置页面缩进"></a>设置页面缩进</h3><ol>
<li>菜单栏里点击 Preferences-&gt; Setting-User</li>
<li><p>在弹出来的文本里，添加如下两行:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // 注意只有一个大括号，如果之前有属性，如在之前的属性前确保有 ，(逗号)</div><div class="line">  "tab_size": 2,</div><div class="line">  "translate_tabs_to_spaces": true,</div><div class="line">  //若要在保存时自动把tab 转换成空格，请把下面一行设置成 true，如不需要: 设置成 false</div><div class="line">  "expand_tabs_on_save": true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>至此，配置完成了。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js原型链探究]]></title>
      <url>http://emloxe.github.io/2017/04/07/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%8E%A2%E7%A9%B6/</url>
      <content type="html"><![CDATA[<p>js原型链学习</p>
<a id="more"></a>
<h2 id="原型链传递"><a href="#原型链传递" class="headerlink" title="原型链传递"></a>原型链传递</h2><p>定义代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">a.prototype.isa = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'a'</span>);&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">b.prototype = <span class="keyword">new</span> a();</div><div class="line">b.prototype.isb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'b'</span>);&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">c.prototype = <span class="keyword">new</span> b();</div><div class="line">c.prototype.isc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'c'</span>);&#125;</div></pre></td></tr></table></figure></p>
<p>原型链将c,b,a联系在了一起<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> c();</div><div class="line">d.isc()  <span class="comment">// 'c'</span></div><div class="line">d.isb()  <span class="comment">// 'b'</span></div><div class="line">d.isa()  <span class="comment">// 'a'</span></div></pre></td></tr></table></figure></p>
<p>d返回的是this，是一个引用(详见我的另一篇文章 js’=’复制还是引用)<br>在这里对原来原型链上的方法改变都会产生影响<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a.prototype.isa = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'change a'</span>);&#125;</div><div class="line">d.isa()  <span class="comment">// 'change a'</span></div></pre></td></tr></table></figure></p>
<p>原型链上会存在覆盖现象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">c.prototype.isa = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'c a'</span>);&#125;</div><div class="line">d.isa()  <span class="comment">// 'c a'</span></div></pre></td></tr></table></figure></p>
<p>c原型链上的<code>isa</code>覆盖了a上的<code>isa</code></p>
<p>原型链上的方法可以调用任意在原型链上的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a.prototype.getIsc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.isc()&#125;</div><div class="line">c.prototype.getIsa = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.isa()&#125;</div><div class="line">d.getIsc()  <span class="comment">// 'c'</span></div><div class="line">d.getIsa()  <span class="comment">// 'c a'  代码是依次执行的，这里存在覆盖，c原型链上的`isa`覆盖了a上的`isa`</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js'='的作用]]></title>
      <url>http://emloxe.github.io/2017/03/24/js'='%E5%A4%8D%E5%88%B6%E8%BF%98%E6%98%AF%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>js中’=’是按值传递还是引用？<br><a id="more"></a></p>
<h2 id="基本类型中“-”"><a href="#基本类型中“-”" class="headerlink" title="基本类型中“=”"></a>基本类型中“=”</h2><p>“=”右边为基本类型<br>基本类型有</p>
<ul>
<li>Undefined</li>
<li>Null</li>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Symbol</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 1 1</span></div></pre></td></tr></table></figure>
<p>将基本类型[Number]赋值给a，a又赋值给b，实际上在a、b变量都会创建新的值，a、b之间不会相互影响<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(a, b);  <span class="comment">// 2 1</span></div><div class="line">b = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(a, b);  <span class="comment">// 2 3</span></div></pre></td></tr></table></figure></p>
<h2 id="引用类型中“-”"><a href="#引用类型中“-”" class="headerlink" title="引用类型中“=”"></a>引用类型中“=”</h2><p>“=”右边为引用类型</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">c</span>: <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line"><span class="built_in">console</span>.log(a.c, b.c); <span class="comment">// 1 1</span></div></pre></td></tr></table></figure>
<p>将引用类型[Object]赋值给a，a又赋值给b，实际上在a、b变量都会创建一个对对象{c: 1}的指针，a、b任何一个改变{c: 1}的值，a、b之间都会改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a.c = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(a.c, b.c);  <span class="comment">// 2 2</span></div><div class="line">b.c = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(a.c, b.c);  <span class="comment">// 3 3</span></div></pre></td></tr></table></figure></p>
<p>注意：只有拥有相同的指针才会相互影响</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">c</span>: <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">var</span> b = a;  <span class="comment">// a、b拥有相同的指针</span></div><div class="line"><span class="built_in">console</span>.log(a.c, b.c); <span class="comment">// 1 1</span></div><div class="line"></div><div class="line"><span class="comment">// a重新赋值，也就是a的指针发生了改变，b的指针未变，这时a、b不会相互影响了</span></div><div class="line">a = &#123;<span class="attr">c</span>: <span class="number">2</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(a.c, b.c);  <span class="comment">// 2 1</span></div><div class="line">b.c = <span class="number">5</span>;</div><div class="line"><span class="built_in">console</span>.log(a.c, b.c);  <span class="comment">// 2 5</span></div></pre></td></tr></table></figure>
<h2 id="深复制与浅复制"><a href="#深复制与浅复制" class="headerlink" title="深复制与浅复制"></a>深复制与浅复制</h2><p>以上可以知道对象=对象，实际上是指向同一个指针，任何对对象的操作都会相互影响</p>
<h3 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h3><p>浅复制只复制第一层对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shadowCopy</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> dst = &#123;&#125;;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> src) &#123;</div><div class="line">    <span class="keyword">if</span> (src.hasOwnProperty(prop)) &#123;</div><div class="line">      dst[prop] = src[prop];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> dst;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果某一个key下的value是基本类型，那么改变返回的对象后不会影响原对象的值，如果是引用类型的话，实际就是一个指针，其实还是会相互影响的。</p>
<p>还可以采用ES6方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.assign(&#123;&#125;, src)</div></pre></td></tr></table></figure></p>
<h3 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h3><p>如果想复制一个对象，并且操作不会对原来对原对象产生影响就要杜绝赋值的是对象，需要进行递归复制所有的层级</p>
<p>简单的深复制<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">b = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(a) )</div><div class="line"><span class="comment">// 原理</span></div><div class="line"><span class="comment">// 将对象a转换为字符串，再解析为对象</span></div></pre></td></tr></table></figure></p>
<p>局限性</p>
<ul>
<li>无法复制函数</li>
<li>原型链没了，对象就是object，所属的类没了。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/23031215/answer/46220227" target="_blank" rel="external">javascript中的深拷贝和浅拷贝？</a></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[canvas基本操作]]></title>
      <url>http://emloxe.github.io/2017/03/23/canvas%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>canvas基本操作的学习</p>
<a id="more"></a>
<h2 id="画布创建"><a href="#画布创建" class="headerlink" title="画布创建"></a>画布创建</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"100"</span></span></div><div class="line"><span class="attr">style</span>=<span class="string">"border:1px solid #000000;"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">'myCanvas'</span>);</div><div class="line">  <span class="keyword">var</span> ctx = c.getContext(<span class="string">'2d'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h2><h3 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.lineWidth = <span class="number">1</span>;  <span class="comment">// 线条宽度</span></div><div class="line">ctx.lineCap = <span class="string">'butt'</span>;  <span class="comment">// 边缘样式(线的开始点和结束点)，其他属性值还有"round" 圆角，"square" 方角</span></div><div class="line">ctx.lineJoin = <span class="string">'miter'</span>;  <span class="comment">// 线条的连接样式，其他属性值还有'round','bevel'</span></div><div class="line">ctx.strokeStyle=<span class="string">"#FF0000"</span>; <span class="comment">// 线条颜色</span></div><div class="line">ctx.moveTo(<span class="number">0</span>, <span class="number">0</span>);  <span class="comment">// 起始点，移动画笔到(0, 0)</span></div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">100</span>);  <span class="comment">// 终点</span></div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>画虚线<br>我们之前用moveTo, lineTo画的都是实线，canvas为我们提供了setLineDash()方法，它可以用来画虚线:</p>
<p>用法：</p>
<p>cxt.setLineDash( 数组 )</p>
<p>参数中这个数组，是由实线和空白组合合成，如：</p>
<p><code>[ 20, 5 ]</code>: 20px 实线，5px空白</p>
<p><code>[ 20, 5, 10, 5]</code>: 20px实线，5px空白, 10px实线, 5px空白</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">5</span>;</div><div class="line">ctx.strokeStyle = <span class="string">'#09f'</span>;</div><div class="line">ctx.beginPath();</div><div class="line">ctx.setLineDash( [ <span class="number">10</span>, <span class="number">5</span> ] );</div><div class="line">ctx.moveTo( <span class="number">100</span>, <span class="number">100</span> );</div><div class="line">ctx.lineTo( <span class="number">600</span>, <span class="number">100</span> );</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.setLineDash( [ <span class="number">20</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span> ] );</div><div class="line">ctx.moveTo( <span class="number">100</span>, <span class="number">150</span> );</div><div class="line">ctx.lineTo( <span class="number">600</span>, <span class="number">150</span> );</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.setLineDash( [ <span class="number">40</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">1</span> ] );</div><div class="line">ctx.moveTo( <span class="number">100</span>, <span class="number">200</span> );</div><div class="line">ctx.lineTo( <span class="number">600</span>, <span class="number">200</span> );</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p><img src="/images/2017032307.png" alt="images"></p>
<h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ctx.strokeStyle=<span class="string">"#FF0000"</span>; <span class="comment">// 线条颜色</span></div><div class="line">ctx.fillStyle=<span class="string">"#00FF00"</span>; <span class="comment">// 填充颜色</span></div><div class="line">ctx.rect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">150</span>, <span class="number">100</span>); <span class="comment">// 以(20, 20)为起点绘制宽高为(150, 100)的矩形</span></div><div class="line">ctx.stroke();</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<h3 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h3><p>arc(x, y, r, start, stop)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">95</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI);</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul>
<li>font - 定义字体</li>
<li>ctx.textAlign = “start”;  // 绘制的形式</li>
<li>ctx.textBaseline = “bottom”;  // 当前文本基线</li>
<li>ctx.fillText(text, x, y, width) - 在 canvas 上绘制实心的文本</li>
<li>ctx.strokeText(text, x, y, width) - 在 canvas 上绘制空心的文本</li>
<li></li>
</ul>
<p>width为绘制的宽度，当绘制内容大于width时，内容会被压缩，小于width值时，按原来的比例正常显示<br>注意x,y定义的是绘制的起点，默认textAlign为start，但并不是指文本的左上角位置而是左下角</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.font=<span class="string">"30px Arial"</span>;  <span class="comment">// 字号 字体</span></div><div class="line">ctx.fillText(<span class="string">"Hello World"</span>, <span class="number">20</span>, <span class="number">50</span>);  <span class="comment">// 内容 起始位置</span></div></pre></td></tr></table></figure>
<p><img src="/images/2017032301.jpg" alt="images"></p>
<p>textAlign值还有start，end，left，center，right<br><a href="https://emloxe.github.io/e-test/2017032301.html">textAlign展示请点击此处</a></p>
<p>textBaseline</p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">alphabetic</td>
<td style="text-align:left">默认。文本基线是普通的字母基线。</td>
</tr>
<tr>
<td style="text-align:left">top</td>
<td style="text-align:left">文本基线是 em 方框的顶端。</td>
</tr>
<tr>
<td style="text-align:left">hanging</td>
<td style="text-align:left">文本基线是悬挂基线。</td>
</tr>
<tr>
<td style="text-align:left">middle</td>
<td style="text-align:left">文本基线是 em 方框的正中。</td>
</tr>
<tr>
<td style="text-align:left">ideographic</td>
<td style="text-align:left">文本基线是表意基线。</td>
</tr>
<tr>
<td style="text-align:left">bottom</td>
<td style="text-align:left">文本基线是 em 方框的底端。</td>
</tr>
</tbody>
</table>
<p><img src="/images/2017032306.png" alt="images"></p>
<h3 id="整体设置透明度"><a href="#整体设置透明度" class="headerlink" title="整体设置透明度"></a>整体设置透明度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.globalAlpha = 0.5;</div></pre></td></tr></table></figure>
<h2 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a>渐变色</h2><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>坐标点（x0,y0）是起点 ，（x1,y1）是终点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 创建渐变</div><div class="line">var grd=ctx.createLinearGradient(x0,y0,x1,y1);</div><div class="line">grd.addColorStop(0,&quot;red&quot;);</div><div class="line">grd.addColorStop(1,&quot;white&quot;);</div></pre></td></tr></table></figure></p>
<h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 创建渐变</div><div class="line">var grd=ctx.createRadialGradient(x0,y0,r0,x1,y1,r1);</div><div class="line">grd.addColorStop(0,&quot;red&quot;);</div><div class="line">grd.addColorStop(1,&quot;white&quot;);</div></pre></td></tr></table></figure>
<h2 id="清除画布"><a href="#清除画布" class="headerlink" title="清除画布"></a>清除画布</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.clearRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">50</span>);  <span class="comment">// 以(20, 20)为起点清除宽高为(100, 50)的矩形</span></div></pre></td></tr></table></figure>
<h2 id="其他方法属性"><a href="#其他方法属性" class="headerlink" title="其他方法属性"></a>其他方法属性</h2><h3 id="获取文本在canvas画布上的长度"><a href="#获取文本在canvas画布上的长度" class="headerlink" title="获取文本在canvas画布上的长度"></a>获取文本在canvas画布上的长度</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.measureText(<span class="string">'hello world'</span>).width</div></pre></td></tr></table></figure>
<p>实际上 <code>ctx.measureText(&#39;hello world&#39;).width</code>获取的是近似值<br><a href="https://emloxe.github.io/e-test/2017032302.html">效果查看</a></p>
<h3 id="beginPath-和closePath"><a href="#beginPath-和closePath" class="headerlink" title="beginPath()和closePath()"></a>beginPath()和closePath()</h3><h4 id="beginPath"><a href="#beginPath" class="headerlink" title="beginPath()"></a>beginPath()</h4><p>方法开始一条路径，或重置当前的路径</p>
<p>如下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</div><div class="line"><span class="keyword">var</span> ctx=c.getContext(<span class="string">"2d"</span>);</div><div class="line"><span class="comment">//第一条线            </span></div><div class="line">ctx.lineWidth=<span class="string">"5"</span>;</div><div class="line">ctx.strokeStyle=<span class="string">"green"</span>;  <span class="comment">// 绿色路径</span></div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">75</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">75</span>);</div><div class="line">ctx.stroke();   </div><div class="line"><span class="comment">// 第二条线</span></div><div class="line">ctx.strokeStyle=<span class="string">"purple"</span>;  <span class="comment">// 紫色的路径</span></div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">100</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">100</span>);            </div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure></p>
<p>会画出如下的图<br><img src="/images/2017032302.jpg" alt="images"><br>并不是一条绿色一条紫色的线<br><code>ctx.strokeStyle=&quot;purple&quot;</code>覆盖了<code>ctx.strokeStyle=&quot;green&quot;</code></p>
<p>这里就需要用beginPath()了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一条线            </span></div><div class="line">ctx.lineWidth=<span class="string">"5"</span>;</div><div class="line">ctx.strokeStyle=<span class="string">"green"</span>;  <span class="comment">// 绿色路径</span></div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">75</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">75</span>);</div><div class="line">ctx.stroke();   </div><div class="line"><span class="comment">// 第二条线</span></div><div class="line">ctx.beginPath()</div><div class="line">ctx.strokeStyle=<span class="string">"purple"</span>;  <span class="comment">// 紫色的路径</span></div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">100</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">100</span>);            </div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure></p>
<p>会画出如下的图<br><img src="/images/2017032303.jpg" alt="images"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一条线            </span></div><div class="line">ctx.lineWidth=<span class="string">"5"</span>;</div><div class="line">ctx.strokeStyle=<span class="string">"green"</span>;  <span class="comment">// 绿色路径</span></div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">75</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">75</span>);</div><div class="line">ctx.stroke();   </div><div class="line"><span class="comment">// 第二条线</span></div><div class="line">ctx.strokeStyle=<span class="string">"purple"</span>;  <span class="comment">// 紫色的路径  ！！注意这句话在 ctx.beginPath()上面</span></div><div class="line">ctx.beginPath()</div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">100</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">100</span>);            </div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>会画出同样的图？？并且第一条线是绿色的<br><img src="/images/2017032303.jpg" alt="images"></p>
<p>再次改造代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一条线            </span></div><div class="line">ctx.lineWidth=<span class="string">"5"</span>;</div><div class="line">ctx.strokeStyle=<span class="string">"green"</span>;  <span class="comment">// 绿色路径</span></div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">75</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">75</span>);</div><div class="line">ctx.strokeStyle=<span class="string">"blue"</span>;  <span class="comment">// 蓝色</span></div><div class="line">ctx.stroke();   </div><div class="line"><span class="comment">// 第二条线</span></div><div class="line">ctx.strokeStyle=<span class="string">"purple"</span>;  <span class="comment">// 紫色的路径  ++++注意这句话在 ctx.beginPath()上面</span></div><div class="line">ctx.beginPath()</div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">100</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">100</span>);            </div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.lineWidth=<span class="string">"5"</span>;</div><div class="line">ctx.strokeStyle=<span class="string">"green"</span>;  <span class="comment">// 绿色</span></div><div class="line">ctx.strokeStyle=<span class="string">"blue"</span>;  <span class="comment">// 蓝色</span></div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">75</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">75</span>);</div><div class="line">ctx.strokeStyle=<span class="string">"red"</span>;  <span class="comment">// 红色</span></div><div class="line">ctx.stroke();   </div><div class="line"><span class="comment">// 第二条线</span></div><div class="line">ctx.strokeStyle=<span class="string">"purple"</span>;  <span class="comment">// 紫色</span></div><div class="line">ctx.beginPath();  </div><div class="line">ctx.strokeStyle=<span class="string">"yellow"</span>;  <span class="comment">// 黄色</span></div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">100</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">100</span>);            </div><div class="line">ctx.stroke(); </div><div class="line">ctx.strokeStyle=<span class="string">"black"</span>;  <span class="comment">// 黑色</span></div></pre></td></tr></table></figure>
<p><img src="/images/2017032305.jpg" alt="images"></p>
<h4 id="closePath"><a href="#closePath" class="headerlink" title="closePath()"></a>closePath()</h4>]]></content>
      
        <categories>
            
            <category> canvas </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html5 </tag>
            
            <tag> canvas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据处理总结]]></title>
      <url>http://emloxe.github.io/2017/03/23/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>项目中常遇到的数据需要处理，总结如下</p>
<a id="more"></a>
<h2 id="精度处理"><a href="#精度处理" class="headerlink" title="精度处理"></a>精度处理</h2><p>js计算小数会有很严重精度问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0.1 + 0.05  // 0.15000000000000002</div></pre></td></tr></table></figure></p>
<p>可以先扩大到整数再缩小回小数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(0.1*100+0.05*100)/100 // 0.15</div></pre></td></tr></table></figure></p>
<h2 id="二维数组的转置"><a href="#二维数组的转置" class="headerlink" title="二维数组的转置"></a>二维数组的转置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [2, 7, 8, 3],</div><div class="line">  [4, 5, 6, 1]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>转置为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [2, 4],</div><div class="line">  [7, 5],</div><div class="line">  [8, 6],</div><div class="line">  [3, 1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> newArr = [];</div><div class="line"></div><div class="line">  <span class="comment">// 创建二维数组</span></div><div class="line">  <span class="keyword">var</span> len = arr[<span class="number">0</span>].length;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">    newArr[i] = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>, len2 = arr.length; j &lt; len2; j++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; len; k++)&#123;</div><div class="line">      newArr[k][j] = arr[j][k];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="二维数据的累加"><a href="#二维数据的累加" class="headerlink" title="二维数据的累加"></a>二维数据的累加</h2><h3 id="金字塔堆积数据"><a href="#金字塔堆积数据" class="headerlink" title="金字塔堆积数据"></a>金字塔堆积数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var series = [</div><div class="line">  [3, 2, 5, 3],</div><div class="line">  [3, 4, 4, 2],</div><div class="line">  [5, 2, 5, 4]</div><div class="line">]</div></pre></td></tr></table></figure>
<p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [3, 2, 5, 3],</div><div class="line">  [6, 6, 9, 5],</div><div class="line">  [11, 8, 14, 9]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">spData</span>(<span class="params">series</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> cloneData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(series));  <span class="comment">// 克隆一个对象 </span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> len = cloneData.length;</div><div class="line">  <span class="keyword">var</span> len2 = cloneData[<span class="number">0</span>].length;  <span class="comment">// 应保证 每一行的数据长度相同，这里默认为数据格式正确</span></div><div class="line"></div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = series.length - <span class="number">1</span>; i &lt; len; i++) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len2; j++) &#123;</div><div class="line"></div><div class="line">      cloneData[i+<span class="number">1</span>][j] = cloneData[i][j] + cloneData[i+<span class="number">1</span>][j]</div><div class="line">    &#125; </div><div class="line"></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cloneData;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="倒金字塔堆积数据"><a href="#倒金字塔堆积数据" class="headerlink" title="倒金字塔堆积数据"></a>倒金字塔堆积数据</h3><p>例如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [</div><div class="line">  [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>],</div><div class="line">  [<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>],</div><div class="line">  [<span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>需要改变数据的结构为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newArr = [</div><div class="line">  [<span class="number">11</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">9</span>],</div><div class="line">  [<span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">6</span>],</div><div class="line">  [<span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>即newArr[0] 为arr[0]+arr[1]+arr[2]<br>即newArr[1] 为arr[1]+arr[2]<br>即newArr[2] 为arr[2]</p>
<p>代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * [spData description]</div><div class="line"> * @param  &#123;数组&#125; series 二维数组对象</div><div class="line"> * @return &#123;数组&#125;        返回新创建二维数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">spData</span>(<span class="params">series</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> newData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(series));  <span class="comment">// 克隆一个对象 </span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> len = series.length - <span class="number">1</span>, i = len; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="keyword">if</span> (i == len) &#123;</div><div class="line">      arr = series[len];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> arrPre = series[i<span class="number">-1</span>];</div><div class="line">    <span class="keyword">var</span> sArr = [];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, lenj = arr.length; j &lt; lenj; j++) &#123;</div><div class="line">       sArr.push(arr[j]+arrPre[j]);</div><div class="line">    &#125; </div><div class="line">    newData[i<span class="number">-1</span>] = sArr;</div><div class="line">    arr = sArr; </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> newData;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 以下方法更好</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">spData1</span>(<span class="params">series</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> cloneData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(series));  <span class="comment">// 克隆一个对象 </span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> len = cloneData.length;</div><div class="line">  <span class="keyword">var</span> len2 = cloneData[<span class="number">0</span>].length;  <span class="comment">// 应保证 每一行的数据长度相同，这里默认为数据格式正确</span></div><div class="line"></div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = series.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len2; j++) &#123;</div><div class="line"></div><div class="line">      cloneData[i<span class="number">-1</span>][j] = cloneData[i][j] + cloneData[i<span class="number">-1</span>][j]</div><div class="line">    &#125; </div><div class="line"></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cloneData;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="获取对象的长度"><a href="#获取对象的长度" class="headerlink" title="获取对象的长度"></a>获取对象的长度</h2><p>Object.length没有length属性<br>可以用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</div><div class="line">  <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</div><div class="line">    i++</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法过于麻烦<br>ES5提供了Object.keys()方法，方法返回对象所有可枚举属性的字符串数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'zhangsan'</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">12</span>,</div><div class="line">  <span class="attr">sex</span>: <span class="string">'male'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.keys(obj); <span class="comment">// ['name', 'age', 'sex'];</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Person.prototype.name = <span class="string">'zhangsan'</span>;</div><div class="line">Person.prototype.age = <span class="string">'18'</span>;</div><div class="line">Person.prototype.job = <span class="string">'Software Engineer'</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="built_in">Object</span>.keys(Person.prototype);  <span class="comment">// ['name', 'age', 'job', 'sayName']</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</div><div class="line">p1.name = <span class="string">'Nicholas'</span>;</div><div class="line"><span class="built_in">Object</span>.keys(p1)  <span class="comment">// ['name']</span></div></pre></td></tr></table></figure>
<p>转换成为数组就很好计算长度了 Object.keys(obj).length</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[requireJS学习笔记]]></title>
      <url>http://emloxe.github.io/2017/03/17/requireJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>requirejs.config()<br>require()<br>define()</p>
<h3 id="html中引入"><a href="#html中引入" class="headerlink" title="html中引入"></a>html中引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 入口js文件为main.js --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span> <span class="attr">data-main</span>=<span class="string">"main.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="定义入口js文件"><a href="#定义入口js文件" class="headerlink" title="定义入口js文件"></a>定义入口js文件</h3><p>main.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">requirejs.config(&#123;</div><div class="line">  <span class="comment">// 简化名称</span></div><div class="line"></div><div class="line">  path: &#123;</div><div class="line">    <span class="attr">jquery</span>: <span class="string">'jquery-1.11.3.min'</span> </div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 加载模块</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>, <span class="string">'validate'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$, v</span>)</span>&#123;</div><div class="line">  </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h3><p>当模块不依赖于其他模块时，可用define来进行定义模块<br>define有两种模式</p>
<ol>
<li><p>函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">add</span>: add</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>json</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(&#123;</div><div class="line">  </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> requireJS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js模块加载框架 </tag>
            
            <tag> requireJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack快速搭建]]></title>
      <url>http://emloxe.github.io/2017/03/15/webpack%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>快速用webpack搭建项目</p>
<a id="more"></a>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>npm需要提前安装好</p>
<h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><blockquote>
<p>>npm init</p>
</blockquote>
<p>会自动生成  package.json</p>
<h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><p>全局安装</p>
<blockquote>
<p>>npm install webpack -g</p>
</blockquote>
<p>然后安装到项目依赖中</p>
<blockquote>
<p>>npm install webpack –save-dev</p>
</blockquote>
<p>安装好后，就可以用webpack打包文件了</p>
<blockquote>
<p>>webpack  index.js  index.bundle.js</p>
</blockquote>
<p>index.js 要打包的文件，事先编好<br>index.bundle.js 要生成的打包好的文件，命其名</p>
<h2 id="结构目录"><a href="#结构目录" class="headerlink" title="结构目录"></a>结构目录</h2><p>创建大概的结构目录</p>
<pre style="background: #efefef; color: #333;">
src 源文件
  script
    coffeeScript
    typeScript
    js
  style
    less
    sass
    css
dist 静态资源文件
  js
  css  
</pre>

<h2 id="webpack配置文件"><a href="#webpack配置文件" class="headerlink" title="webpack配置文件"></a>webpack配置文件</h2><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><p>默认定义的配置文件名为<br>webpack.config.js</p>
<p>如果配置文件名称不想用这个改为 eg：webpack.dev.config.js<br>可在运行时<code>webpack ---config webpack.dev.config.js</code></p>
<p>每次这样写会有点麻烦<br>可以在package.json中,scripts下加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;webpack&quot;: &quot;webpack --config webpack.dev.config.js&quot;</div></pre></td></tr></table></figure></p>
<p>–config除此之外 还可以有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 当项目逐渐变大，webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度、颜色、模块、打包模块的名称</div><div class="line">$ webpack --progress --colors  -- display-modules  --display-reasons</div><div class="line">// 如果不想每次修改模块后都重新编译，那么可以启动监听模式。</div><div class="line">// 开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的</div><div class="line">$ webpack --progress --colors --watch</div></pre></td></tr></table></figure></p>
<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports&#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/script/index.js'</span>,   <span class="comment">// 打包入口文件</span></div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'./dist/js'</span>,   <span class="comment">// 打包好的文件放在。。</span></div><div class="line">    filename: <span class="string">'bundle.js'</span>   <span class="comment">// 打包好的文件名叫什么，指定name会将所有的js文件打包到该名称下，最好写为`[name].js`</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="entry-打包入口"><a href="#entry-打包入口" class="headerlink" title="entry 打包入口"></a>entry 打包入口</h4><p>如果有多个入口<br>entry 的值除了可以写成 字符串<br>还可以写成数组，对象。共有3种方式</p>
<ol>
<li>字符串<br>entry: ‘./src/script/index.js’</li>
<li>数组<br>entry: [‘./src/script/index.js’,  entry: ‘./src/script/list.js’]</li>
<li>对象<br>entry: {<br>‘page1’: ‘./src/script/index.js’,<br>‘page2’: entry: ‘./src/script/list.js’<br>}</li>
</ol>
<h4 id="output-输出"><a href="#output-输出" class="headerlink" title="output 输出"></a>output 输出</h4><p>output: {<br>  filename: ‘/js[name].js’,<br>  path: ‘./dist’    // 输出路径<br>}</p>
<p>name指代entry中的key即<br>生成的两个js文件 page1.js page2.js</p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul>
<li><p>filename除了[name]变量还有 [hash]、[chunkhash]</p>
<p>[name]表示打包前名称<br>[hash]表示当次打包的hash值，此次打包所有的文件hash一致<br>[chunkhash]相当于对文件的MD5加密，文件不进行修改chunkhash就不会变</p>
</li>
<li><p>output: {<br> publicPath: ‘<a href="http://emloxe.github.io">http://emloxe.github.io</a>‘<br>}<br>将script中src变为绝对定位</p>
</li>
</ul>
<h2 id="自动生成html"><a href="#自动生成html" class="headerlink" title="自动生成html"></a>自动生成html</h2><h3 id="安装html-webpack-plugin"><a href="#安装html-webpack-plugin" class="headerlink" title="安装html-webpack-plugin"></a>安装html-webpack-plugin</h3><blockquote>
<p>>npm install html-webpack-plugin –save-dev</p>
</blockquote>
<p>修改webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 建立对插件的引用</span></div><div class="line"><span class="keyword">var</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'main.html'</span>,</div><div class="line">      <span class="attr">template</span>: <span class="string">'index.html'</span>,    <span class="comment">// 指定模板的位置</span></div><div class="line">      title: <span class="string">'this is main'</span>,    <span class="comment">// 在模板中传递参数，模板中采用 (&lt;%= htmlWebpackPlugin.option.titlt %&gt; )取到（这里使用的是ejs语法）</span></div><div class="line">                                <span class="comment">//title作为一个参数传递，任何名称都可以</span></div><div class="line">      inject: <span class="string">'head'</span>,   <span class="comment">// 生成的js引入在main的'head'</span></div><div class="line">                        <span class="comment">//传入false则不引入生成的js,可以在html中写&lt;script src="&lt;%= htmlWebpackPlugin.files.chunks.main.entry"&gt;&lt;/script&gt; 这样也可以获取到main.js 的文件</span></div><div class="line">      minify: &#123;     <span class="comment">// 压缩</span></div><div class="line">        removeComments: <span class="literal">true</span>,    <span class="comment">// 删除注释</span></div><div class="line">        collapseInlineTagWhitespace: <span class="literal">true</span>     <span class="comment">// 删除空格</span></div><div class="line">      &#125;   </div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="多页面应用处理html"><a href="#多页面应用处理html" class="headerlink" title="多页面应用处理html"></a>多页面应用处理html</h3><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">main</span>: <span class="string">'src/script/main.js'</span>,</div><div class="line">    <span class="attr">a</span>: <span class="string">'src/script/a.js'</span>,</div><div class="line">    <span class="attr">b</span>: <span class="string">'src/script/b.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'./dist'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'js/[name].js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'main.html'</span>,</div><div class="line">      <span class="attr">template</span>: <span class="string">'index.html'</span>,</div><div class="line">      <span class="attr">title</span>: <span class="string">'this is main'</span>,</div><div class="line">      <span class="attr">inject</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">chunks</span>: [<span class="string">'main'</span>]    <span class="comment">// 需要哪个就写哪个</span></div><div class="line">      excludeChunks: [<span class="string">'a'</span>, <span class="string">'b'</span>]    <span class="comment">// 除了哪些不引用，和chunks不同时使用     </span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'a.html'</span>,</div><div class="line">      <span class="attr">template</span>: <span class="string">'index.html'</span>,</div><div class="line">      <span class="attr">title</span>: <span class="string">'this is a'</span>,</div><div class="line">      <span class="attr">inject</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">chunks</span>: [<span class="string">'main'</span>, <span class="string">'a'</span>]</div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'b.html'</span>,</div><div class="line">      <span class="attr">template</span>: <span class="string">'index.html'</span>,</div><div class="line">      <span class="attr">title</span>: <span class="string">'this is b'</span>,</div><div class="line">      <span class="attr">inject</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">chunks</span>: [<span class="string">'main'</span>, <span class="string">'b'</span>]</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将js直接放在html中<br>可以直接在模板文件中填写<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">compilation.assets</span>[<span class="attr">htmlWebpackPlugin.files.chunks.main.entry.substr</span>(<span class="attr">htmlWebpackPlugin.files.publicPath.lenght</span>)]<span class="attr">.source</span>() %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="处理项目资源文件"><a href="#处理项目资源文件" class="headerlink" title="处理项目资源文件"></a>处理项目资源文件</h2><h3 id="处理es6"><a href="#处理es6" class="headerlink" title="处理es6"></a>处理es6</h3><p>安装babel-loader</p>
<blockquote>
<p>>npm install –save-dev babel-loader babel-core</p>
</blockquote>
<p>编辑配置webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,    <span class="comment">// 匹配js文件</span></div><div class="line">        loader: <span class="string">'babel-loader'</span>,</div><div class="line">        <span class="attr">exclude</span>: [    <span class="comment">// loader排除范围</span></div><div class="line">          path.resolve(__dirname, <span class="string">'node_modules'</span>)</div><div class="line">        ],   </div><div class="line">        <span class="attr">include</span>: [   <span class="comment">// loader处理范围，加上这个参数，打包速度回快很多</span></div><div class="line">          path.resolve(__dirname, <span class="string">'app/src'</span>)</div><div class="line">        ],    </div><div class="line">        <span class="attr">query</span>: &#123;</div><div class="line">          <span class="attr">presets</span>: [<span class="string">'latest '</span>]   <span class="comment">// 指定版本</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="处理css预处理语言"><a href="#处理css预处理语言" class="headerlink" title="处理css预处理语言"></a>处理css预处理语言</h3><p>编辑配置webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,    <span class="comment">// 匹配css文件</span></div><div class="line">        loader: <span class="string">'style-loader!css-loader?importLoaders=1!postcss-loader'</span>,  <span class="comment">// postercss-loader对less文件进行转义，style-loader将在html页面中添加style标签</span></div><div class="line">                          <span class="comment">// importLoaders=1 在css文件中import引用的css 进行postcss-loader处理</span></div><div class="line">        exclude: [    <span class="comment">// loader排除范围</span></div><div class="line">          path.resolve(__dirname, <span class="string">'node_modules'</span>)</div><div class="line">        ],   </div><div class="line">        <span class="attr">include</span>: [   <span class="comment">// loader处理范围，加上这个参数，打包速度回快很多</span></div><div class="line">          path.resolve(__dirname, <span class="string">'app/src'</span>)</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">postcss</span>: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;    <span class="comment">// 浏览器加前缀</span></div><div class="line">     <span class="comment">/*...options*/</span></div><div class="line">      broswers: [<span class="string">'last 5 versions'</span>]</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>postcss-loader<br>对css3语法的自动转化</li>
</ul>
<h4 id="处理less、sass"><a href="#处理less、sass" class="headerlink" title="处理less、sass"></a>处理less、sass</h4><blockquote>
<p>> npm install less-laoder –save-dev<br>> npm install sass-laoder –save-dev</p>
</blockquote>
<p>编辑配置webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,    </div><div class="line">        <span class="attr">loader</span>: <span class="string">'style-loader!css-loader?importLoaders=1!postcss-loader'</span>  </div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,    <span class="comment">// 匹配less文件</span></div><div class="line">        loader: <span class="string">'style!css!postcss!less'</span>   <span class="comment">// style-loader简化为了style</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,    <span class="comment">// 匹配sass文件</span></div><div class="line">        loader: <span class="string">'style!css!postcss!sass'</span> </div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">postcss</span>: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;    <span class="comment">// 浏览器加前缀</span></div><div class="line">     <span class="comment">/*...options*/</span></div><div class="line">      broswers: [<span class="string">'last 5 versions'</span>]</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="处理html文件"><a href="#处理html文件" class="headerlink" title="处理html文件"></a>处理html文件</h3><blockquote>
<p>>npm install html-loader –save-dev</p>
</blockquote>
<p>编辑配置webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,    </div><div class="line">        <span class="attr">loader</span>: <span class="string">'style-loader!css-loader?importLoaders=1!postcss-loader'</span>,  </div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,    <span class="comment">// 匹配less文件</span></div><div class="line">        loader: <span class="string">'style!css!postcss!less'</span>  </div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,    <span class="comment">// 匹配sass文件</span></div><div class="line">        loader: <span class="string">'style!css!postcss!sass'</span>  </div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,    <span class="comment">// 匹配html文件</span></div><div class="line">        loader: <span class="string">'html-loader'</span>   <span class="comment">// </span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">postcss</span>: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;    <span class="comment">// 浏览器加前缀</span></div><div class="line">     <span class="comment">/*...options*/</span></div><div class="line">      broswers: [<span class="string">'last 5 versions'</span>]</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="ejs-loader"><a href="#ejs-loader" class="headerlink" title="ejs-loader"></a>ejs-loader</h4><blockquote>
<p>>npm install ejs-loader –save-dev</p>
</blockquote>
<p>编辑配置webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.tpl$/</span>,    </div><div class="line">        <span class="attr">loader</span>: <span class="string">'ejs-loader'</span>,  </div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h3><blockquote>
<p>>npm install file-loader –save-dev</p>
</blockquote>
<p>编辑配置webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|svg)$/i</span>,    </div><div class="line">        <span class="attr">loader</span>: <span class="string">'file-loader'</span>,  </div><div class="line">        <span class="attr">query</span>: &#123;</div><div class="line">          <span class="attr">name</span>: <span class="string">'assets/[name]-[hash:5].[ext]'</span>    <span class="comment">// 指定路径与名称</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>组件内部图片相对引用的地址，这样处理会有问题<br>可以采用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$( require('相对地址') )"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>url-loader处理小图片<br>当文件或图片小于limit，会将图片自动转化为base64编码</p>
<blockquote>
<p>>npm install url-loader –save-dev</p>
</blockquote>
<p>编辑配置webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|svg)$/i</span>,    </div><div class="line">        <span class="attr">loader</span>: <span class="string">'url-loader'</span>,  </div><div class="line">        <span class="attr">query</span>: &#123;</div><div class="line">          <span class="attr">limit</span>: <span class="number">2000</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'assets/[name]-[hash:5].[ext]'</span>    <span class="comment">// 指定路径与名称</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>image-webpack-loader 压缩图片</p>
<blockquote>
<p>>npm install image-webpack-loader –save-dev</p>
</blockquote>
<p>编辑配置webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|svg)$/i</span>,    </div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">          <span class="string">'url-loader?limit=2000&amp;name=assets/[name]-[hash:5].[ext]'</span>,</div><div class="line">          <span class="string">'image-webpack'</span></div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> webpack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端工具 </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[canvas图像处理]]></title>
      <url>http://emloxe.github.io/2017/03/14/canvas%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>慕课网<a href="http://www.imooc.com/learn/476" target="_blank" rel="external">Canvas玩转图像处理</a>学习笔记</p>
<a id="more"></a>
<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="创建canvas-并获取"><a href="#创建canvas-并获取" class="headerlink" title="创建canvas,并获取"></a>创建canvas,并获取</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">style</span>=<span class="string">"display: block; margin: 0 auto;border: 1px solid #aaa"</span>&gt;</span></div><div class="line">  您的浏览器不支持canvas</div><div class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</div><div class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// canvas的宽高最好不要写在样式中</span></div><div class="line">    canvas.width = <span class="number">800</span>;</div><div class="line">    canvas.height = <span class="number">500</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="drawImage"><a href="#drawImage" class="headerlink" title="drawImage"></a>drawImage</h3><p><code>context.drawImage()</code>将图片绘制在canvas中</p>
<h4 id="context-drawImage-img-dx-dy"><a href="#context-drawImage-img-dx-dy" class="headerlink" title="context.drawImage(img, dx, dy)"></a>context.drawImage(img, dx, dy)</h4><p>img:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">img.src = <span class="string">'2017031401.png'</span>;</div></pre></td></tr></table></figure></p>
<p>dx，dy 绘制img在canvas上的起点<br>dx：左定位<br>dy：上定位</p>
<p>图片不改变宽高，多出部分会被裁剪</p>
<h4 id="context-drawImage-img-dx-dy-dw-dh"><a href="#context-drawImage-img-dx-dy-dw-dh" class="headerlink" title="context.drawImage(img, dx, dy, dw, dh)"></a>context.drawImage(img, dx, dy, dw, dh)</h4><p>dx，dy 绘制img在canvas上的起点<br>dx：左定位<br>dy：上定位</p>
<p>dw，dh 绘制在canvas上的图片宽高<br>dw: 宽<br>dh：高</p>
<h4 id="context-drawImage-img-sx-sy-sw-sh-dx-dy-dw-dh"><a href="#context-drawImage-img-sx-sy-sw-sh-dx-dy-dw-dh" class="headerlink" title="context.drawImage(img, sx, sy, sw, sh, dx, dy,  dw, dh)"></a>context.drawImage(img, sx, sy, sw, sh, dx, dy,  dw, dh)</h4><p>sx,sy 原始图片的起点<br>sx：左定位<br>sy：上定位</p>
<p>sw,sh 从原始图片截取的宽高<br>sw: 宽<br>sh：高</p>
<p>dx，dy 绘制img在canvas上的起点<br>dx：左定位<br>dy：上定位</p>
<p>dw，dh 绘制在canvas上的图片宽高<br>dw: 宽<br>dh：高</p>
<p><img src="/images/2017031402.png" alt="images"></p>
<p><a href="https://emloxe.github.io/e-test/2017031401.html">查看相关实例</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</div><div class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  img.src = <span class="string">'2017031401.png'</span>;</div><div class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    context.drawImage(参数);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>drawImage()第一个参数除了传递img对象，还可以将canvas传入<br>也就是离屏canvas绘制</p>
<h3 id="清除canvas内容"><a href="#清除canvas内容" class="headerlink" title="清除canvas内容"></a>清除canvas内容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">context.clearRect( <span class="number">0</span> , <span class="number">0</span> , canvas.width , canvas.height )</div></pre></td></tr></table></figure>
<p>定义起始位置为(0, 0)<br>从起始位置开始清除的宽高为(canvas.width , canvas.height)</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="给图像加水印"><a href="#给图像加水印" class="headerlink" title="给图像加水印"></a>给图像加水印</h3><p>除了水印图像引入canvas外<br>这次用canvas绘制水印</p>
<p><img src="/images/2017031403.png" alt="images"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">style</span>=<span class="string">"display: block; margin: 0 auto;border: 1px solid #aaa"</span>&gt;</span></div><div class="line">  您的浏览器不支持canvas</div><div class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 隐藏该canvas --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"watermark-canvas"</span> <span class="attr">style</span>=<span class="string">"display:none;margin:0 auto;border:1px solid #aaa;"</span>&gt;</span></div><div class="line">    您的浏览器尚不支持canvas</div><div class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>)</div><div class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> watermarkCanvas = <span class="built_in">document</span>.getElementById(<span class="string">"watermark-canvas"</span>)</div><div class="line"><span class="keyword">var</span> watermarkContext = watermarkCanvas.getContext(<span class="string">"2d"</span>)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    canvas.width = <span class="number">800</span>;</div><div class="line">    canvas.height = <span class="number">500</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 绘制canvas水印</span></div><div class="line">    watermarkCanvas.width = <span class="number">400</span>;</div><div class="line">    watermarkCanvas.height = <span class="number">100</span>;</div><div class="line"></div><div class="line">    watermarkContext.font = <span class="string">"bold 50px Arial"</span></div><div class="line">    watermarkContext.lineWidth = <span class="string">"1"</span></div><div class="line">    watermarkContext.fillStyle = <span class="string">"rgba( 255 , 255 , 255 , 0.5 )"</span></div><div class="line">    watermarkContext.textBaseline = <span class="string">"middle"</span>;</div><div class="line">    watermarkContext.fillText( <span class="string">"emloxe.github.io"</span> , <span class="number">20</span> , <span class="number">50</span> )</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">    img.src = <span class="string">"images/2017031401.png"</span>;</div><div class="line">    image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">// 图片充满整个屏幕</span></div><div class="line">      context.drawImage( img , <span class="number">0</span> , <span class="number">0</span> , canvas.width , canvas,height )</div><div class="line"></div><div class="line">      <span class="comment">// 将watermarkCanvas绘制在context左下角</span></div><div class="line">      context.drawImage( watermarkCanvas , canvas.width - watermarkCanvas.width ,</div><div class="line">          canvas.height - watermarkCanvas.height )</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="图片缩放展示"><a href="#图片缩放展示" class="headerlink" title="图片缩放展示"></a>图片缩放展示</h4><p><a href="https://emloxe.github.io/e-test/2017031402.html">效果展示</a></p>
<h3 id="实现放大镜效果"><a href="#实现放大镜效果" class="headerlink" title="实现放大镜效果"></a>实现放大镜效果</h3><p><a href="https://emloxe.github.io/e-test/2017031403.html">效果展示</a></p>
<h4 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h4><p><code>canvas.getBoundingClientRect()</code></p>
<p>存储canvas画布相关信息<br>width: 包含padding左右,border左右,content<br>height: 包含padding上下,border上下,content<br>top: canvas左上角在document文档的top - document上下已卷过的高度（上下滚动条已滚过的高度）<br>left: canvas左上角在document文档的left - document左右已卷过的长度（左右滚动条已滚过的左边的长度）</p>
]]></content>
      
        <categories>
            
            <category> canvas </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html5 </tag>
            
            <tag> canvas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原生js兼容浏览器的常见方法]]></title>
      <url>http://emloxe.github.io/2017/03/12/%E5%8E%9F%E7%94%9Fjs%E5%85%BC%E5%AE%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加监听事件的方法</div><div class="line"> * @param ele  &#123;htmlElement&#125; target</div><div class="line"> * @param eType &#123;string&#125; eventType,事件类型</div><div class="line"> * @param handler &#123;function&#125; 事件处理方法</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventHandler</span>(<span class="params">ele,eType,handler</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</div><div class="line">    ele.addEventListener(eType,handler,<span class="literal">false</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</div><div class="line">    ele.attachEvent(<span class="string">"on"</span>+eType,handler);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    ele[<span class="string">"on"</span>+eType] = handler;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="阻止浏览器默认行为"><a href="#阻止浏览器默认行为" class="headerlink" title="阻止浏览器默认行为"></a>阻止浏览器默认行为</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(e.preventDefault)&#123;</div><div class="line">  e.preventDefault();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  e.returnValue = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(e.stopPropagation)&#123;</div><div class="line">  e.stopPropagation();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  e.cancelBubble = <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js缓动动画整理]]></title>
      <url>http://emloxe.github.io/2017/03/10/js%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// requestAnimationFrame的兼容处理</span></div><div class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame) &#123;</div><div class="line">    requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">        setTimeout(fn, <span class="number">17</span>);</div><div class="line">    &#125;;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 滚动到顶部缓动实现，由快到慢</span></div><div class="line"><span class="comment">// rate表示缓动速率，默认是2，范围是1到无穷大，速率值越小，运动越快。</span></div><div class="line"><span class="keyword">var</span> backToTop = <span class="function"><span class="keyword">function</span> (<span class="params">rate</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> doc = <span class="built_in">document</span>.body.scrollTop? <span class="built_in">document</span>.body : <span class="built_in">document</span>.documentElement;</div><div class="line">    <span class="keyword">var</span> scrollTop = doc.scrollTop;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> top = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        scrollTop = scrollTop + (<span class="number">0</span> - scrollTop) / (rate || <span class="number">2</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 临界判断，终止动画</span></div><div class="line">        <span class="keyword">if</span> (scrollTop &lt; <span class="number">1</span>) &#123;</div><div class="line">            doc.scrollTop = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        doc.scrollTop = scrollTop;</div><div class="line">        <span class="comment">// 运行动画</span></div><div class="line">        requestAnimationFrame(top);    </div><div class="line">    &#125;;</div><div class="line">    top();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="页面滚动到指定位置"><a href="#页面滚动到指定位置" class="headerlink" title="页面滚动到指定位置"></a>页面滚动到指定位置</h3><p><strong>抽象封装</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加监听事件的方法</div><div class="line"> * @param A &#123;number&#125; 起始位置</div><div class="line"> * @param B &#123;number&#125; 目标位置</div><div class="line"> * @param rate &#123;number&#125; 缓动速率</div><div class="line"> * @param callback &#123;function&#125; 是变化的位置回调，支持两个参数，value和isEnding，表示当前的位置值（数值）以及是否动画结束了（布尔值）；</div><div class="line"> */</div><div class="line"><span class="built_in">Math</span>.easeout = <span class="function"><span class="keyword">function</span> (<span class="params">A, B, rate, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (A == B || <span class="keyword">typeof</span> A != <span class="string">'number'</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;    </div><div class="line">    &#125;</div><div class="line">    B = B || <span class="number">0</span>;</div><div class="line">    rate = rate || <span class="number">2</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> step = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        A = A + (B - A) / rate;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (A &lt; <span class="number">1</span>) &#123;</div><div class="line">            callback(B, <span class="literal">true</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        callback(A, <span class="literal">false</span>);</div><div class="line">        requestAnimationFrame(step);    </div><div class="line">    &#125;;</div><div class="line">    step();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> doc = <span class="built_in">document</span>.body.scrollTop? <span class="built_in">document</span>.body : <span class="built_in">document</span>.documentElement;</div><div class="line"><span class="built_in">Math</span>.easeout(doc.scrollTop, <span class="number">0</span>, <span class="number">4</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">    doc.scrollTop = value;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>参考</strong><br>  <a href="http://www.zhangxinxu.com/wordpress/?p=5875" target="_blank" rel="external">张鑫旭 分享一个即插即用的私藏缓动动画JS小算法</a></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法]]></title>
      <url>http://emloxe.github.io/2017/02/26/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>常用的markdown语法<br><a id="more"></a></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p># 代表一级标题<br>## 代表二级标题<br>以此类推</p>
<p>除此之外<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">This is an H1</div><div class="line">=============</div><div class="line"></div><div class="line">This is an H2</div><div class="line">-------------</div><div class="line"></div><div class="line"># 这是 H1</div><div class="line"></div><div class="line">## 这是 H2</div><div class="line"></div><div class="line">###### 这是 H6</div></pre></td></tr></table></figure>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表使用星号、加号或是减号作为列表标记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">*   Red</div><div class="line">*   Green</div><div class="line">*   Blue</div><div class="line"></div><div class="line">等同于：</div><div class="line"></div><div class="line">+   Red</div><div class="line">+   Green</div><div class="line">+   Blue</div><div class="line"></div><div class="line">也等同于：</div><div class="line"></div><div class="line">-   Red</div><div class="line">-   Green</div><div class="line">-   Blue</div></pre></td></tr></table></figure></p>
<p>有序列表则使用数字接着一个英文句点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1.  Bird</div><div class="line">2.  McHale</div><div class="line">3.  Parish</div><div class="line"></div><div class="line">等同于：</div><div class="line"></div><div class="line">1.  Bird</div><div class="line">1.  McHale</div><div class="line">1.  Parish</div><div class="line"></div><div class="line">等同于：</div><div class="line"></div><div class="line">2.  Bird</div><div class="line">1.  McHale</div><div class="line">3.  Parish</div></pre></td></tr></table></figure></p>
<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</div><div class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</div><div class="line">    mi posuere lectus.</div><div class="line"></div><div class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</div><div class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</div><div class="line">    sit amet velit.</div><div class="line"></div><div class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure></p>
<p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*   A list item with a blockquote:</div><div class="line"></div><div class="line">    &gt; This is a blockquote</div><div class="line">    &gt; inside a list item.</div></pre></td></tr></table></figure></p>
<p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*   一列表项包含一个列表区块：</div><div class="line"></div><div class="line">        &lt;代码写在这&gt;</div></pre></td></tr></table></figure></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>第一行为标题栏，<code>:---:</code>表示居中对齐，<code>:---</code>左对齐，<code>---:</code>右对齐<br>写表格时前面需要先空一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">| 名称          | 默认值        |说明  |</div><div class="line">|:-------------:|:-------------:|:-----|</div><div class="line">| dom           |无默认值，必填 | 传入的dom |</div><div class="line">| speed       | 40            | 滚动速度|</div></pre></td></tr></table></figure></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><strong>地址链接</strong> <br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[百度](https://www.baidu.com)</div></pre></td></tr></table></figure></p>
<p><strong>图片链接</strong> <br><br>括号内可用相对地址，也可用绝对地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text](/path/to/img.jpg)</div></pre></td></tr></table></figure></p>
<p><strong>自动链接</strong> <br></p>
<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;http://example.com/&gt;</div></pre></td></tr></table></figure></p>
<p>Markdown 会转为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;address@example.com&gt;</div></pre></td></tr></table></figure></p>
<p>Markdown 会转成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;</div><div class="line">&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;</div><div class="line">&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;</div><div class="line">&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>在浏览器里面，这段字串（其实是<code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「address@example.com」链接。</p>
<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">加粗 :**Bold**</div><div class="line">斜体字 :*Italics*</div><div class="line">删除线 :~~text~~</div><div class="line">高亮 :==text==</div><div class="line">段落 : 段落之间空一行</div><div class="line">换行符 : 一行结束时输入两个空格</div><div class="line">列表 :* 添加星号成为一个新的列表项。</div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来`，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use the `printf()` function.</div></pre></td></tr></table></figure></p>
<p>会产生：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">* * *</div><div class="line"></div><div class="line">***</div><div class="line"></div><div class="line">*****</div><div class="line"></div><div class="line">- - -</div><div class="line"></div><div class="line">---------------------------------------</div></pre></td></tr></table></figure></p>
<h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</div><div class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div></pre></td></tr></table></figure>
<p>Markdown 也允许你偷懒只在整个段落的第一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</div><div class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div></pre></td></tr></table></figure></p>
<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; This is the first level of quoting.</div><div class="line">&gt;</div><div class="line">&gt; &gt; This is nested blockquote.</div><div class="line">&gt;</div><div class="line">&gt; Back to the first level.</div></pre></td></tr></table></figure></p>
<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; ## 这是一个标题。</div><div class="line">&gt; </div><div class="line">&gt; 1.   这是第一行列表项。</div><div class="line">&gt; 2.   这是第二行列表项。</div><div class="line">&gt; </div><div class="line">&gt; 给出一些例子代码：</div><div class="line">&gt; </div><div class="line">&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</div></pre></td></tr></table></figure></p>
<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <pre> 和 <code> 标签来把代码区块包起来。</code></pre></p>
<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这是一个普通段落：</div><div class="line"></div><div class="line">    这是一个代码区块。</div></pre></td></tr></table></figure></p>
<h2 id="github代码用法"><a href="#github代码用法" class="headerlink" title="github代码用法"></a>github代码用法</h2><h3 id="文章内部定位"><a href="#文章内部定位" class="headerlink" title="文章内部定位"></a>文章内部定位</h3><p>当文章过长时，可在文章开始时插入目录，<br>在文章内部进行快速跳转</p>
<p>用标签进行包裹，id用于绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">目录</div><div class="line">[jQuery Lazy Load 图片延迟加载](#lazyLoad)</div><div class="line"></div><div class="line">需要跳转的地方</div><div class="line">&lt;a id=&quot;lazyLoad&quot;&gt;jQuery Lazy Load 图片延迟加载&lt;/a&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css背景-background]]></title>
      <url>http://emloxe.github.io/2017/02/26/css%E8%83%8C%E6%99%AF-background/</url>
      <content type="html"><![CDATA[<p>css背景-background基本属性<br><a id="more"></a></p>
<h2 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h2><ul>
<li>background-color</li>
<li>background-image</li>
<li>background-repeat</li>
<li>background-size</li>
<li>background-origin</li>
<li>background-clip</li>
<li>background-attachment </li>
</ul>
<h3 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a>background-color</h3><p>背景颜色<br>默认填充区域为<code>border-content</code></p>
<h3 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h3><p>背景图片<br>默认填充区域为<code>border-content</code><br>默认起始点为<code>padding-content</code></p>
<h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><p>指定背景图像的大小<br>语法：<br><code>background-size：&lt;bg-size&gt;</code><br><code>&lt;bg-size&gt; = [ &lt;length&gt; | &lt;percentage&gt; | auto ]{1,2} | cover | contain</code><br><code>&lt;length&gt;</code>：用长度值指定背景图像大小。不允许负值。<br><code>&lt;percentage&gt;</code>：用百分比指定背景图像大小。不允许负值。<br><code>auto</code>：背景图像的真实大小。<br><code>cover</code>：将背景图像等比缩放到完全覆盖容器，背景图像有可能超出容器。<br><code>contain</code>：将背景图像等比缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内。</p>
<h3 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h3><p>指定了背景图像的位置区域，,当使用 background-attachment 为fixed时，该属性将被忽略不起作用<br>语法：<br><code>background-origin：&lt;box&gt;</code><br><code>&lt;box&gt; = border-box | padding-box | content-box</code><br><code>padding-box</code>：从padding区域（含padding）开始显示背景图像。<br><code>border-box</code>： 从border区域（含border）开始显示背景图像。<br><code>content-box</code>：从content区域开始显示背景图像</p>
<h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h3><p>设置元素的背景（背景图片或颜色）是否延伸到边框下面。</p>
<p>语法：<br><code>background-clip：&lt;box&gt;</code><br><code>&lt;box&gt; = border-box | padding-box | content-box | inherit</code><br><code>border-box</code>背景延伸到边框外沿（但是在边框之下）。<br><code>padding-box</code>边框下面没有背景，即背景延伸到内边距外沿。<br><code>content-box</code>背景裁剪到内容区 (content-box) 外沿。</p>
<h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h3><p>设置背景图像是否固定或者随着页面的其余部分滚动。</p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">scroll</td>
<td style="text-align:left">默认值，背景图片随页面的其余部分滚动</td>
</tr>
<tr>
<td style="text-align:left">fixed</td>
<td style="text-align:left">背景图像是固定的</td>
</tr>
<tr>
<td style="text-align:left">inherit</td>
<td style="text-align:left">指定background-attachment的设置应该从父元素继承</td>
</tr>
</tbody>
</table>
<h2 id="相关示例"><a href="#相关示例" class="headerlink" title="相关示例"></a>相关示例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></div><div class="line"><span class="selector-class">.a</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'a'</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="/images/2018050401.png">!image</a></p>
<p>从图中看来，<code>background-color</code>是从<code>padding</code>开始的,其实并不是,我们设置<code>border: 10px solid transparent;</code><br><a href="/images/2018050401.png">!image</a></p>
<p>不难看出background是从<code>border</code>开始填充的</p>
<p>设置背景<code>background-image: url(339.png);</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></div><div class="line"><span class="selector-class">.a</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(339.png);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'a'</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="/images/2018050403.png">!image</a></p>
<p>同样设置<code>border: 10px solid transparent;</code>后<br><a href="/images/2018050404.png">!image</a></p>
<p>仔细观察我们可以发现<br>背景图起始点还是从padding开始填充的，但是在<code>border-top</code>、<code>border-left</code>上进行了repeat，也填充上了背景图</p>
<p>此时我们设置<code>background-repeat: no-repeat;</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></div><div class="line"><span class="selector-class">.a</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(339.png);</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'a'</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="/images/2018050405.png">!image</a></p>
<p>在<code>border-top</code>、<code>border-left</code>上就有<code>background-color</code>进行填充，而<code>border-bottom</code>、<code>border-right</code>还是由背景图填充。</p>
<p>设置<code>background-origin: border-box;</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></div><div class="line"><span class="selector-class">.a</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(339.png);</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">  <span class="attribute">background-origin</span>: border-box;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'a'</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>背景图起始点就是从border开始了<br><a href="/images/2018050406.png">!image</a></p>
]]></content>
      
        <categories>
            
            <category> background </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> background </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图片自适应]]></title>
      <url>http://emloxe.github.io/2017/02/25/%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="background全屏图片自适应"><a href="#background全屏图片自适应" class="headerlink" title="background全屏图片自适应"></a>background全屏图片自适应</h2><p>平常全屏宽度的图片，<code>&lt;div&gt;&lt;img src=&quot;&quot; /&gt;&lt;/div&gt;</code>会将div设置为100%，img的width设置为100%，img高度不设置使其高度自适应，就可以实现图片自适应。但是背景图应该设置在background中，直接用img展示又不是很友好。<br>用background<code>&lt;div style=&quot;background: url(&#39;&#39;)&quot;&gt;&lt;/div&gt;</code>，就需要div的宽高。div宽度100%，会根据父元素的宽度进行计算，而div高度需要自适应。div的height用百分比会根据父元素的高度进行计算，而而实际上div应该需要根据background图片高度进行展示，这就有些矛盾了。一般情况下，会直接将div限定高，宽度自适应，图片很可能会被拉伸，展示效果非常不好。<br>最近看到百度2017技术学院的用background设置的非常巧妙,学习如下。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.a</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>; </div><div class="line">    <span class="attribute">padding-top</span>: <span class="number">30%</span>;      </div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.b</span>&#123; </div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">""</span>) no-repeat scroll center center / <span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p> <strong>知识要点</strong><br>width,height以百分比计算是分别根据父元素的宽高决定的，而padding、margin的四个方向的值是根据父元素宽度计算的。知道背景图长宽比，就可以设置padding-top值，以上例子是按照长宽比为100:30设置的 <code>padding-top: 30%</code>背景刚好可以自适应了。<br><code>.b{position: absolute;left:0}</code>left是根据padding位置确定的。</p>
<h2 id="img图片展示效果"><a href="#img图片展示效果" class="headerlink" title="img图片展示效果"></a>img图片展示效果</h2><p>宽高确定的div，在background中的背景图有background-size指定背景图片的大小，background-position指定背景图像的位置  </p>
<h3 id="background-size配置"><a href="#background-size配置" class="headerlink" title="background-size配置"></a>background-size配置</h3><p>默认值为auto  </p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">length</td>
<td style="text-align:left">设置背景图片高度和宽度。第一个值设置宽度，第二个值设置的高度。如果只给出一个值，第二个是设置为”atuo(自动)”</td>
</tr>
<tr>
<td style="text-align:center">percentage</td>
<td style="text-align:left">将计算相对于背景定位区域的百分比。第一个值设置宽度，第二个值设置的高度。如果只给出一个值，第二个是设置为”auto(自动)”</td>
</tr>
<tr>
<td style="text-align:center">cover</td>
<td style="text-align:left">此时会保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小。</td>
</tr>
<tr>
<td style="text-align:center">contain</td>
<td style="text-align:left">此时会保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小。</td>
</tr>
</tbody>
</table>
<p>background-position<br>默认值为：0% 0%  </p>
<p>在固定宽度的div中设置<code>background-position: center; background-size: cover;</code>就可以让图片撑满div居中显示。但是用background就就没有办法使用慢加载等功能。  </p>
<p>其实在css3中<code>&lt;div&gt;&lt;img src=&quot;&quot; /&gt;&lt;/div&gt;</code><br>div内部的img也可以形如background属性一样使用<br>img的<strong>object-fill</strong>属性形如background-size  </p>
<h3 id="object-fill"><a href="#object-fill" class="headerlink" title="object-fill"></a>object-fill</h3><p>默认值： none  </p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">none</td>
<td style="text-align:left">保持原有尺寸比例。</td>
</tr>
<tr>
<td style="text-align:center">fill</td>
<td style="text-align:left">替换内容拉伸填满整个content box, 不保证保持原有的比例。相当于with: 100%; height: 100%;</td>
</tr>
<tr>
<td style="text-align:center">cover</td>
<td style="text-align:left">此时会保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小。</td>
</tr>
<tr>
<td style="text-align:center">contain</td>
<td style="text-align:left">此时会保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小。</td>
</tr>
<tr>
<td style="text-align:center">scale-down</td>
<td style="text-align:left">就好像依次设置了none或contain, 最终呈现的是尺寸比较小的那个。</td>
</tr>
</tbody>
</table>
<p>img的<strong>object-position</strong>属性形如background-position<br>object-position默认值就是 50% 50%;  </p>
<p>设置<code>object-fill: cover;</code>就可以让图片撑满div居中显示。  </p>
<p><strong>注意</strong><br>object-fill有兼容性问题，GitHub上有<a href="https://github.com/anselmh/object-fit" target="_blank" rel="external">pollfill</a></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bootstrap栅格布局探究]]></title>
      <url>http://emloxe.github.io/2017/02/22/bootstrap%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80%E6%8E%A2%E7%A9%B6/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>bootstrap采用浮动布局形式，分为12栏，通过百分比控制其宽度。</p>
<h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p> <code>.container（固定宽度）</code>或 <code>.container-fluid （100% 宽度）</code>为最外层宽度，控制其整体宽度大小</p>
<p>boostrap 基于媒体查询，以宽度为1200px为例<br>由于<code>*{box-sizing: border-box;}</code>也就是<code>&lt;div class=&quot;container&quot;&gt;container&lt;/div&gt;</code>content的宽为1140px,左右各有15px的padding</p>
<p><img src="/images/2017022201.jpg" alt="images"></p>
<p>css源码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">margin-right</span>: auto;</div><div class="line">  <span class="attribute">margin-left</span>: auto;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) &#123;</div><div class="line">  <span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">750px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) &#123;</div><div class="line">  <span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">970px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">1200px</span>) &#123;</div><div class="line">  <span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">1170px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.container-fluid</span> &#123;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">margin-right</span>: auto;</div><div class="line">  <span class="attribute">margin-left</span>: auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:before</span>,</div><div class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:after</span>,</div><div class="line"><span class="selector-class">.container-fluid</span><span class="selector-pseudo">:before</span>,</div><div class="line"><span class="selector-class">.container-fluid</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">display</span>: table;</div><div class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:after</span>,</div><div class="line"><span class="selector-class">.container-fluid</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="row"><a href="#row" class="headerlink" title="row"></a>row</h3><p>最外层为container容器，容器内部有<code>.row</code>，左右各有-15px的margin。以1200px例，<code>.row</code>恰好抵<code>.container</code>的padding值，即<code>.row</code>的content值为1170px。内部元素宽度刚好又回到最初设置1170px。<br><code>.row</code>还有清除浮动的功能，<code>.row</code>内部<code>.col-*-*</code>是浮动的,需要去清除浮动</p>
<p><img src="/images/2017022202.jpg" alt="images"></p>
<p>.row的相关css代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.row</span> &#123;</div><div class="line">  <span class="attribute">margin-right</span>: -<span class="number">15px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.row</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">display</span>: table;</div><div class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">clear</span>: both;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="col"><a href="#col" class="headerlink" title="col-*-*"></a>col-*-*</h3><p>第一个* 表示xs,sm,md,lg<br>第二个* 表示[1,12]的整数</p>
<table>
<thead>
<tr>
<th>类前缀</th>
<th>范围</th>
<th>屏幕</th>
</tr>
</thead>
<tbody>
<tr>
<td>.col-xs-</td>
<td>[0, 768)</td>
<td>超小屏幕 手机</td>
</tr>
<tr>
<td>.col-sm-</td>
<td>[768, 992)</td>
<td>小屏幕 平板</td>
</tr>
<tr>
<td>.col-md-</td>
<td>[992, 1200)</td>
<td>中等屏幕</td>
</tr>
<tr>
<td>.col-lg-</td>
<td>[1200, )</td>
<td>大屏幕</td>
</tr>
</tbody>
</table>
<p>.col-*-* 根据媒体查询来判断 显示的宽度<br>采用浮动的方式来布局，百分比控制其宽度</p>
<h4 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h4><p>.col-*-offset-*<br>通过改变自身的margin-left值，改变自身本来的位置，会对其后的元素造成影响</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 green"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>展示<br><img src="/images/2017031301.png" alt="image"></p>
<p>设置<code>&lt;div class=&quot;col-sm-3 col-sm-offset-1 blue&quot;&gt;&lt;/div&gt;</code><br><img src="/images/2017031302.png" alt="image"></p>
<h4 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h4><p>.col-*-push-*<br>.col-*-pull-*</p>
<p>因为.col-*-*元素上设有<code>position: relative</code><br>push设置其left值，相当于向右移<br>pull设置其right值，相当于向左移<br>因为<code>position: relative</code>，只是相当于根据原位置的移动，其占据空间并未改变,不会改变其他的元素，但会发生遮挡。其原理就不赘述。</p>
<p>设置<code>&lt;div class=&quot;col-sm-3 col-sm-push-1 blue&quot;&gt;&lt;/div&gt;</code><br><img src="/images/2017031304.png" alt="image"></p>
<p>设置<code>&lt;div class=&quot;col-sm-3 col-sm-pull-1 blue&quot;&gt;&lt;/div&gt;</code><br><img src="/images/2017031303.png" alt="image"></p>
<p>css源码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.col-xs-1</span>, <span class="selector-class">.col-sm-1</span>, <span class="selector-class">.col-md-1</span>, <span class="selector-class">.col-lg-1</span>, <span class="selector-class">.col-xs-2</span>, <span class="selector-class">.col-sm-2</span>, <span class="selector-class">.col-md-2</span>, <span class="selector-class">.col-lg-2</span>, <span class="selector-class">.col-xs-3</span>, <span class="selector-class">.col-sm-3</span>, <span class="selector-class">.col-md-3</span>, <span class="selector-class">.col-lg-3</span>, <span class="selector-class">.col-xs-4</span>, <span class="selector-class">.col-sm-4</span>, <span class="selector-class">.col-md-4</span>, <span class="selector-class">.col-lg-4</span>, <span class="selector-class">.col-xs-5</span>, <span class="selector-class">.col-sm-5</span>, <span class="selector-class">.col-md-5</span>, <span class="selector-class">.col-lg-5</span>, <span class="selector-class">.col-xs-6</span>, <span class="selector-class">.col-sm-6</span>, <span class="selector-class">.col-md-6</span>, <span class="selector-class">.col-lg-6</span>, <span class="selector-class">.col-xs-7</span>, <span class="selector-class">.col-sm-7</span>, <span class="selector-class">.col-md-7</span>, <span class="selector-class">.col-lg-7</span>, <span class="selector-class">.col-xs-8</span>, <span class="selector-class">.col-sm-8</span>, <span class="selector-class">.col-md-8</span>, <span class="selector-class">.col-lg-8</span>, <span class="selector-class">.col-xs-9</span>, <span class="selector-class">.col-sm-9</span>, <span class="selector-class">.col-md-9</span>, <span class="selector-class">.col-lg-9</span>, <span class="selector-class">.col-xs-10</span>, <span class="selector-class">.col-sm-10</span>, <span class="selector-class">.col-md-10</span>, <span class="selector-class">.col-lg-10</span>, <span class="selector-class">.col-xs-11</span>, <span class="selector-class">.col-sm-11</span>, <span class="selector-class">.col-md-11</span>, <span class="selector-class">.col-lg-11</span>, <span class="selector-class">.col-xs-12</span>, <span class="selector-class">.col-sm-12</span>, <span class="selector-class">.col-md-12</span>, <span class="selector-class">.col-lg-12</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-1</span>, <span class="selector-class">.col-xs-2</span>, <span class="selector-class">.col-xs-3</span>, <span class="selector-class">.col-xs-4</span>, <span class="selector-class">.col-xs-5</span>, <span class="selector-class">.col-xs-6</span>, <span class="selector-class">.col-xs-7</span>, <span class="selector-class">.col-xs-8</span>, <span class="selector-class">.col-xs-9</span>, <span class="selector-class">.col-xs-10</span>, <span class="selector-class">.col-xs-11</span>, <span class="selector-class">.col-xs-12</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-12</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-11</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-10</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-9</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-8</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-7</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-6</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-5</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-4</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-3</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-12</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-11</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">91.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-10</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">83.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-9</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">75%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-8</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">66.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-7</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">58.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-6</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-5</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">41.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-4</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">33.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-3</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">25%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-2</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">16.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-1</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">8.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-pull-0</span> &#123;</div><div class="line">  <span class="attribute">right</span>: auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-12</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-11</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">91.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-10</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">83.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-9</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">75%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-8</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">66.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-7</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">58.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-6</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-5</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">41.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-4</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">33.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-3</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">25%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-2</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">16.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-1</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">8.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-push-0</span> &#123;</div><div class="line">  <span class="attribute">left</span>: auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-12</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-11</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">91.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-10</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">83.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-9</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">75%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-8</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">66.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-7</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">58.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-6</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-5</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">41.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-4</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">33.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-3</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">25%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-2</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">16.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-1</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">8.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-xs-offset-0</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) &#123;</div><div class="line">  <span class="selector-class">.col-sm-1</span>, <span class="selector-class">.col-sm-2</span>, <span class="selector-class">.col-sm-3</span>, <span class="selector-class">.col-sm-4</span>, <span class="selector-class">.col-sm-5</span>, <span class="selector-class">.col-sm-6</span>, <span class="selector-class">.col-sm-7</span>, <span class="selector-class">.col-sm-8</span>, <span class="selector-class">.col-sm-9</span>, <span class="selector-class">.col-sm-10</span>, <span class="selector-class">.col-sm-11</span>, <span class="selector-class">.col-sm-12</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-12</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-11</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-10</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-9</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-8</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-7</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-6</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-5</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-4</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-3</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-2</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-1</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-12</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-11</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-10</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-9</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-8</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-7</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-6</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-5</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-4</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-3</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-2</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-1</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-pull-0</span> &#123;</div><div class="line">    <span class="attribute">right</span>: auto;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-12</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-11</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-10</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-9</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-8</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-7</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-6</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-5</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-4</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-3</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-2</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-1</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-push-0</span> &#123;</div><div class="line">    <span class="attribute">left</span>: auto;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-12</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-11</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-10</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-9</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-8</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-7</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-6</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-5</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-4</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-3</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-2</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-1</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-sm-offset-0</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) &#123;</div><div class="line">  <span class="selector-class">.col-md-1</span>, <span class="selector-class">.col-md-2</span>, <span class="selector-class">.col-md-3</span>, <span class="selector-class">.col-md-4</span>, <span class="selector-class">.col-md-5</span>, <span class="selector-class">.col-md-6</span>, <span class="selector-class">.col-md-7</span>, <span class="selector-class">.col-md-8</span>, <span class="selector-class">.col-md-9</span>, <span class="selector-class">.col-md-10</span>, <span class="selector-class">.col-md-11</span>, <span class="selector-class">.col-md-12</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-12</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-11</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-10</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-9</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-8</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-7</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-6</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-5</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-4</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-3</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-2</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-1</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-12</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-11</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-10</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-9</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-8</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-7</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-6</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-5</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-4</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-3</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-2</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-1</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-pull-0</span> &#123;</div><div class="line">    <span class="attribute">right</span>: auto;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-12</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-11</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-10</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-9</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-8</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-7</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-6</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-5</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-4</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-3</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-2</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-1</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-push-0</span> &#123;</div><div class="line">    <span class="attribute">left</span>: auto;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-12</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-11</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-10</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-9</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-8</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-7</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-6</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-5</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-4</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-3</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-2</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-1</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-md-offset-0</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">1200px</span>) &#123;</div><div class="line">  <span class="selector-class">.col-lg-1</span>, <span class="selector-class">.col-lg-2</span>, <span class="selector-class">.col-lg-3</span>, <span class="selector-class">.col-lg-4</span>, <span class="selector-class">.col-lg-5</span>, <span class="selector-class">.col-lg-6</span>, <span class="selector-class">.col-lg-7</span>, <span class="selector-class">.col-lg-8</span>, <span class="selector-class">.col-lg-9</span>, <span class="selector-class">.col-lg-10</span>, <span class="selector-class">.col-lg-11</span>, <span class="selector-class">.col-lg-12</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-12</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-11</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-10</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-9</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-8</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-7</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-6</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-5</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-4</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-3</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-2</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-1</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-12</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-11</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-10</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-9</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-8</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-7</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-6</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-5</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-4</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-3</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-2</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-1</span> &#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-pull-0</span> &#123;</div><div class="line">    <span class="attribute">right</span>: auto;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-12</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-11</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-10</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-9</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-8</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-7</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-6</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-5</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-4</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-3</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-2</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-1</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-push-0</span> &#123;</div><div class="line">    <span class="attribute">left</span>: auto;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-12</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-11</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">91.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-10</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">83.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-9</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">75%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-8</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">66.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-7</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">58.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-6</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">50%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-5</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">41.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-4</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">33.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-3</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">25%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-2</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">16.66666667%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-1</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">8.33333333%</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.col-lg-offset-0</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="展示或隐藏页面"><a href="#展示或隐藏页面" class="headerlink" title="展示或隐藏页面"></a>展示或隐藏页面</h3><p>通过单独或联合使用以下列出的类，可以针对不同屏幕尺寸隐藏或显示页面内容。<br><img src="/images/2017031305.png" alt="image"></p>
<p>* 表示为block，inline，inline-block<br><img src="/images/2017031306.png" alt="image"></p>
<p>打印类<br>和常规的响应式类一样，使用下面的类可以针对打印机隐藏或显示某些内容。<br><img src="/images/2017031307.png" alt="image"> </p>
<p>源码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.visible-xs</span>,</div><div class="line"><span class="selector-class">.visible-sm</span>,</div><div class="line"><span class="selector-class">.visible-md</span>,</div><div class="line"><span class="selector-class">.visible-lg</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.visible-xs-block</span>,</div><div class="line"><span class="selector-class">.visible-xs-inline</span>,</div><div class="line"><span class="selector-class">.visible-xs-inline-block</span>,</div><div class="line"><span class="selector-class">.visible-sm-block</span>,</div><div class="line"><span class="selector-class">.visible-sm-inline</span>,</div><div class="line"><span class="selector-class">.visible-sm-inline-block</span>,</div><div class="line"><span class="selector-class">.visible-md-block</span>,</div><div class="line"><span class="selector-class">.visible-md-inline</span>,</div><div class="line"><span class="selector-class">.visible-md-inline-block</span>,</div><div class="line"><span class="selector-class">.visible-lg-block</span>,</div><div class="line"><span class="selector-class">.visible-lg-inline</span>,</div><div class="line"><span class="selector-class">.visible-lg-inline-block</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">767px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-xs</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">table</span><span class="selector-class">.visible-xs</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">tr</span><span class="selector-class">.visible-xs</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-row <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">th</span><span class="selector-class">.visible-xs</span>,</div><div class="line">  <span class="selector-tag">td</span><span class="selector-class">.visible-xs</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">767px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-xs-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">767px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-xs-inline</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">767px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-xs-inline-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) and (max-width: <span class="number">991px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-sm</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">table</span><span class="selector-class">.visible-sm</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">tr</span><span class="selector-class">.visible-sm</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-row <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">th</span><span class="selector-class">.visible-sm</span>,</div><div class="line">  <span class="selector-tag">td</span><span class="selector-class">.visible-sm</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) and (max-width: <span class="number">991px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-sm-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) and (max-width: <span class="number">991px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-sm-inline</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) and (max-width: <span class="number">991px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-sm-inline-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) and (max-width: <span class="number">1199px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-md</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">table</span><span class="selector-class">.visible-md</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">tr</span><span class="selector-class">.visible-md</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-row <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">th</span><span class="selector-class">.visible-md</span>,</div><div class="line">  <span class="selector-tag">td</span><span class="selector-class">.visible-md</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) and (max-width: <span class="number">1199px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-md-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) and (max-width: <span class="number">1199px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-md-inline</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) and (max-width: <span class="number">1199px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-md-inline-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">1200px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-lg</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">table</span><span class="selector-class">.visible-lg</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">tr</span><span class="selector-class">.visible-lg</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-row <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">th</span><span class="selector-class">.visible-lg</span>,</div><div class="line">  <span class="selector-tag">td</span><span class="selector-class">.visible-lg</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">1200px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-lg-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">1200px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-lg-inline</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">1200px</span>) &#123;</div><div class="line">  <span class="selector-class">.visible-lg-inline-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">767px</span>) &#123;</div><div class="line">  <span class="selector-class">.hidden-xs</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) and (max-width: <span class="number">991px</span>) &#123;</div><div class="line">  <span class="selector-class">.hidden-sm</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) and (max-width: <span class="number">1199px</span>) &#123;</div><div class="line">  <span class="selector-class">.hidden-md</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">1200px</span>) &#123;</div><div class="line">  <span class="selector-class">.hidden-lg</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.visible-print</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> print &#123;</div><div class="line">  <span class="selector-class">.visible-print</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">table</span><span class="selector-class">.visible-print</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">tr</span><span class="selector-class">.visible-print</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-row <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">th</span><span class="selector-class">.visible-print</span>,</div><div class="line">  <span class="selector-tag">td</span><span class="selector-class">.visible-print</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.visible-print-block</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> print &#123;</div><div class="line">  <span class="selector-class">.visible-print-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.visible-print-inline</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> print &#123;</div><div class="line">  <span class="selector-class">.visible-print-inline</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.visible-print-inline-block</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> print &#123;</div><div class="line">  <span class="selector-class">.visible-print-inline-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> print &#123;</div><div class="line">  <span class="selector-class">.hidden-print</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://v3.bootcss.com/" target="_blank" rel="external">bootstrap3中文文档</a></p>
]]></content>
      
        <categories>
            
            <category> bootstrap </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端框架 </tag>
            
            <tag> bootstrap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[页面head优化]]></title>
      <url>http://emloxe.github.io/2017/02/22/%E9%A1%B5%E9%9D%A2head%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>页面头部优化</p>
<a id="more"></a>
<h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><h3 id="用favicon在浏览器给网站进行身份标识"><a href="#用favicon在浏览器给网站进行身份标识" class="headerlink" title="用favicon在浏览器给网站进行身份标识"></a>用favicon在浏览器给网站进行身份标识</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;link href=&quot;http://image.feeliu.com/web/favicon.ico&quot; rel=&quot;shortcut icon&quot; /&gt;  </div><div class="line">&lt;link href=&quot;http://image.feeliu.com/web/favicon.ico&quot; rel=&quot;Bookmark&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="搜索引擎优化"><a href="#搜索引擎优化" class="headerlink" title="搜索引擎优化"></a>搜索引擎优化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;keywords&quot; content=&quot;手机小游戏,59600小游戏,小游戏大全,在线小游戏&quot;/&gt;</div><div class="line">&lt;meta name=&quot;description&quot; content=&quot;59600.com是全世界最大的原创手机小游戏专业网站,免费为你提供 H5游戏,手机小游戏,游戏在线玩,在线小游戏,在线小游戏等最新小游戏。&quot;/&gt;</div><div class="line">&lt;meta name=&quot;keywords&quot; content=&quot;手机小游戏,59600,在线小游戏, 小游戏在线玩,h5游戏,h5小游戏,手机网页游戏,手机页游,在线游戏&quot;/&gt;</div><div class="line">&lt;meta name=&quot;description&quot; content=&quot;手机小游戏59600.com 在线小游戏提供最流行的在线手机小游戏，最热门的不用下载就可以直接玩的H5小游戏&quot;/&gt;</div></pre></td></tr></table></figure>
<h3 id="http-equiv"><a href="#http-equiv" class="headerlink" title="http-equiv"></a>http-equiv</h3><p>http-equiv顾名思义，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。 </p>
<blockquote>
<p>meat标签的http-equiv属性语法格式是：<meta http-equiv="参数" content="参数变量值"> ；其中http-equiv属性主要有以下几种参数：</p>
</blockquote>
<h4 id="Expires-期限"><a href="#Expires-期限" class="headerlink" title="Expires(期限)"></a>Expires(期限)</h4><p>说明：可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。<br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;expires&quot; content=&quot;Wed, 20 Jun 2007 22:33:00 GMT&quot;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="Pragma-cache模式"><a href="#Pragma-cache模式" class="headerlink" title="Pragma(cache模式)"></a>Pragma(cache模式)</h4><p>说明：是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出<br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>注意：这样设定，访问者将无法脱机浏览。 </p>
<h4 id="Refresh-刷新"><a href="#Refresh-刷新" class="headerlink" title="Refresh(刷新)"></a>Refresh(刷新)</h4><p>说明：自动刷新并指向新页面。<br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;2；URL=http://www.net.cn/&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>注意：其中的2是指停留2秒钟后自动刷新到URL网址。 </p>
<h4 id="Set-Cookie-cookie设定"><a href="#Set-Cookie-cookie设定" class="headerlink" title="Set-Cookie(cookie设定)"></a>Set-Cookie(cookie设定)</h4><p>说明：如果网页过期，那么存盘的cookie将被删除。<br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Set-Cookie&quot; content=&quot;cookievalue=xxx;expires=Wednesday, 20-Jun-2007 22:33:00 GMT； path=/&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>注意：必须使用GMT的时间格式。 </p>
<h4 id="Window-target-显示窗口的设定"><a href="#Window-target-显示窗口的设定" class="headerlink" title="Window-target(显示窗口的设定)"></a>Window-target(显示窗口的设定)</h4><p>说明：强制页面在当前窗口以独立页面显示。<br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Window-target&quot; content=&quot;_top&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>注意：用来防止别人在框架里调用自己的页面。 </p>
<h4 id="content-Type-显示字符集的设定"><a href="#content-Type-显示字符集的设定" class="headerlink" title="content-Type(显示字符集的设定)"></a>content-Type(显示字符集的设定)</h4><p>说明：设定页面使用的字符集。<br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;content-Type&quot; content=&quot;text/html; charset=gb2312&quot;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="Pics-label-网页等级评定"><a href="#Pics-label-网页等级评定" class="headerlink" title="Pics-label(网页等级评定)"></a>Pics-label(网页等级评定)</h4><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Pics-label&quot; contect=&quot;&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>说明：在IE的internet选项中有一项内容设置，可以防止浏览一些受限制的网站，而网站的限制级别就是通过meta属性来设置的。 </p>
<h4 id="Page-Enter、Page-Exit"><a href="#Page-Enter、Page-Exit" class="headerlink" title="Page_Enter、Page_Exit"></a>Page_Enter、Page_Exit</h4><p>设定进入页面时的特殊效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Page-Enter&quot;    contect=&quot;revealTrans(duration=1.0,transtion=    12)&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>设定离开页面时的特殊效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Page-Exit&quot;    contect=&quot;revealTrans(duration=1.0,transtion=    12)&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>Duration的值为网页动态过渡的时间，单位为秒。<br>Transition是过渡方式，它的值为0到23，分别对应24种过渡方式。如下表：<br>0    盒状收缩    1    盒状放射<br>2    圆形收缩    3    圆形放射<br>4    由下往上    5    由上往下<br>6    从左至右    7    从右至左<br>8    垂直百叶窗    9    水平百叶窗<br>10    水平格状百叶窗    11垂直格状百叶窗<br>12    随意溶解    13从左右两端向中间展开<br>14从中间向左右两端展开    15从上下两端向中间展开<br>16从中间向上下两端展开    17    从右上角向左下角展开<br>18    从右下角向左上角展开    19    从左上角向右下角展开<br>20    从左下角向右上角展开    21    水平线状展开<br>22    垂直线状展开    23    随机产生一种过渡方式  </p>
<h4 id="清除缓存（再访问这个网站要重新下载！）"><a href="#清除缓存（再访问这个网站要重新下载！）" class="headerlink" title="清除缓存（再访问这个网站要重新下载！）"></a>清除缓存（再访问这个网站要重新下载！）</h4><p>Html代码  收藏代码</p>
<meta http-equiv="cache-control" content="no-cache">  


<h4 id="设定网页的到期时间"><a href="#设定网页的到期时间" class="headerlink" title="设定网页的到期时间"></a>设定网页的到期时间</h4><p>Html代码  收藏代码</p>
<meta http-equiv="expires" content="0">  



<h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;</div></pre></td></tr></table></figure>
<h3 id="苹果浏览器"><a href="#苹果浏览器" class="headerlink" title="苹果浏览器"></a>苹果浏览器</h3><h4 id="apple-touch-icon"><a href="#apple-touch-icon" class="headerlink" title="apple-touch-icon"></a>apple-touch-icon</h4><p>现今移动设备越来越多，苹果为iOS设备配备了apple-touch-icon私有属性，添加该属性，在iPhone,iPad,iTouch的safari浏览器上可以使用添加到主屏按钮将网站添加到主屏幕上，方便用户以后访问。实现方法是在HTML文档的<head>标签加入下面代码即可。</head></p>
<p>apple-touch-icon 标签支持sizes属性，可以用来放置对应不同的设备。</p>
<p>57×57（默认值）的图标对应320×640的iphone老设备，72×72对应ipad，114×114对应retina屏的iPhone及iTouch。ipad3对应144×144的高分辨率。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;//img.59600.com/logo/logo_160.png&quot; sizes=&quot;57x57&quot;&gt;</div><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;//img.59600.com/logo/logo_160.png&quot; sizes=&quot;72x72&quot;&gt;</div><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;//img.59600.com/logo/logo_160.png&quot; sizes=&quot;76x76&quot;&gt;</div><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;//img.59600.com/logo/logo_160.png&quot; sizes=&quot;114x114&quot;&gt;</div><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;//img.59600.com/logo/logo_160.png&quot; sizes=&quot;120x120&quot;&gt;</div><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;//img.59600.com/logo/logo_160.png&quot; sizes=&quot;144x144&quot;&gt;</div><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;//img.59600.com/logo/logo_160.png&quot; sizes=&quot;152x152&quot;&gt;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/freshlover/article/details/9310437" target="_blank" rel="external">关于Apple设备私有的apple-touch-icon属性详解</a><br><a href="http://kinglyhum.iteye.com/blog/827807" target="_blank" rel="external">Meta http-equiv属性详解(转)</a></p>
]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> 优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用js函数整理.md]]></title>
      <url>http://emloxe.github.io/2017/02/20/%E5%B8%B8%E7%94%A8js%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>平常自己写代码，总会有些许封装好的函数可以反复利用，整理出来以供以后使用方便</p>
<a id="more"></a>
<h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><h3 id="字符去除左右空白符"><a href="#字符去除左右空白符" class="headerlink" title="字符去除左右空白符"></a>字符去除左右空白符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">""</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="判断中英文字符串长度"><a href="#判断中英文字符串长度" class="headerlink" title="判断中英文字符串长度"></a>判断中英文字符串长度</h3><p>平常在输入某些文字时会要求，中文计算为2字符，而英文计算为1字符。<br>string.length 属性中英文都会计算为1字符</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.slen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> len = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.length; i++) &#123;    </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.charCodeAt(i)&gt;<span class="number">127</span> || <span class="keyword">this</span>.charCodeAt(i)==<span class="number">94</span>) &#123;    </div><div class="line">             len += <span class="number">2</span>;    </div><div class="line">         &#125; <span class="keyword">else</span> &#123;    </div><div class="line">             len ++;    </div><div class="line">         &#125;    </div><div class="line">     &#125;       </div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取页面URL的查询部分"><a href="#获取页面URL的查询部分" class="headerlink" title="获取页面URL的查询部分"></a>获取页面URL的查询部分</h2><p>返回当前 URL 的查询部分（问号 ? 之后的部分，</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取url传输的数据，并解析成对象返回</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrl</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = location.search.slice(<span class="number">1</span>).split(<span class="string">'&amp;'</span>);</div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">var</span> arr2 = arr[i].split(<span class="string">'='</span>);</div><div class="line">        obj[arr2[<span class="number">0</span>]] = arr2[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> obj;       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>eg: <a href="http://emloxe.github.io/index.html?id=123&amp;p=1">http://emloxe.github.io/index.html?id=123&amp;p=1</a></p>
<p>函数将会返回obj;<br>obj结构如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">obj = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">123</span>,</div><div class="line">  <span class="attr">p</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="生成随机的颜色"><a href="#生成随机的颜色" class="headerlink" title="生成随机的颜色"></a>生成随机的颜色</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = <span class="string">'#'</span>+<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>).toString(<span class="number">16</span>)+<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>).toString(<span class="number">16</span>)+<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>).toString(<span class="number">16</span>);</div></pre></td></tr></table></figure>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>根据当前页数和总页数绘制出页码的html</p>
<p><a href="https://github.com/emloxe/zwj-blog/blob/master/js/%E5%88%86%E9%A1%B5.md" target="_blank" rel="external">详情</a></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用css]]></title>
      <url>http://emloxe.github.io/2017/02/19/%E5%B8%B8%E7%94%A8css/</url>
      <content type="html"><![CDATA[<p>零碎的css相关知识<br><a id="more"></a></p>
<h2 id="css-hack"><a href="#css-hack" class="headerlink" title="css hack"></a>css hack</h2><h3 id="条件注释法"><a href="#条件注释法" class="headerlink" title="条件注释法"></a>条件注释法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if IE]&gt;</span></div><div class="line">这段文字只在IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--[if !IE]&gt;</span></div><div class="line">这段文字只在非IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--[if IE 8]&gt;</span></div><div class="line">这段文字只在IE6浏览器显示</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--[if ! IE 8]&gt;</span></div><div class="line">这段文字在非IE8浏览器显示</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--[if gt IE 8]&gt;</span></div><div class="line">这段文字只在IE8以上(不包括)版本IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--[if gte IE 8]&gt;</span></div><div class="line">这段文字只在IE8以上(包括)版本IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--[if lt IE 8]&gt;</span></div><div class="line">这段文字只在IE8以下(不包括)版本IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--[if lte IE 8]&gt;</span></div><div class="line">这段文字只在IE8以下(包括)版本IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<h3 id="类内属性前缀法"><a href="#类内属性前缀法" class="headerlink" title="类内属性前缀法"></a>类内属性前缀法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;      <span class="comment">/* 都识别 */</span>  </div><div class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>\9;      <span class="comment">/*all ie*/</span>  </div><div class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:yellow</span>\0;    <span class="comment">/*for IE8/IE9/10 最新版opera也认识*/</span></div><div class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:gray</span>\9\0;    <span class="comment">/*for IE9/10 */</span>  </div><div class="line">+<span class="selector-tag">background-color</span><span class="selector-pseudo">:pink</span>;        <span class="comment">/*for ie6/7*/</span></div><div class="line">*<span class="selector-tag">background-color</span><span class="selector-pseudo">:pink</span>;        <span class="comment">/*for ie6/7*/</span>  </div><div class="line">_<span class="selector-tag">background-color</span><span class="selector-pseudo">:orange</span>;       <span class="comment">/*for ie6*/</span> </div><div class="line"><span class="selector-tag">-background-color</span><span class="selector-pseudo">:orange</span>;       <span class="comment">/*for ie6*/</span></div></pre></td></tr></table></figure>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="截取文字段落-显示为…"><a href="#截取文字段落-显示为…" class="headerlink" title="截取文字段落,显示为…"></a>截取文字段落,显示为…</h3><p>单行截取<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</div><div class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</div><div class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</div></pre></td></tr></table></figure></p>
<p>多行截取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">display: -webkit-box !important;</div><div class="line">overflow: hidden;</div><div class="line">text-overflow: ellipsis;</div><div class="line">word-break: break-all;</div><div class="line">-webkit-line-clanp: 2;</div><div class="line">-webkit-box-orient: vertical;</div></pre></td></tr></table></figure></p>
<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ol>
<li><code>word-break:break-all;</code>只对英文起作用，以字母作为换行依据</li>
<li><code>word-wrap:break-word;</code> 只对英文起作用，以单词作为换行依据</li>
<li><code>white-space:pre-wrap;</code> 只对中文起作用，强制换行</li>
<li><code>white-space:nowrap;</code> 强制不换行，都起作用</li>
</ol>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="字体引用"><a href="#字体引用" class="headerlink" title="字体引用"></a>字体引用</h3><p>系统并未存在该种字体时，可以使用css的@font-face引入服务器文件中的字体</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">font-face</span>&#123;</div><div class="line"><span class="comment">/*为引入的字体命名*/</span></div><div class="line"><span class="attribute">font-family</span>:ch;</div><div class="line"><span class="comment">/*定义要引入字体文件的路径*/</span></div><div class="line"><span class="attribute">src</span>:<span class="built_in">url</span>(../font/FZZCHJW.TTF);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="背景透明"><a href="#背景透明" class="headerlink" title="背景透明"></a>背景透明</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">filter: alpha(opacity=50);</div><div class="line">opacity: 0.5;</div></pre></td></tr></table></figure>
<h2 id="浏览器的兼容前缀"><a href="#浏览器的兼容前缀" class="headerlink" title="浏览器的兼容前缀"></a>浏览器的兼容前缀</h2><table>
<thead>
<tr>
<th>前缀</th>
<th>组织</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-ms-</td>
<td>Microsoft</td>
<td>-ms-interpolation-mode</td>
<td>IE浏览器专属的CSS属性需添加-ms-前缀</td>
</tr>
<tr>
<td>-moz-</td>
<td>Mozilla</td>
<td>-moz-read-only</td>
<td>所有基于Gecko引擎的浏览器（如Firefox）专属的CSS属性需添加-moz-前缀</td>
</tr>
<tr>
<td>-o-</td>
<td>Opera</td>
<td>-o-text-overflow</td>
<td>Opera浏览器专属的CSS属性需添加-o-前缀</td>
</tr>
<tr>
<td>-webkit-</td>
<td>Webkit</td>
<td>-webkit-box-shadow</td>
<td>所有基于Webkit引擎的浏览器（如Chrome、Safari）专属的CSS需添加-webkit-前缀</td>
</tr>
</tbody>
</table>
<h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><h3 id="开启弹性滚动"><a href="#开启弹性滚动" class="headerlink" title="开启弹性滚动"></a>开启弹性滚动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line">  overflow: scroll;</div><div class="line">  -webkit-overflow-scrolling: touch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p><a href="https://github.com/emloxe/zwj-blog/blob/master/css/%E5%B8%B8%E7%94%A8css.md" target="_blank" rel="external">md文件</a></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js分页函数]]></title>
      <url>http://emloxe.github.io/2017/02/12/js%E5%88%86%E9%A1%B5%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>原生js写出的分页，会根据传入的当前页数和总页数，绘制出相应的html，html会用固定的结构。</p>
<a id="more"></a>
<h2 id="展示形式"><a href="#展示形式" class="headerlink" title="展示形式"></a>展示形式</h2><ul>
<li>总共1页<br>不显示页码</li>
<li>总页数小于4页<br>全部显示</li>
<li>当前页码左右显示2页页码</li>
<li>当前页不在页码左右边缘时，显示上一页下一页按钮</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page_nav"</span> <span class="attr">class</span>=<span class="string">"page-nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>css</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.page-nav</span>&#123;<span class="attribute">text-align</span>: center;<span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">50px</span> ;&#125;</div><div class="line"><span class="selector-class">.page-nav</span> <span class="selector-tag">a</span>,<span class="selector-tag">span</span>&#123;<span class="attribute">display</span>: inline-block;  <span class="attribute">background</span>: <span class="number">#fff</span> ; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>; <span class="attribute">color</span>: <span class="number">#666</span>; <span class="attribute">font</span>: <span class="number">13px</span>/<span class="number">23px</span> 宋体,Arial; <span class="attribute">height</span>: <span class="number">23px</span>; <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span>; <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">20px</span>; <span class="attribute">border-radius</span>: <span class="number">5px</span>;&#125;</div><div class="line"><span class="selector-class">.page-nav</span> <span class="selector-tag">i</span>&#123;<span class="attribute">font-style</span>: normal;<span class="attribute">color</span>: <span class="number">#666</span>;&#125;</div><div class="line"><span class="selector-class">.page-nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;&#125;</div><div class="line"><span class="selector-class">.page-nav</span> <span class="selector-tag">span</span><span class="selector-class">.active</span>&#123;<span class="attribute">background-color</span>: <span class="number">#49898F</span>;<span class="attribute">color</span>: <span class="number">#fff</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#49898F</span>;&#125;</div></pre></td></tr></table></figure></p>
<p><strong>js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 绘制页码  @param n1当前页码  @param n2总页码    </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderPageNum</span>(<span class="params">n1, n2</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> html = <span class="string">''</span>;</div><div class="line">  n1 = n1*<span class="number">1</span>;</div><div class="line">  n2 = n2*<span class="number">1</span>;</div><div class="line">  <span class="keyword">if</span> (n2 == <span class="number">1</span>) <span class="keyword">return</span> html;</div><div class="line">  <span class="keyword">if</span> (n1 &gt; n2) <span class="keyword">return</span> html;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (n1 != <span class="number">1</span>) &#123;</div><div class="line">    html += <span class="string">'&lt;a id="pre_btn" class="btn" href="javascript:;"&gt;上一页&lt;/a&gt;'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// 当前页码左边判断</span></div><div class="line">  <span class="keyword">if</span> (n1 &lt; <span class="number">4</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; n1; i++) &#123;</div><div class="line">      html += <span class="string">'&lt;a data-page="'</span>+i+<span class="string">'" href="javascript:;"&gt;'</span> + i + <span class="string">'&lt;/a&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    html += <span class="string">'&lt;a data-page="1" href="javascript:;"&gt;1&lt;/a&gt;&lt;i&gt;...&lt;/i&gt;'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">      html += <span class="string">'&lt;a data-page="'</span> + (n1 - i) + <span class="string">'" href="javascript:;"&gt;'</span> + (n1 - i) + <span class="string">'&lt;/a&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  html += <span class="string">'&lt;span class="active"&gt;'</span> + n1 + <span class="string">'&lt;/span&gt;'</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 当前页码右边判断</span></div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (n1 != n2) &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (n2 - n1 &lt; <span class="number">3</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = n1 + <span class="number">1</span>; i &lt; n2; i++) &#123;</div><div class="line">        html += <span class="string">'&lt;a href="javascript:;"&gt;'</span> + i + <span class="string">'&lt;/a&gt;'</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++) &#123;</div><div class="line">        html += <span class="string">'&lt;a data-page="'</span> + (n1 + i) + <span class="string">'" href="javascript:;"&gt;'</span> + (n1 + i) + <span class="string">'&lt;/a&gt;'</span>;</div><div class="line">      &#125;</div><div class="line">      html += <span class="string">'&lt;i&gt;...&lt;/i&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    html += <span class="string">'&lt;a data-page="'</span> + n2 + <span class="string">'" href="javascript:;"&gt;'</span> + n2 + <span class="string">'&lt;/a&gt;'</span>;</div><div class="line"></div><div class="line">    html += <span class="string">'&lt;a id="next_btn"  class="btn" href="javascript:;"&gt;下一页&lt;/a&gt;'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> html;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数renderPageNum传入当前页码和总页码将会生成对应的html返回<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用  renderPageNum(7, 20);</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> html = renderPageNum(<span class="number">7</span>, <span class="number">20</span>);</div><div class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">'page_nav'</span>);</div><div class="line">dom.innerHTML = html;</div></pre></td></tr></table></figure></p>
<p>css样式可自行编写；示例所返回的html为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page_nav"</span> <span class="attr">class</span>=<span class="string">"page-nav"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"pre_btn"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-page</span>=<span class="string">"1"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">i</span>&gt;</span>...<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-page</span>=<span class="string">"5"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-page</span>=<span class="string">"6"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-page</span>=<span class="string">"8"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-page</span>=<span class="string">"9"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">i</span>&gt;</span>...<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-page</span>=<span class="string">"20"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"next_btn"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="bootstrap-样式"><a href="#bootstrap-样式" class="headerlink" title="bootstrap 样式"></a>bootstrap 样式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">paginationHtml</span>(<span class="params">n1, n2</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> html = <span class="string">'&lt;ul class="pagination"&gt;'</span>;</div><div class="line">    n1 = n1 * <span class="number">1</span>;</div><div class="line">    n2 = n2 * <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (n2 == <span class="number">1</span>) <span class="keyword">return</span> html;</div><div class="line">    <span class="keyword">if</span> (n1 &gt; n2) <span class="keyword">return</span> html;</div><div class="line">    <span class="keyword">if</span> (n1 != <span class="number">1</span>) &#123;</div><div class="line">      html += <span class="string">'&lt;li&gt;&lt;span id="pre_btn"  href="javascript:;"&gt;« 上一页&lt;/span&gt;&lt;/li&gt;'</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      html += <span class="string">'&lt;li class="disabled"&gt;&lt;span  href="javascript:;"&gt;« 上一页&lt;/span&gt;&lt;/li&gt;'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (n1 &lt;= <span class="number">4</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; n1; i++) &#123;</div><div class="line">        html += <span class="string">'&lt;li&gt;&lt;a class="pnt" data-page="'</span> + i + <span class="string">'" href="javascript:;"&gt;'</span> + i + <span class="string">'&lt;/a&gt;&lt;/li&gt;'</span>;</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      html += <span class="string">'&lt;li&gt;&lt;a class="pnt" data-page="1" href="javascript:;"&gt;1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;...&lt;/span&gt;&lt;/li&gt;'</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        html += <span class="string">'&lt;li&gt;&lt;a class="pnt" data-page="'</span> + (n1 - i) + <span class="string">'" href="javascript:;"&gt;'</span> + (n1 - i) + <span class="string">'&lt;/a&gt;&lt;/li&gt;'</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    html += <span class="string">'&lt;li class="active"&gt;&lt;span&gt;'</span> + n1 + <span class="string">'&lt;/span&gt;&lt;/li&gt;'</span>;</div><div class="line">    <span class="comment">// 当前页码右边判断</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (n1 != n2) &#123;</div><div class="line">      <span class="keyword">if</span> (n2 - n1 &lt;= <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = n1 + <span class="number">1</span>; i &lt; n2; i++) &#123;</div><div class="line">          html += <span class="string">'&lt;li&gt;&lt;a class="pnt" data-page="'</span> + i + <span class="string">'" href="javascript:;"&gt;'</span> + i + <span class="string">'&lt;/a&gt;&lt;/li&gt;'</span>;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++) &#123;</div><div class="line">          html += <span class="string">'&lt;li&gt;&lt;a class="pnt" data-page="'</span> + (n1 + i) + <span class="string">'" href="javascript:;"&gt;'</span> + (n1 + i) + <span class="string">'&lt;/a&gt;&lt;/li&gt;'</span>;</div><div class="line">        &#125;</div><div class="line">        html += <span class="string">'&lt;li&gt;&lt;span&gt;...&lt;/span&gt;&lt;/li&gt;'</span>;</div><div class="line">      &#125;</div><div class="line">      html += <span class="string">'&lt;li&gt;&lt;a class="pnt" data-page="'</span> + n2 + <span class="string">'" href="javascript:;"&gt;'</span> + n2 + <span class="string">'&lt;/a&gt;&lt;/li&gt;'</span>;</div><div class="line">      html += <span class="string">'&lt;li&gt;&lt;span id="next_btn" href="javascript:;"&gt;下一页 »&lt;/span&gt;&lt;/li&gt;'</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      html += <span class="string">'&lt;li class="disabled"&gt;&lt;span href="javascript:;"&gt;下一页 »&lt;/span&gt;&lt;/li&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    html += <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">    <span class="keyword">return</span> html;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试-源码"><a href="#测试-源码" class="headerlink" title="测试+源码"></a>测试+源码</h2><p><a href="https://emloxe.github.io/e-test/pagination.html">测试</a><br><a href="https://github.com/emloxe/e-test/blob/master/pagination.html" target="_blank" rel="external">源码</a></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js类型检测]]></title>
      <url>http://emloxe.github.io/2017/02/10/js%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="Undefined、Number、String、Boolean"><a href="#Undefined、Number、String、Boolean" class="headerlink" title="Undefined、Number、String、Boolean"></a>Undefined、Number、String、Boolean</h2><p>可用 typeof 来判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let a = 123;</div><div class="line">if(typeof a === &apos;number&apos;)&#123;&#125;  // true</div></pre></td></tr></table></figure>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>还可以用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isNaN(123);  // false</div></pre></td></tr></table></figure></p>
<p>isNaN 判断不是数字</p>
<h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let b = null;</div><div class="line">if(!b&amp;&amp;typeof b === &apos;object&apos;)&#123;&#125;  // true</div></pre></td></tr></table></figure>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let c = []</div><div class="line">if(c instanceof Array)&#123;&#125;  // true</div></pre></td></tr></table></figure></p>
<p>方法二<br>Array方法内置判断方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Array.isArray(c);  // true</div></pre></td></tr></table></figure></p>
<p>方法三<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object.prototype.toString.call(c);  // [object Array]</div></pre></td></tr></table></figure></p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// p 为未知类型</span></div><div class="line"><span class="keyword">if</span>( p !== <span class="literal">null</span> &amp;&amp; ( <span class="keyword">typeof</span> p === <span class="string">'object'</span> || <span class="keyword">typeof</span> p === <span class="string">'function'</span>) &amp;&amp; <span class="keyword">typeof</span> p.ten === <span class="string">'function'</span> )&#123;</div><div class="line">  <span class="comment">// 为promise类型</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="comment">// 不是promise类型</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 类型检测 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序之页面跳转]]></title>
      <url>http://emloxe.github.io/2017/02/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</url>
      <content type="html"><![CDATA[<p>在做微信小程序时，发现每一个页面都有各自的生命周期，跳转向其他页面的方法都对当前存在页面的生命周期有不同影响。</p>
<a id="more"></a>
<h2 id="4种跳转简介"><a href="#4种跳转简介" class="headerlink" title="4种跳转简介"></a>4种跳转简介</h2><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/ui-navigate.html" target="_blank" rel="external">微信官方说明</a></p>
<h2 id="基本约定"><a href="#基本约定" class="headerlink" title="基本约定"></a>基本约定</h2><p>微信在下方定义有tabBar页面，以此为界将页面分为两种tabBar页和非tabBer页在此简称为tab页和普通页</p>
<h2 id="tab页"><a href="#tab页" class="headerlink" title="tab页"></a>tab页</h2><p>当前页面为tab页</p>
<h3 id="向tab页跳转"><a href="#向tab页跳转" class="headerlink" title="向tab页跳转"></a>向tab页跳转</h3><p>只能用switchTab()和redirectTo()，跳转后不会关闭其他tab页面</p>
<h3 id="向普通页面跳转"><a href="#向普通页面跳转" class="headerlink" title="向普通页面跳转"></a>向普通页面跳转</h3><p>用navigateTo()，不会关闭其他页面<br>用redirectTo()，会关闭其他所有页面</p>
<h2 id="普通页"><a href="#普通页" class="headerlink" title="普通页"></a>普通页</h2><p>当前页面为普通页</p>
<h3 id="向tab页跳转-1"><a href="#向tab页跳转-1" class="headerlink" title="向tab页跳转"></a>向tab页跳转</h3><p>只能用switchTab()和redirectTo();<br>都会关闭当前普通页面和其他所有普通页，不会关闭tab页</p>
<h3 id="向普通页跳转"><a href="#向普通页跳转" class="headerlink" title="向普通页跳转"></a>向普通页跳转</h3><p>用navigateTo()，不会关闭其他页面<br>用redirectTo()，会关闭当前普通页面，其他页面（tab页，普通页）不会关闭</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="用户中心"><a href="#用户中心" class="headerlink" title="用户中心"></a>用户中心</h3><p>如果微信小程序tab页有一个用户中心，用户登录和未登录显示出不一样的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;view wx:if=&quot;&#123;&#123;!userId&#125;&#125;&quot;&gt;</div><div class="line">  &lt;text&gt;用户未登录&lt;/text&gt;          </div><div class="line">&lt;/view&gt;</div><div class="line">&lt;view wx:if=&quot;&#123;&#123;userId&#125;&#125;&quot;&gt;</div><div class="line">  &lt;text&gt;用户已登录&lt;/text&gt;        </div><div class="line">&lt;/view&gt;</div></pre></td></tr></table></figure></p>
<p>当用户第一次进入<strong>用户中心登录页</strong>的tab页，tab页加载后就会存在，但是想要用户登录后，再次点击<strong>用户中心登录页</strong>的tab页可以显示用户已登录，就需要onUnload之前<strong>用户中心登录页</strong>，使页面重新加载。<br>这使就需要tab页用redirectTo()向普通页面跳转，只有这一种方式可以onUnload tab页</p>
<h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        onUnload</div><div class="line">            ↑</div><div class="line">onLoad → onShow ←→ onHide</div><div class="line">            ↓</div><div class="line">         onReady</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>若当前页面为tab页，其他普通页是不存在的，因为在跳转tab页时只能用switchTab()和redirectTo()，这两种方式都会使普通页onUnload</p>
]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://emloxe.github.io/2017/02/05/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">hexo中文文档</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT主题介绍文档</a><br><a href="https://volc1605.github.io/2016/10/03/Hexo%E4%B9%8BNexT%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/" target="_blank" rel="external">volc Hexo之NexT主题搭建博客详细过程</a></p>
<h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><p>评论<a href="http://duoshuo.com" target="_blank" rel="external">多说</a><br>网站分析<a href="http://ta.qq.com/" target="_blank" rel="external">腾讯分析</a><br>阅读次数统计<a href="https://leancloud.cn" target="_blank" rel="external">leancloud</a><br><a href="http://http://zhanzhang.baidu.com" target="_blank" rel="external">百度站长平台</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
